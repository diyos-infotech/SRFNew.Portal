using System;
using System.Collections;
using System.Data;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using KLTS.Data;
using System.Globalization;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using SRF.P.DAL;

namespace SRF.P.Module_Clients
{
    public partial class ClientBilling : System.Web.UI.Page
    {
        string EmpIDPrefix = "";
        string CmpIDPrefix = "";
        string FontStyle = "Tahoma";

        AppConfiguration config = new AppConfiguration();


        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {

                GetWebConfigdata();
                if (!IsPostBack)
                {
                    if (Session["UserId"] != null && Session["AccessLevel"] != null)
                    {
                       
                    }
                    else
                    {
                        Response.Redirect("login.aspx");
                    }

                    LoadClientList();
                    LoadClientNames();
                    LoadMonths();
                    ClearData();
                }
            }
            catch (Exception ex)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Show alert", "alert('Your Session Expired');", true);
                Response.Redirect("~/Login.aspx");
            }

        }

        protected void LoadMonths()
        {
            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            string currentMonth = monthName[DateTime.Now.Month - 1];
            string month = "";
            string LastMonth = "";
            try
            {
                month = monthName[DateTime.Now.Month - 2];
            }
            catch (IndexOutOfRangeException ex)
            {
                month = monthName[12 - (2 - DateTime.Now.Month)];
            }
            try
            {
                LastMonth = monthName[DateTime.Now.Month - 3];
            }
            catch (IndexOutOfRangeException ex)
            {
                LastMonth = monthName[12 - (3 - DateTime.Now.Month)];
            }
            ddlmonth.Items.Add(currentMonth);
            ddlmonth.Items.Add(month);
            ddlmonth.Items.Add(LastMonth);

            //try
            //{
            //    LastMonth = monthName[DateTime.Now.Month - 4];
            //}
            //catch (IndexOutOfRangeException ex)
            //{
            //    LastMonth = monthName[12 - (4 - DateTime.Now.Month)];
            //}
            //ddlmonth.Items.Add(LastMonth);




            ddlmonth.Items.Insert(0, "-select-");
        }

        protected void LoadClientNames()
        {
            DataTable DtClientids = GlobalData.Instance.LoadCNames(CmpIDPrefix);
            if (DtClientids.Rows.Count > 0)
            {
                ddlCname.DataValueField = "Clientid";
                ddlCname.DataTextField = "clientname";
                ddlCname.DataSource = DtClientids;
                ddlCname.DataBind();
            }
            ddlCname.Items.Insert(0, "-Select-");

        }

        protected void LoadClientList()
        {
            DataTable DtClientNames = GlobalData.Instance.LoadCIds(CmpIDPrefix);
            if (DtClientNames.Rows.Count > 0)
            {
                ddlclientid.DataValueField = "Clientid";
                ddlclientid.DataTextField = "Clientid";
                ddlclientid.DataSource = DtClientNames;
                ddlclientid.DataBind();
            }
            ddlclientid.Items.Insert(0, "-Select-");
        }

        protected void GetWebConfigdata()
        {

            EmpIDPrefix = Session["EmpIDPrefix"].ToString();
            CmpIDPrefix = Session["CmpIDPrefix"].ToString();
        }


        //protected void GetWebConfigdata()
        //{
        //    EmpIDPrefix = GlobalData.Instance.GetEmployeeIDPrefix();
        //    Elength = (EmpIDPrefix.Trim().Length + 1).ToString();
        //    CmpIDPrefix = GlobalData.Instance.GetClientIDPrefix();
        //    Clength = (CmpIDPrefix.Trim().Length + 1).ToString();
        //}

        public void btnvisible()
        {

            string chkpdfsquery = "select pdfs from Contracts where clientid='" + ddlclientid.SelectedValue + "'";
            DataTable dtchkpdfs = config.ExecuteReaderWithQueryAsync(chkpdfsquery).Result;
            string chkpdf = "False";
            if (dtchkpdfs.Rows.Count > 0)
                chkpdf = dtchkpdfs.Rows[0]["pdfs"].ToString();

            if (chkpdf == "True")
            {
                ddlpaymenttype.Visible = false;
                btndownloadpdffile.Visible = false;

            }
        }

        public void btnvisible_cname()
        {

            string chkpdfsquery = "select pdfs,c.ClientName from Contracts  ct inner join Clients c on ct.ClientId=c.ClientId where c.clientname='" + ddlCname.SelectedItem.Text + "'";
            DataTable dtchkpdfs = config.ExecuteReaderWithQueryAsync(chkpdfsquery).Result;
            string chkpdf = "False";
            if (dtchkpdfs.Rows.Count > 0)
                chkpdf = dtchkpdfs.Rows[0]["pdfs"].ToString();

            if (chkpdf == "True")
            {
                ddlpaymenttype.Visible = false;
                btndownloadpdffile.Visible = false;


            }
        }


        protected void ClearData()
        {
            lblTotalResources.Text = "0";
            lblMachinery.Text = "0";
            lblMaterial.Text = "0";
            lblServiceCharges.Text = "0";
            lblServiceTax.Text = "0";
            lblGrandTotal.Text = "0";
            lblCESS.Text = "0";
            lblSheCESS.Text = "0";
            lblSBCESS.Text = "0";
            lblKKCESS.Text = "0";
            #region for GST on 20-6-2017 by sharada
            lblCGST.Text = "0";
            lblSGST.Text = "0";
            lblIGST.Text = "0";
            lblCess1.Text = "0";
            lblCess2.Text = "0";
            #endregion for GST on 20-6-2017 by sharada
        }

        protected void DisplayDataInGrid()
        {
            lblResult.Text = string.Empty;
            DataTable DtBilling = null;
            float TotalResourceCost = 0;
            float MachineryCost = 0;
            float MaterialCost = 0;
            float ExtraOneAmt = 0;
            float ExtraTwoAmt = 0;
            float DisCountTwoAmt = 0;
            float ServiceCharge = 0;
            float ServiceTax = 0;
            float GrandTotal = 0;
            float sbCess = 0;
            float KKCess = 0;

            float CGST = 0;
            float SGST = 0;
            float IGST = 0;
            float Cess1 = 0;
            float Cess2 = 0;

            float Cess = 0;
            float Shecess = 0;
            float lessST75 = 0;
            float lessST25 = 0;
            float GRANDTOTAL = 0;
            bool ExtraDataSTCheck = false;
            float machineryCost = 0;
            float materialCost = 0;
            float maintenancecost = 0;
            float extraamountonecost = 0;
            float extraamoounttwocost = 0;
            float discountone = 0;
            float discounttwo = 0;
            float Staxonservicecharge = 0;
            float SCamtonMachinary = 0;
            float SCamtonMaintenance = 0;
            float SCamtonMaterial = 0;
            float SCamtonExtraone = 0;
            float SCamtonExtratwo = 0;
            float RelChrgAmt = 0;

            ClearExtraDataForBilling();

            ClearData();
            // int month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
            int month = GetMonthBasedOnSelectionDateorMonth();
            lbltotalamount.Text = "";
            DataTable Dtunit = null;
            gvClientBilling.DataSource = Dtunit;
            gvClientBilling.DataBind();
            DateTime LastDate = DateTime.Now;
            if (Chk_Month.Checked == false)
            {
                LastDate = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
            }
            if (Chk_Month.Checked == true)
            {
                LastDate = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
            }
            #region  Begin Code For Display Invoice Data Based On The ClientIdAndMonth as on [04-03-2014]
            var SPNameD = "GetInvoiceDataForDisplay";
            Hashtable HTDisplayForInvoice = new Hashtable();
            HTDisplayForInvoice.Add("@Clientid", ddlclientid.SelectedValue);
            HTDisplayForInvoice.Add("@Month", month);
            HTDisplayForInvoice.Add("@LastDay", LastDate);
            DataTable dtContracts = config.ExecuteAdaptorAsyncWithParams(SPNameD, HTDisplayForInvoice).Result;
            if (dtContracts.Rows.Count <= 0)
            {
                lblbillnolatest.Text = "";
                //ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Data Not Avaialable For This Month ');", true);
                lblResult.Text = "";
                return;
            }
            else
            {
                string paymentType = dtContracts.Rows[0]["Paymenttype"].ToString();
                double DIncludeST = double.Parse(dtContracts.Rows[0]["servicetax"].ToString());
                double DstrST75 = double.Parse(dtContracts.Rows[0]["ServiceTax75"].ToString());
                bool bIncludeST = false;
                if (DIncludeST == 0)
                {
                    bIncludeST = true;
                }
                bool bST75 = false;
                if (DstrST75 > 0)
                {
                    bST75 = true;
                }
                string CCGST = dtContracts.Rows[0]["CCGST"].ToString();
                string CSGST = dtContracts.Rows[0]["CSGST"].ToString();
                string CIGST = dtContracts.Rows[0]["CIGST"].ToString();
                string CCess1 = dtContracts.Rows[0]["CCess1"].ToString();
                string CCess2 = dtContracts.Rows[0]["CCess2"].ToString();
                lblbillnolatest.Text = dtContracts.Rows[0]["billno"].ToString();
                txtfromdate.Text = DateTime.Parse(dtContracts.Rows[0]["fromdt"].ToString()).ToString("dd/MM/yyyy");
                txttodate.Text = DateTime.Parse(dtContracts.Rows[0]["todt"].ToString()).ToString("dd/MM/yyyy");


                txtbilldate.Text = DateTime.Parse(dtContracts.Rows[0]["billdt"].ToString()).ToString("dd/MM/yyyy");
                txtduedate.Text = DateTime.Parse(dtContracts.Rows[0]["Duedt"].ToString()).ToString("dd/MM/yyyy");

                bool Extradatacheck = false;

                #region New code for extradata for billing titles as on 10/03/2014 by venkat

                string Machinarycosttitle = "";
                string Materialcosttitle = "";
                string Maintanancecosttitle = "";
                string Extraonetitle = "";
                string Extratwotitle = "";
                string Discountonetitle = "";
                string Discounttwotitle = "";

                #endregion

                bool STMachinary = false;
                bool STMaterial = false;
                bool STMaintenance = false;
                bool STExtraone = false;
                bool STExtratwo = false;

                bool SCMachinary = false;
                bool SCMaterial = false;
                bool SCMaintenance = false;
                bool SCExtraone = false;
                bool SCExtratwo = false;

                bool STDiscountone = false;
                bool STDiscounttwo = false;


                if (paymentType == "False")
                {

                    #region  Begin Man Power Part

                    #region Begin Code For Retrive Data From UnitBillBreakup As on [02-03-2014]

                    #region  Begin  Variable Declaration
                    var UBBSPName = "";
                    var UBBClientId = "";
                    var UBBMonth = 0;
                    Hashtable HtUBB = new Hashtable();
                    #endregion End Variable Declaration

                    #region  Begin Assign Values To the Variable
                    UBBSPName = "GetUnitbillbreakupdataBasedonClientdAndMonth";
                    UBBClientId = ddlclientid.SelectedValue;
                    UBBMonth = month;
                    #endregion End Assign Values To the Variable


                    #region Begin Calling Stored Procedure
                    HtUBB.Add("@clientid", UBBClientId);
                    HtUBB.Add("@month", month);
                    Dtunit = config.ExecuteAdaptorAsyncWithParams(UBBSPName, HtUBB).Result;
                    #endregion End Calling Stored Procedure

                    #endregion End Code For Retrive Data From UnitBillBreakup As on [02-03-2014]


                    if (Dtunit.Rows.Count > 0)
                    {

                        gvClientBilling.DataSource = Dtunit;
                        gvClientBilling.DataBind();
                    }
                    else
                    {
                        //LblResult.Text = "There Is No Bills  For The Selected Client";
                        return;
                    }
                    double totalamount = 0;
                    for (int index = 0; index < Dtunit.Rows.Count; index++)
                    {
                        totalamount = totalamount + double.Parse(Dtunit.Rows[index]["PayRate"].ToString());

                        float DutyHrs = float.Parse(Dtunit.Rows[index]["DutyHours"].ToString());
                        float noofems = float.Parse(Dtunit.Rows[index]["noofemps"].ToString());
                        float payrate = float.Parse(Dtunit.Rows[index]["payrate"].ToString());

                        float basic = float.Parse(Dtunit.Rows[index]["BasicDA"].ToString());
                        float OTAmount = 0;

                        if (String.IsNullOrEmpty(Dtunit.Rows[index]["otamount"].ToString()) == false)
                        {
                            OTAmount = float.Parse(Dtunit.Rows[index]["otamount"].ToString());
                        }

                        float amount = basic /*+ hra + Conveyance + WashAllowance + OtherAllowance + pf + esi*/ + OTAmount;
                        Label lblOt = gvClientBilling.Rows[index].FindControl("lblOtAmount") as Label;
                        Label totAmount = gvClientBilling.Rows[index].FindControl("lblamount") as Label;
                        Label PayRateWithType = gvClientBilling.Rows[index].FindControl("lblpayrate") as Label;

                        PayRateWithType.Text = payrate.ToString("0.00");
                        lblOt.Text = OTAmount.ToString("0.00");
                        totAmount.Text = Math.Round(amount).ToString("0.00");

                        TotalResourceCost += amount;


                    }

                    #endregion End Man Power Part

                }
                else
                {

                    #region Begin  Lampsum Part

                    if (dtContracts.Rows.Count > 0)
                    {
                        DataTable tempTable = new DataTable();
                        DataColumn col1 = new DataColumn();
                        col1.DataType = System.Type.GetType("System.String");
                        col1.AllowDBNull = true;
                        col1.Caption = "UnitId";
                        col1.ColumnName = "UnitId";
                        tempTable.Columns.Add(col1);
                        DataColumn col2 = new DataColumn();
                        col2.DataType = System.Type.GetType("System.String");
                        col2.AllowDBNull = true;
                        col2.Caption = "Designation";
                        col2.ColumnName = "Designation";
                        tempTable.Columns.Add(col2);
                        DataColumn col3 = new DataColumn();
                        col3.DataType = System.Type.GetType("System.String");
                        col3.AllowDBNull = true;
                        col3.Caption = "BasicDA";
                        col3.ColumnName = "BasicDA";
                        tempTable.Columns.Add(col3);
                        DataColumn col4 = new DataColumn();
                        col4.DataType = System.Type.GetType("System.String");
                        col4.AllowDBNull = true;
                        col4.Caption = "NoofEmps";
                        col4.ColumnName = "NoofEmps";
                        tempTable.Columns.Add(col4);
                        DataColumn col5 = new DataColumn();
                        col5.DataType = System.Type.GetType("System.String");
                        col5.AllowDBNull = true;
                        col5.Caption = "PayRate";
                        col5.ColumnName = "PayRate";
                        tempTable.Columns.Add(col5);
                        DataColumn col6 = new DataColumn();
                        col6.DataType = System.Type.GetType("System.String");
                        col6.AllowDBNull = true;
                        col6.Caption = "DutyHours";
                        col6.ColumnName = "DutyHours";
                        tempTable.Columns.Add(col6);
                        DataColumn col7 = new DataColumn();
                        col7.DataType = System.Type.GetType("System.String");
                        col7.AllowDBNull = true;
                        col7.Caption = "OT Amount";
                        col7.ColumnName = "otamount";
                        tempTable.Columns.Add(col7);
                        DataColumn col8 = new DataColumn();
                        col8.DataType = System.Type.GetType("System.String");
                        col8.AllowDBNull = true;
                        col8.Caption = "DutyHrs";
                        col8.ColumnName = "DutyHrs";
                        tempTable.Columns.Add(col8);


                        string strQry = "Select Designations from ContractDetails where ClientID='" + ddlclientid.SelectedValue + "'";
                        string lumquery = "Select lumpsumtext from Contracts  where ClientID='" + ddlclientid.SelectedValue + "'";
                        DataTable desigTable = config.ExecuteReaderWithQueryAsync(strQry).Result;
                        DataTable designTable = config.ExecuteReaderWithQueryAsync(lumquery).Result;
                        string designation = "Lumpsum";
                        if (desigTable.Rows.Count > 0)
                        {
                            designation = desigTable.Rows[0]["Designations"].ToString();
                        }
                        DataRow row = tempTable.NewRow();
                        row["UnitId"] = ddlclientid.SelectedValue;
                        row["Designation"] = designTable.Rows[0]["lumpsumtext"].ToString();
                        row["BasicDA"] = "0";
                        row["NoofEmps"] = "0";
                        row["DutyHrs"] = "0";
                        row["PayRate"] = "0";
                        row["DutyHours"] = "";
                        row["otamount"] = "0";
                        tempTable.Rows.Add(row);

                        gvClientBilling.DataSource = tempTable;
                        gvClientBilling.DataBind();

                        if (gvClientBilling.Rows.Count > 0)
                        {
                            Label totAmount = gvClientBilling.Rows[0].FindControl("lblamount") as Label;
                            Label lblpayrate = gvClientBilling.Rows[0].FindControl("lblpayrate") as Label;

                            float lumpsumAmount = 0;
                            if (dtContracts.Rows[0]["TotalChrg"].ToString().Trim().Length > 0)
                                lumpsumAmount = Convert.ToSingle(dtContracts.Rows[0]["TotalChrg"].ToString().Trim());
                            totAmount.Text = dtContracts.Rows[0]["TotalChrg"].ToString();
                            TotalResourceCost = lumpsumAmount;
                            lblpayrate.Text = dtContracts.Rows[0]["TotalChrg"].ToString();
                        }
                    }
                    else
                    {
                        gvClientBilling.DataSource = null;
                        gvClientBilling.DataBind();
                    }

                    #endregion End Lumsum Part
                }

                #region Begin Extra Data For Billing

                if (dtContracts.Rows.Count > 0)
                {
                    string strServCharge = dtContracts.Rows[0]["ServiceChrg"].ToString();
                    string strServTax = dtContracts.Rows[0]["ServiceTax"].ToString();
                    string strsbCess = dtContracts.Rows[0]["SBCESSAmt"].ToString();
                    string strKKCess = dtContracts.Rows[0]["KKCESSAmt"].ToString();
                    string strCess = dtContracts.Rows[0]["CESS"].ToString();
                    string strSheCess = dtContracts.Rows[0]["SHECess"].ToString();
                    string strRelChrgAmt = dtContracts.Rows[0]["RelChrgAmt"].ToString();

                    string strCGST = dtContracts.Rows[0]["CGSTAmt"].ToString();
                    string strSGST = dtContracts.Rows[0]["SGSTAmt"].ToString();
                    string strIGST = dtContracts.Rows[0]["IGSTAmt"].ToString();
                    string strCess1 = dtContracts.Rows[0]["Cess1Amt"].ToString();
                    string strCess2 = dtContracts.Rows[0]["Cess2Amt"].ToString();


                    machineryCost = float.Parse(dtContracts.Rows[0]["MachinaryCost"].ToString());
                    materialCost = float.Parse(dtContracts.Rows[0]["MaterialCost"].ToString());
                    maintenancecost = float.Parse(dtContracts.Rows[0]["ElectricalChrg"].ToString());
                    extraamountonecost = float.Parse(dtContracts.Rows[0]["ExtraAmtone"].ToString());
                    extraamoounttwocost = float.Parse(dtContracts.Rows[0]["ExtraAmtTwo"].ToString());
                    discountone = float.Parse(dtContracts.Rows[0]["Discount"].ToString());
                    discounttwo = float.Parse(dtContracts.Rows[0]["Discounttwo"].ToString());

                    txtRemarks.Text = dtContracts.Rows[0]["Remarks"].ToString();

                    txtmachinarycost.Text = dtContracts.Rows[0]["Machinarycosttitle"].ToString();
                    txtMaterialcost.Text = dtContracts.Rows[0]["Materialcosttitle"].ToString();
                    txtMaintanancecost.Text = dtContracts.Rows[0]["Maintanancecosttitle"].ToString();
                    txtextraonetitle.Text = dtContracts.Rows[0]["Extraonetitle"].ToString();
                    txtextratwotitle.Text = dtContracts.Rows[0]["Extratwotitle"].ToString();
                    txtdiscount.Text = dtContracts.Rows[0]["Discountonetitle"].ToString();
                    txtdiscounttwotitle.Text = dtContracts.Rows[0]["Discounttwotitle"].ToString();


                    #region New code for extradata for billing titles as on 20/01/2014 by venkat

                    Machinarycosttitle = dtContracts.Rows[0]["Machinarycosttitle"].ToString();
                    Materialcosttitle = dtContracts.Rows[0]["Materialcosttitle"].ToString();
                    Maintanancecosttitle = dtContracts.Rows[0]["Maintanancecosttitle"].ToString();
                    Extraonetitle = dtContracts.Rows[0]["Extraonetitle"].ToString();
                    Extratwotitle = dtContracts.Rows[0]["Extratwotitle"].ToString();
                    Discountonetitle = dtContracts.Rows[0]["Discountonetitle"].ToString();
                    Discounttwotitle = dtContracts.Rows[0]["Discounttwotitle"].ToString();

                    #endregion

                    #region New code for extradata  as on 27/01/2014 by venkat

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["Extradatacheck"].ToString()) == false)
                    {
                        Extradatacheck = Boolean.Parse(dtContracts.Rows[0]["Extradatacheck"].ToString());
                        if (Extradatacheck == true)
                        {
                            checkExtraData.Checked = true;
                        }
                        else
                        {
                            checkExtraData.Checked = false;
                        }
                    }


                    if (checkExtraData.Checked == true)
                    {
                        if (Chk_Month.Checked == false)
                        {
                            if (ddlclientid.SelectedIndex > 0 && ddlmonth.SelectedIndex > 0)
                            {
                                panelRemarks.Visible = true;
                            }
                        }
                        if (Chk_Month.Checked == true)
                        {
                            if (ddlclientid.SelectedIndex > 0 && txtmonth.Text.Trim().Length > 0)
                            {
                                panelRemarks.Visible = true;
                            }
                        }
                    }

                    #endregion

                    #region Begin New Code for service tax extradata  as 01/04/2014 by venkat

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["STMachinary"].ToString()) == false)
                    {
                        STMachinary = Boolean.Parse(dtContracts.Rows[0]["STMachinary"].ToString());
                        if (STMachinary == true)
                        {
                            chkSTYesMachinary.Checked = true;
                        }
                        else
                        {
                            chkSTYesMachinary.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["STMaterial"].ToString()) == false)
                    {
                        STMaterial = Boolean.Parse(dtContracts.Rows[0]["STMaterial"].ToString());
                        if (STMaterial == true)
                        {
                            chkSTYesMaterial.Checked = true;
                        }
                        else
                        {
                            chkSTYesMaterial.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["STMaintenance"].ToString()) == false)
                    {
                        STMaintenance = Boolean.Parse(dtContracts.Rows[0]["STMaintenance"].ToString());
                        if (STMaintenance == true)
                        {
                            chkSTYesElectrical.Checked = true;
                        }
                        else
                        {
                            chkSTYesElectrical.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["STExtraone"].ToString()) == false)
                    {
                        STExtraone = Boolean.Parse(dtContracts.Rows[0]["STExtraone"].ToString());
                        if (STExtraone == true)
                        {
                            chkSTYesExtraone.Checked = true;
                        }
                        else
                        {
                            chkSTYesExtraone.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["STExtratwo"].ToString()) == false)
                    {
                        STExtratwo = Boolean.Parse(dtContracts.Rows[0]["STExtratwo"].ToString());
                        if (STExtratwo == true)
                        {
                            chkSTYesExtratwo.Checked = true;
                        }
                        else
                        {
                            chkSTYesExtratwo.Checked = false;
                        }
                    }


                    #endregion

                    #region Begin New Code for service Charge on extradata  as 01/04/2014 by venkat

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCMachinary"].ToString()) == false)
                    {
                        SCMachinary = Boolean.Parse(dtContracts.Rows[0]["SCMachinary"].ToString());
                        if (SCMachinary == true)
                        {
                            chkSCYesMachinary.Checked = true;
                        }
                        else
                        {
                            chkSCYesMachinary.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCMaterial"].ToString()) == false)
                    {
                        SCMaterial = Boolean.Parse(dtContracts.Rows[0]["SCMaterial"].ToString());
                        if (SCMaterial == true)
                        {
                            chkSCYesMaterial.Checked = true;
                        }
                        else
                        {
                            chkSCYesMaterial.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCMaintenance"].ToString()) == false)
                    {
                        SCMaintenance = Boolean.Parse(dtContracts.Rows[0]["SCMaintenance"].ToString());
                        if (SCMaintenance == true)
                        {
                            chkSCYesElectrical.Checked = true;
                        }
                        else
                        {
                            chkSCYesElectrical.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCExtraone"].ToString()) == false)
                    {
                        SCExtraone = Boolean.Parse(dtContracts.Rows[0]["SCExtraone"].ToString());
                        if (SCExtraone == true)
                        {
                            chkSCYesExtraone.Checked = true;
                        }
                        else
                        {
                            chkSCYesExtraone.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["SCExtratwo"].ToString()) == false)
                    {
                        SCExtratwo = Boolean.Parse(dtContracts.Rows[0]["SCExtratwo"].ToString());
                        if (SCExtratwo == true)
                        {
                            chkSCYesExtratwo.Checked = true;
                        }
                        else
                        {
                            chkSCYesExtratwo.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["STDiscountone"].ToString()) == false)
                    {
                        STDiscountone = Boolean.Parse(dtContracts.Rows[0]["STDiscountone"].ToString());
                        if (STDiscountone == true)
                        {
                            chkSTDiscountone.Checked = true;
                        }
                        else
                        {
                            chkSTDiscountone.Checked = false;
                        }
                    }

                    if (String.IsNullOrEmpty(dtContracts.Rows[0]["STDiscounttwo"].ToString()) == false)
                    {
                        STDiscounttwo = Boolean.Parse(dtContracts.Rows[0]["STDiscounttwo"].ToString());
                        if (STDiscounttwo == true)
                        {
                            chkSTDiscounttwo.Checked = true;
                        }
                        else
                        {
                            chkSTDiscounttwo.Checked = false;
                        }
                    }


                    #endregion

                    #region Begin New Code for Service tax amount on Extradata as on 01/04/2014 by venkat

                    Staxonservicecharge = float.Parse(dtContracts.Rows[0]["Staxonservicecharge"].ToString());
                    SCamtonMachinary = float.Parse(dtContracts.Rows[0]["SCamtonMachinary"].ToString());
                    SCamtonMaintenance = float.Parse(dtContracts.Rows[0]["SCamtonMaintenance"].ToString());
                    SCamtonMaterial = float.Parse(dtContracts.Rows[0]["SCamtonMaterial"].ToString());
                    SCamtonExtraone = float.Parse(dtContracts.Rows[0]["SCamtonExtraone"].ToString());
                    SCamtonExtratwo = float.Parse(dtContracts.Rows[0]["SCamtonExtratwo"].ToString());

                    #endregion


                    GRANDTOTAL = float.Parse(dtContracts.Rows[0]["GrandTotal"].ToString());
                    /* End New code As on [01-07-2013]   */


                    txtMachinery.Text = machineryCost.ToString();
                    txtMaterial.Text = materialCost.ToString();
                    txtElectical.Text = maintenancecost.ToString();
                    txtextraonevalue.Text = extraamountonecost.ToString();
                    txtextratwovalue.Text = extraamoounttwocost.ToString();
                    txtDiscounts.Text = discountone.ToString();
                    txtdiscounttwovalue.Text = discounttwo.ToString();

                    lblRemarks.Text = txtRemarks.Text;

                    if (strRelChrgAmt.Trim().Length > 0)
                    {
                        RelChrgAmt = Convert.ToSingle(strRelChrgAmt);
                        lblRelChrgAmt.Text = RelChrgAmt.ToString("0.00");
                    }


                    if (strServCharge.Trim().Length > 0)
                    {
                        ServiceCharge = Convert.ToSingle(strServCharge);
                        lblServiceCharges.Text = ServiceCharge.ToString("0.00");
                    }
                    if (strServTax.Trim().Length > 0)
                    {
                        ServiceTax = Convert.ToSingle(strServTax);
                        lblServiceTax.Text = ServiceTax.ToString("0.00");
                    }
                    if (strsbCess.Trim().Length > 0)
                    {
                        sbCess = Convert.ToSingle(strsbCess);
                        lblSBCESS.Text = sbCess.ToString("0.00");
                    }
                    if (strKKCess.Trim().Length > 0)
                    {
                        KKCess = Convert.ToSingle(strKKCess);
                        lblKKCESS.Text = KKCess.ToString("0.00");
                    }

                    #region for GST on 21-6-2017 by sharada

                    if (strCGST.Trim().Length > 0)
                    {
                        CGST = Convert.ToSingle(strCGST);
                        lblCGST.Text = CGST.ToString("0.00");
                    }


                    if (strSGST.Trim().Length > 0)
                    {
                        SGST = Convert.ToSingle(strSGST);
                        lblSGST.Text = SGST.ToString("0.00");
                    }


                    if (strIGST.Trim().Length > 0)
                    {
                        IGST = Convert.ToSingle(strIGST);
                        lblIGST.Text = IGST.ToString("0.00");
                    }

                    if (strCess1.Trim().Length > 0)
                    {
                        Cess1 = Convert.ToSingle(strCess1);
                        lblCess1.Text = Cess1.ToString("0.00");
                    }

                    if (strCess2.Trim().Length > 0)
                    {
                        Cess2 = Convert.ToSingle(strCess2);
                        lblCess2.Text = Cess2.ToString("0.00");
                    }

                    #endregion for GST on 21-6-2017
                    if (strCess.Trim().Length > 0)
                    {
                        Cess = Convert.ToSingle(strCess);
                        lblCESS.Text = Cess.ToString("0.00");
                    }
                    if (strSheCess.Trim().Length > 0)
                    {
                        Shecess = Convert.ToSingle(strSheCess);
                        lblSheCESS.Text = Shecess.ToString("0.00");
                    }
                    if (bIncludeST)
                    {
                        lblServiceTaxTitle.Visible = false;
                        lblServiceTax.Visible = false;
                        lblCESS.Visible = false;
                        lblCESSTitle.Visible = false;
                        lblSheCESS.Visible = false;
                        lblSheCESSTitle.Visible = false;
                        lblSBCESS.Visible = false;
                        lblSBCESSTitle.Visible = false;
                        lblKKCESS.Visible = false;
                        lblKKCESSTitle.Visible = false;
                    }
                    else
                    {
                        lblServiceTaxTitle.Visible = true;
                        lblServiceTax.Visible = true;
                        lblCESS.Visible = true;
                        lblCESSTitle.Visible = true;
                        lblSheCESS.Visible = true;
                        lblSheCESSTitle.Visible = true;
                        lblSBCESS.Visible = true;
                        lblSBCESSTitle.Visible = true;
                        lblKKCESS.Visible = true;
                        lblKKCESSTitle.Visible = true;

                    }
                    #region for GST  on 21-6-2017 by sharada

                    if (CCGST == "True")
                    {
                        lblCGST.Visible = true;
                        TxtCGSTPrc.Visible = false;
                        lblCGSTTitle.Visible = true;
                    }
                    else
                    {
                        lblCGST.Visible = false;
                        TxtCGSTPrc.Visible = false;
                        lblCGSTTitle.Visible = false;
                    }

                    if (CSGST == "True")
                    {
                        lblSGST.Visible = true;
                        TxtSGSTPrc.Visible = false;
                        lblSGSTTitle.Visible = true;
                    }
                    else
                    {
                        lblSGST.Visible = false;
                        TxtSGSTPrc.Visible = false;
                        lblSGSTTitle.Visible = false;
                    }

                    if (CIGST == "True")
                    {
                        lblIGST.Visible = true;
                        TxtIGSTPrc.Visible = false;
                        lblIGSTTitle.Visible = true;
                    }
                    else
                    {
                        lblIGST.Visible = false;
                        TxtIGSTPrc.Visible = false;
                        lblIGSTTitle.Visible = false;
                    }


                    if (CCess1 == "True")
                    {
                        lblCess1.Visible = true;
                        TxtCess1Prc.Visible = false;
                        lblCess1Title.Visible = true;
                    }
                    else
                    {
                        lblCess1.Visible = false;
                        TxtCess1Prc.Visible = false;
                        lblCess1Title.Visible = false;
                    }

                    if (CCess2 == "True")
                    {
                        lblCess2.Visible = true;
                        TxtCess2Prc.Visible = false;
                        lblCess2Title.Visible = true;
                    }
                    else
                    {
                        lblCess2.Visible = false;
                        TxtCess2Prc.Visible = false;
                        lblCess2Title.Visible = false;
                    }


                    #endregion for GST  on 21-6-2017 by sharada

                }
                #endregion End Extra Data For Billing
                DateTime today = DateTime.Now.Date;
                lblServiceChargeTitle.Visible = false;
                lblServiceCharges.Visible = false;


                #region Begin Extra Data For Billing Part - 2


                float electricalCost = 0;
                float discountAmount = 0;

                if (dtContracts.Rows.Count > 0)
                {
                    string seviceChargetype = dtContracts.Rows[0]["ServiceChargeType"].ToString();

                    #region Machinary Cost checking

                    if (machineryCost > 0)
                    {
                        MachineryCost = Convert.ToSingle(machineryCost);
                        if (MachineryCost > 0)
                        {

                            if (STMachinary == true)
                            {
                                lblMachinerywithst.Text = MachineryCost.ToString("0.00");
                                lblMachinerywithst.Visible = true;
                                lblMachineryTitlewithst.Visible = true;
                                // lblMachineryTitlewithst.Text = txtmachinarycost.Text;
                                lblMachineryTitlewithst.Text = Machinarycosttitle;
                            }
                            else
                            {
                                lblMachinery.Text = MachineryCost.ToString("0.00");
                                lblMachinery.Visible = true;
                                lblMachineryTitle.Visible = true;
                                //lblMachineryTitle.Text = txtmachinarycost.Text;
                                lblMachineryTitle.Text = Machinarycosttitle;
                            }
                        }
                        else
                        {

                            #region New code as on 21/01/2014


                            lblMachinerywithst.Text = string.Empty; ;
                            lblMachineryTitlewithst.Text = string.Empty;
                            lblMachinerywithst.Text = string.Empty;
                            lblMachineryTitlewithst.Text = string.Empty;

                            #endregion
                        }
                    }

                    #endregion

                    #region Material Cost checking

                    if (materialCost > 0)
                    {
                        MaterialCost = Convert.ToSingle(materialCost);
                        if (MaterialCost > 0)
                        {
                            if (STMaterial == true)
                            {
                                lblMaterialwithst.Text = MaterialCost.ToString("0.00");
                                lblMaterialwithst.Visible = true;
                                lblMaterialTitlewithst.Visible = true;
                                //lblMaterialTitlewithst.Text = txtMaterialcost.Text;
                                lblMaterialTitlewithst.Text = Materialcosttitle;
                            }
                            else
                            {
                                lblMaterial.Text = MaterialCost.ToString("0.00");
                                lblMaterial.Visible = true;
                                lblMaterialTitle.Visible = true;
                                //lblMaterialTitle.Text = txtMaterialcost.Text;
                                lblMaterialTitle.Text = Materialcosttitle;
                            }

                        }
                        else
                        {

                            lblMaterial.Text = string.Empty;
                            lblMaterialTitle.Text = string.Empty;
                            lblMaterialwithst.Text = string.Empty;
                            lblMaterialTitlewithst.Text = string.Empty;

                        }
                    }
                    #endregion


                    if (RelChrgAmt > 0)
                    {
                        lblRelChrTitle.Visible = true;
                        lblRelChrgAmt.Visible = true;
                    }

                    else
                    {
                        lblRelChrTitle.Visible = false;
                        lblRelChrgAmt.Visible = false;
                    }

                    if (seviceChargetype.Length > 0)
                    {
                        if (ServiceCharge > 0)
                        {
                            lblServiceChargeTitle.Visible = true;
                            lblServiceCharges.Visible = true;
                        }
                    }
                    else
                    {
                        lblServiceChargeTitle.Visible = false;
                        lblServiceCharges.Visible = false;
                    }

                    #region Maintenance Cost Checking

                    if (maintenancecost > 0)
                    {
                        electricalCost = Convert.ToSingle(maintenancecost);
                        if (electricalCost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                lblElectricalTitlewithst.Visible = true;
                                lblElectricalwithst.Visible = true;
                                lblElectricalwithst.Text = electricalCost.ToString("0.00");
                                lblElectricalTitlewithst.Text = Maintanancecosttitle;
                            }
                            else
                            {
                                lblElectricalTitle.Visible = true;
                                lblElectrical.Visible = true;
                                lblElectrical.Text = electricalCost.ToString("0.00");
                                lblElectricalTitle.Text = Maintanancecosttitle;
                            }
                        }
                        else
                        {

                            lblElectrical.Text = string.Empty;
                            lblElectricalTitle.Text = string.Empty;
                            lblElectricalwithst.Text = string.Empty;
                            lblElectricalTitlewithst.Text = string.Empty;

                        }
                    }

                    #endregion

                    #region Discount one


                    if (discountone > 0)
                    {
                        discountAmount = Convert.ToSingle(discountone);
                        if (discountAmount > 0)
                        {
                            if (STDiscountone == true)
                            {

                                lblDiscountwithst.Visible = true;
                                lblDiscountTitlewithst.Visible = true;
                                lblDiscountwithst.Text = discountAmount.ToString("0.00");
                                lblDiscountTitlewithst.Text = Discountonetitle;


                            }
                            else
                            {

                                lblDiscount.Visible = true;
                                lblDiscountTitle.Visible = true;
                                lblDiscount.Text = discountAmount.ToString("0.00");
                                lblDiscountTitle.Text = Discountonetitle;
                            }

                        }
                        else
                        {

                            #region New code as on 21/01/2014

                            lblDiscountwithst.Visible = false;
                            lblDiscountTitlewithst.Visible = false;
                            lblDiscount.Visible = false;
                            lblDiscountTitle.Visible = false;

                            lblDiscount.Text = string.Empty;
                            lblDiscountTitle.Text = string.Empty;
                            lblDiscountwithst.Text = string.Empty;
                            lblDiscountTitlewithst.Text = string.Empty;

                            #endregion
                        }
                    }

                    #endregion

                    /* Begin  New code as on [01-07-2013]*/

                    #region Extraamount One



                    if (extraamountonecost > 0)
                    {
                        ExtraOneAmt = Convert.ToSingle(extraamountonecost);
                        if (ExtraOneAmt > 0)
                        {
                            if (STExtraone == true)
                            {

                                lblextraonetitlewithst.Visible = true;
                                lblextraonewithst.Visible = true;
                                lblextraonewithst.Text = ExtraOneAmt.ToString("0.00");
                                //lblextraonetitlewithst.Text = txtextraonetitle.Text;
                                lblextraonetitlewithst.Text = Extraonetitle;
                            }
                            else
                            {
                                lblextraoneamttitle.Visible = true;
                                lblextraamt.Visible = true;
                                lblextraamt.Text = ExtraOneAmt.ToString("0.00");
                                //lblextraoneamttitle.Text = txtextraonetitle.Text;
                                lblextraoneamttitle.Text = Extraonetitle;
                            }
                        }

                        else
                        {

                            #region New code as on 21/01/2014

                            lblextraamt.Text = string.Empty;
                            lblextraoneamttitle.Text = string.Empty;
                            lblextraonewithst.Text = string.Empty;
                            lblextraonetitlewithst.Text = string.Empty;

                            #endregion
                        }
                    }
                    #endregion

                    #region Extraamount Two


                    if (extraamoounttwocost > 0)
                    {
                        ExtraTwoAmt = Convert.ToSingle(extraamoounttwocost);
                        if (ExtraTwoAmt > 0)
                        {
                            if (STExtratwo == true)
                            {
                                lblextratwotitlewithst.Visible = true;
                                lblextratwowithst.Visible = true;
                                lblextratwowithst.Text = ExtraTwoAmt.ToString("0.00");
                                //lblextratwotitlewithst.Text = txtextratwotitle.Text;
                                lblextratwotitlewithst.Text = Extratwotitle;
                            }
                            else
                            {
                                lblextratwoamttitle.Visible = true;
                                lblextratwoamt.Visible = true;
                                lblextratwoamt.Text = ExtraTwoAmt.ToString("0.00");
                                lblextratwoamttitle.Text = txtextratwotitle.Text;
                            }
                        }

                        else
                        {

                            #region New code as on 21/01/2014

                            lblextratwoamt.Text = string.Empty;
                            lblextratwoamttitle.Text = string.Empty;
                            lblextratwowithst.Text = string.Empty;
                            lblextratwotitlewithst.Text = string.Empty;

                            #endregion
                        }
                    }
                    #endregion


                    #region Discount two


                    if (discounttwo > 0)
                    {
                        DisCountTwoAmt = Convert.ToSingle(discounttwo);
                        if (DisCountTwoAmt > 0)
                        {
                            if (STDiscounttwo == true)
                            {
                                lblDiscounttwowithst.Visible = true;
                                lblDiscounttwotitlewithst.Visible = true;
                                lblDiscounttwowithst.Text = DisCountTwoAmt.ToString("0.00");
                                lblDiscounttwotitlewithst.Text = Discounttwotitle;




                            }
                            else
                            {
                                lblDiscounttwo.Visible = true;
                                lblDiscounttwoTitle.Visible = true;
                                lblDiscounttwo.Text = DisCountTwoAmt.ToString("0.00");
                                lblDiscounttwoTitle.Text = Discounttwotitle;


                            }
                        }
                        else
                        {

                            #region New code as on 21/01/2014
                            lblDiscounttwowithst.Visible = false;
                            lblDiscounttwotitlewithst.Visible = false;
                            lblDiscounttwo.Visible = false;
                            lblDiscounttwoTitle.Visible = false;

                            lblDiscounttwo.Text = string.Empty;
                            lblDiscounttwoTitle.Text = string.Empty;
                            lblDiscounttwowithst.Text = string.Empty;
                            lblDiscounttwotitlewithst.Text = string.Empty;

                            #endregion
                        }

                    }

                    #endregion
                    /*End  New code As on [01-07-2013]*/

                    #region Begin New Code for Service tax amount on Individual extra detail as on 01/04/2014 by Venkat

                    if (Staxonservicecharge > 0)
                    {
                        lblStaxamtonServicechargetitle.Visible = true;
                        lblStaxamtonServicecharge.Visible = true;
                        lblStaxamtonServicecharge.Text = Staxonservicecharge.ToString();
                    }
                    else
                    {

                        lblStaxamtonServicechargetitle.Visible = false;
                        lblStaxamtonServicecharge.Visible = false;
                        lblStaxamtonServicecharge.Text = string.Empty;
                    }

                    if (SCamtonMachinary > 0 && SCMachinary == true)
                    {

                        lblSChargeamtonMachinarytitle.Visible = true;
                        lblSChargeamtonMachinary.Visible = true;
                        lblSChargeamtonMachinary.Text = SCamtonMachinary.ToString();
                    }
                    else
                    {
                        lblSChargeamtonMachinarytitle.Visible = false;
                        lblSChargeamtonMachinary.Visible = false;
                        lblSChargeamtonMachinary.Text = string.Empty;
                    }


                    if (SCamtonMaintenance > 0 && SCMaintenance == true)
                    {

                        lblSchargeamtonMaintenancetitle.Visible = true;
                        lblSchargeamtonMaintenance.Visible = true;
                        lblSchargeamtonMaintenance.Text = SCamtonMaintenance.ToString();
                    }
                    else
                    {
                        lblSchargeamtonMaintenancetitle.Visible = false;
                        lblSchargeamtonMaintenance.Visible = false;
                        lblSchargeamtonMaintenance.Text = string.Empty;
                    }


                    if (SCamtonMaterial > 0 && SCMaterial == true)
                    {

                        lblSchargeamtonMaterialtitle.Visible = true;
                        lblSchargeamtonMaterial.Visible = true;
                        lblSchargeamtonMaterial.Text = SCamtonMaterial.ToString();

                    }
                    else
                    {
                        lblSchargeamtonMaterialtitle.Visible = false;
                        lblSchargeamtonMaterial.Visible = false;
                        lblSchargeamtonMaterial.Text = string.Empty;
                    }


                    if (SCamtonExtraone > 0 && SCExtraone == true)
                    {

                        lblSchargeamtonExtraonetitle.Visible = true;
                        lblSchargeamtonExtraone.Visible = true;
                        lblSchargeamtonExtraone.Text = SCamtonExtraone.ToString();

                    }
                    else
                    {
                        lblSchargeamtonExtraonetitle.Visible = false;
                        lblSchargeamtonExtraone.Visible = false;
                        lblSchargeamtonExtraone.Text = string.Empty;
                    }

                    if (SCamtonExtratwo > 0 && SCExtratwo == true)
                    {

                        lblSchargeamtonExtratwotitle.Visible = true;
                        lblSchargeamtonExtratwo.Visible = true;
                        lblSchargeamtonExtratwo.Text = SCamtonExtratwo.ToString();
                    }
                    else
                    {
                        lblSchargeamtonExtratwotitle.Visible = false;
                        lblSchargeamtonExtratwo.Visible = false;
                        lblSchargeamtonExtratwo.Text = string.Empty;
                    }

                    #endregion


                }

                #endregion End Extra Data For Billing Part - 2

                #region Begin Code For Grand Total Part
                lblTotalResources.Text = Math.Round(TotalResourceCost).ToString("0.00");
                //GrandTotal = TotalResourceCost + MachineryCost + MaterialCost + ServiceCharge + electricalCost;
                //if (!bIncludeST)
                //    GrandTotal += ServiceTax + Cess + Shecess + sbCess + KKCess;
                //GrandTotal -= lessST75;
                GrandTotal = 0;
                if (dtContracts.Rows.Count > 0)
                    GrandTotal = float.Parse(dtContracts.Rows[0]["Grandtotal"].ToString());
                GrandTotal = (float)Math.Round(GrandTotal, 0);
                //GrandTotal =
                lblGrandTotal.Text = GrandTotal.ToString("0.00");
                lblamtinwords.Text = NumberToEnglish.Instance.changeNumericToWords(GrandTotal.ToString());
                #endregion End Code For Grand Total Part


            }
            #endregion  Begin Code For Display Invoice Data Based On The ClientIdAndMonth as on [04-03-2014]



        }



        public class PageEventHelper : PdfPageEventHelper
        {
            PdfContentByte cb;
            PdfTemplate template;

            BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

            public override void OnOpenDocument(PdfWriter writer, Document document)
            {
                cb = writer.DirectContent;
                template = cb.CreateTemplate(50, 50);
            }
            public override void OnEndPage(PdfWriter writer, Document document)
            {

                AppConfiguration config = new AppConfiguration();

                base.OnEndPage(writer, document);

                // int pageN = writer.PageNumber;
                string CmpIDPrefix = "";
                string strQry = "Select * from CompanyInfo   ";
                DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                string Email = "";
                string Website = "";
                string text = "";
                if (compInfo.Rows.Count > 0)
                {
                    Email = compInfo.Rows[0]["Emailid"].ToString();
                    Website = compInfo.Rows[0]["Website"].ToString();
                    if (Email.Length > 0 || Website.Length > 0)
                    {
                        text = "Email : " + Email + " | " + "Website : " + Website;
                    }
                    else
                    {
                        text = "";
                    }
                }

                //float len = bf.GetWidthPoint(text, 8);
                //iTextSharp.text.Rectangle pageSize = document.PageSize;
                //cb.SetRGBColorFill(100, 100, 100);
                //cb.BeginText();
                //cb.SetFontAndSize(bf, 11);
                //cb.SetLineWidth(2.0f);   // Make a bit thicker than 1.0 default
                //cb.SetTextMatrix(document.LeftMargin, pageSize.GetBottom(document.BottomMargin));
                //cb.ShowText(text);
                //cb.LineTo(10,40);
                //cb.Stroke();
                //cb.EndText();
                //cb.AddTemplate(template, document.LeftMargin + len, pageSize.GetBottom(document.BottomMargin));
                //// cb.WriteSelectedRows(0, -1, 150, document.Bottom, writer.DirectContent);


                iTextSharp.text.Image imgfoot = iTextSharp.text.Image.GetInstance(HttpContext.Current.Server.MapPath("~/assets/LetterheadFooter.png"));
                iTextSharp.text.Image imghead = iTextSharp.text.Image.GetInstance(HttpContext.Current.Server.MapPath("~/assets/LetterheadHeader.png"));

                imgfoot.SetAbsolutePosition(0, 0);
                imghead.SetAbsolutePosition(0, 0);

                PdfContentByte cbhead = writer.DirectContent;
                PdfTemplate tp = cbhead.CreateTemplate(500, 130);
                tp.AddImage(imghead);

                PdfContentByte cbfoot = writer.DirectContent;
                PdfTemplate tpl = cbfoot.CreateTemplate(500, 80);
                tpl.AddImage(imgfoot);

                cbhead.AddTemplate(tp, 25, 720);

                cbfoot.AddTemplate(tpl, 25, 0);

                Phrase headPhraseImg = new Phrase(cbhead + "", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 7, iTextSharp.text.Font.NORMAL));
                Phrase footPhraseImg = new Phrase(cbfoot + "", FontFactory.GetFont(FontFactory.TIMES_ROMAN, 7, iTextSharp.text.Font.NORMAL));
            }




        }

        protected void btninvoice_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);

                    document.Open();
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";

                    DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    // for both "1/1/2000" or "25/1/2000" formats
                    string billdt = dtn.ToString("MM/dd/yyyy");



                    string CGSTAlias = "";
                    string SGSTAlias = "";
                    string IGSTAlias = "";
                    string Cess1Alias = "";
                    string Cess2Alias = "";
                    string OurGSTINAlias = "";
                    string GSTINAlias = "";

                    var SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,OurGSTINAlias,GSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                    DataTable DtTaxes = config.ExecuteReaderWithQueryAsync(SqlQryForTaxes).Result;

                    string SCPersent = "";
                    if (DtTaxes.Rows.Count > 0)
                    {
                        SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                        CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                        SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                        IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                        Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                        Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                        OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                    }
                    else
                    {
                        lblResult.Text = "There Is No Tax Values For Generating Bills ";
                        return;
                    }
                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();

                    }
                    #endregion

                    string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteReaderWithQueryAsync(SqlQuryForServiCharge).Result;
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    float dutiestotal = 0;
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                    }
                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/srflogo.png");

                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(30f);
                        gif2.SetAbsolutePosition(27f, 733f);
                        //document.Add(new Paragraph(" "));
                        document.Add(gif2);
                    }

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 560f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);


                    //tablelogo.AddCell(celll);
                    PdfPCell CCompName = new PdfPCell(new Paragraph(companyName, FontFactory.GetFont(FontStyle, 15, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 2;
                    CCompName.BorderWidthBottom = 0;
                    CCompName.BorderWidthTop = 0.5f;
                    CCompName.BorderWidthRight = 0.5f;
                    CCompName.BorderWidthLeft = 0.5f;
                    CCompName.Colspan = 2;
                    CCompName.PaddingLeft = 50;
                    CCompName.FixedHeight = 70;
                    CCompName.SetLeading(0f, 1.3f);
                    // tablelogo.AddCell(CCompName);

                    PdfPCell CCompAddress = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 2;
                    CCompAddress.BorderWidthBottom = 0.5f;
                    CCompAddress.BorderWidthTop = 0.5f;
                    CCompAddress.BorderWidthRight = 0.5f;
                    CCompAddress.BorderWidthLeft = 0.5f;
                    CCompAddress.Colspan = 2;
                    CCompAddress.FixedHeight = 70;
                    // space between lines
                    CCompAddress.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompAddress);

                    // PdfPCell cellline = new PdfPCell(new Paragraph(companyaddressline, FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    // cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    // cellline.Border = 0;
                    // cellline.Colspan = 2;
                    // tablelogo.AddCell(cellline);
                    // //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celll.Border = 0;
                    celll.Colspan = 2;
                    // tablelogo.AddCell(celll);
                    //tablelogo.AddCell(celll);

                    //tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 16, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    //CInvoice.PaddingTop = 30;
                    CInvoice.BorderWidthBottom = 0.5f;
                    CInvoice.BorderWidthTop = 0;
                    CInvoice.FixedHeight = 30;
                    CInvoice.BorderWidthRight = 0.5f;
                    CInvoice.BorderWidthLeft = 0.5f;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);

                    PdfPTable address = new PdfPTable(2);
                    address.TotalWidth = 560f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(1);
                    tempTable1.TotalWidth = 280f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 1f };
                    tempTable1.SetWidths(tempWidth1);

                    string selectclientaddress = "select *,s.state as Statename,s.GSTStateCode,gst.gstno from clients c left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteReaderWithQueryAsync(selectclientaddress).Result;
                    string OurGSTIN = "";
                    string GSTIN = "";
                    string StateCode = "0";
                    string State = "";

                    if (dtclientaddress.Rows.Count > 0)
                    {
                        OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                        StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                        GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                        State = dtclientaddress.Rows[0]["Statename"].ToString();
                    }

                    string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate ";
                    DataTable Bdt = config.ExecuteReaderWithQueryAsync(BQry).Result;

                    string SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;
                    string BillNo = "";
                    string DisplayBillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float sbcess = 0;
                    float kkcess = 0;
                    float servicetaxprc = 0;
                    float sbcessprc = 0;
                    float kkcessprc = 0;
                    float cessprc = 0;
                    float shecessprc = 0;
                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;
                    #region for GST on 21-6-2017 by sharada

                    float CGST = 0;
                    float SGST = 0;
                    float IGST = 0;
                    float Cess1 = 0;
                    float Cess2 = 0;
                    float CGSTPrc = 0;
                    float SGSTPrc = 0;
                    float IGSTPrc = 0;
                    float Cess1Prc = 0;
                    float Cess2Prc = 0;

                    #endregion for GST on 21-6-2017 by sharada
                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                        {
                            RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                        {
                            sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                        {
                            kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                        }
                        #region for GST as on 21-6-2017 by sharada

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                        {
                            CGST = float.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                        {
                            SGST = float.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                        {
                            IGST = float.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                        {
                            Cess1 = float.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                        {
                            Cess2 = float.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                        {
                            CGSTPrc = float.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                        {
                            SGSTPrc = float.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                        {
                            IGSTPrc = float.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                        {
                            Cess1Prc = float.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                        {
                            Cess2Prc = float.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                        }


                        #endregion for GST as on 21-6-2017 by sharada
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTaxPrc"].ToString()) == false)
                        {
                            servicetaxprc = float.Parse(DtBilling.Rows[0]["ServiceTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessTaxPrc"].ToString()) == false)
                        {
                            sbcessprc = float.Parse(DtBilling.Rows[0]["SBCessTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessTaxPrc"].ToString()) == false)
                        {
                            kkcessprc = float.Parse(DtBilling.Rows[0]["KKCessTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESSPer"].ToString()) == false)
                        {
                            cessprc = float.Parse(DtBilling.Rows[0]["CESSPer"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECessPer"].ToString()) == false)
                        {
                            shecessprc = float.Parse(DtBilling.Rows[0]["SHECessPer"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                        {
                            machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                        {
                            materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                        {
                            maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                        {
                            extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                        {
                            extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                        {
                            discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                        {
                            discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                        }

                        machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                        materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                        maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                        extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                        extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                        discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                        discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                            if (strExtradatacheck == "True")
                            {
                                Extradatacheck = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                        {
                            strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                            if (strExtrastcheck == "True")
                            {
                                ExtraDataSTcheck = true;
                            }
                        }



                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                            if (strSTMachinary == "True")
                            {
                                STMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                            if (strSTMaterial == "True")
                            {
                                STMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                            if (strSTMaintenance == "True")
                            {
                                STMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                            if (strSTExtraone == "True")
                            {
                                STExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                            if (strSTExtratwo == "True")
                            {
                                STExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                            if (strSCMachinary == "True")
                            {
                                SCMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                            if (strSCMaterial == "True")
                            {
                                SCMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                            if (strSCMaintenance == "True")
                            {
                                SCMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                            if (strSCExtraone == "True")
                            {
                                SCExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                            if (strSCExtratwo == "True")
                            {
                                SCExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                            if (strSTDiscountone == "True")
                            {
                                STDiscountone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                            if (strSTDiscounttwo == "True")
                            {
                                STDiscounttwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                        {
                            ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                        {
                            ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                        {
                            staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                        }

                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();

                    PdfPCell cell11 = new PdfPCell(new Paragraph("Customer's Details:", FontFactory.GetFont(FontStyle, 10, Font.UNDERLINE | Font.NORMAL, BaseColor.BLACK)));
                    cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell11.BorderWidthBottom = 0;
                    cell11.BorderWidthTop = 0f;
                    cell11.BorderWidthLeft = 0.5f;
                    cell11.BorderWidthRight = 0.5f;
                    tempTable1.AddCell(cell11);
                    string addressData = "";
                    //addressData = dtclientaddress.Rows[0]["clientname"].ToString();
                    //if (addressData.Trim().Length > 0)
                    //{
                    //    PdfPCell clientname = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    //    clientname.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //    clientname.Border = 0;
                    //    tempTable1.AddCell(clientname);
                    //}
                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                               //clientaddrhno.Colspan = 0;
                        clientaddrhno.BorderWidthBottom = 0;
                        clientaddrhno.BorderWidthTop = 0;
                        clientaddrhno.BorderWidthLeft = 0.5f;
                        clientaddrhno.BorderWidthRight = 0.5f;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.BorderWidthLeft = 0.5f;
                        clientstreet.BorderWidthRight = 0.5f;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.BorderWidthLeft = 0.5f;
                        clientstreet.BorderWidthRight = 0.5f;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.BorderWidthBottom = 0;
                        clientcolony.BorderWidthTop = 0;
                        clientcolony.BorderWidthLeft = 0.5f;
                        clientcolony.BorderWidthRight = 0.5f;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.BorderWidthBottom = 0;
                        clientcity.BorderWidthTop = 0;
                        clientcity.BorderWidthLeft = 0.5f;
                        clientcity.BorderWidthRight = 0.5f;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.BorderWidthBottom = 0;
                        clientstate.BorderWidthTop = 0;
                        clientstate.BorderWidthLeft = 0.5f;
                        clientstate.BorderWidthRight = 0.5f;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.BorderWidthBottom = 0;
                        clietnpin.BorderWidthTop = 0;
                        clietnpin.BorderWidthLeft = 0.5f;
                        clietnpin.BorderWidthRight = 0.5f;
                        tempTable1.AddCell(clietnpin);
                    }

                    string Fromdate = txtfromdate.Text;
                    string Todate = txttodate.Text;

                    PdfPCell cell10 = new PdfPCell(new Phrase("Bill Period : " + Fromdate + "  to  " +
                        Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell10.Colspan = 2;
                    cell10.Border = 0;
                    cell10.BorderWidthLeft = 0.5f;
                    cell10.BorderWidthRight = 0.5f;
                    tempTable1.AddCell(cell10);
                    // bodytablelogo.AddCell(celll);

                    if (Bdt.Rows.Count > 0)
                    {


                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("GST No: " + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .5f;
                            clietnpin.BorderWidthRight = 0.5f;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                        if (State.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State: " + State, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .5f;
                            clietnpin.BorderWidthRight = 0.5f;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }
                        if (StateCode.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code:  " + StateCode, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = .5f;
                            clietnpin.BorderWidthRight = 0.5f;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                    }
                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(1);
                    tempTable2.TotalWidth = 280f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f };
                    tempTable2.SetWidths(tempWidth2);

                    //Blank Field for Space
                    PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell12.BorderWidthBottom = 0f;
                    cell12.BorderWidthTop = 0f;
                    cell12.BorderWidthRight = 0.5f;
                    cell12.BorderWidthLeft = 0f;
                    tempTable2.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No: " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell13.Border = 0;
                    cell13.BorderWidthBottom = 0;
                    cell13.BorderWidthTop = 0f;
                    cell13.FixedHeight = 35;
                    cell13.BorderWidthLeft = 0;
                    cell13.BorderWidthRight = 0.5f;
                    tempTable2.AddCell(cell13);
                    PdfPCell cell14 = new PdfPCell(new Paragraph("Date: " + BillDate.Day.ToString("00") + "/" + BillDate.Month.ToString("00") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell14.Border = 0;
                    cell14.BorderWidthBottom = 0;
                    cell14.BorderWidthTop = 0.5f;
                    cell14.BorderWidthLeft = 0;
                    cell14.BorderWidthRight = 0.5f;
                    tempTable2.AddCell(cell14);
                    //PdfPCell cell15 = new PdfPCell(new Paragraph("Due Date: " + DueDate.Day.ToString("00") + "/" + DueDate.Month.ToString("00") + "/" +
                    //DueDate.Year, FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    // tempTable2.AddCell(cell15);



                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);



                    document.Add(address);

                    PdfPTable bodytablelogo = new PdfPTable(2);
                    bodytablelogo.TotalWidth = 560f;//600f
                    bodytablelogo.LockedWidth = true;
                    float[] widthlogo = new float[] { 2f, 2f };
                    bodytablelogo.SetWidths(widthlogo);

                    //  PdfPCell cellser1 = new PdfPCell(new Phrase("Sub:-" + strDescription + " " + GetMonthName() + "'" + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    PdfPCell cellser1 = new PdfPCell(new Phrase("Sub:- We are presenting our bill for the Security Services provided at your establishment for the month of " + GetMonthName() + ". Kindly release the payment at the earliest ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));


                    cellser1.HorizontalAlignment = 0;
                    cellser1.Colspan = 2;
                    cellser1.BorderWidthBottom = 0.5f;
                    cellser1.BorderWidthLeft = 0.5f;
                    cellser1.BorderWidthTop = 0.5f;
                    cellser1.BorderWidthRight = 0.5f;
                    cellser1.FixedHeight = 35;
                    bodytablelogo.AddCell(cellser1);

                    document.Add(bodytablelogo);
                    int colCount = 6;// gvClientBilling.Columns.Count;
                                     //Create a table

                    PdfPTable table = new PdfPTable(colCount);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = 1;


                    //create an array to store column widths
                    // int[] colWidths = new int[5];
                    float[] colWidths = new float[] { 1f, 4f, 1.2f, 1.8f, 2.4f, 1.8f };
                    table.SetWidths(colWidths);
                    PdfPCell cell;
                    string cellText;
                    //create the header row
                    for (int colIndex = 0; colIndex < 6; colIndex++)
                    {
                        //set the column width
                        if (colIndex < 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = .5f;
                            cell.BorderWidthTop = 0f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = 0f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 3)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[3].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = 0f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 4)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[4].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = 0f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                        if (colIndex == 5)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[5].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = 0f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                    }
                    float totaldts = 0;
                    ////export rows from GridView to table
                    for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                    {
                        if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                        //gvClientBilling.RowStyle.BorderColor = System.Drawing.Color.Gray;
                        {
                            Label lblamount = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                            if (lblamount != null)
                            {
                                string strAmount = lblamount.Text;
                                float amount = 0;
                                if (strAmount.Length > 0)
                                    amount = Convert.ToSingle(strAmount);
                                if (amount >= 0)
                                {
                                    for (int j = 0; j < 6; j++)
                                    {
                                        if (j == 0)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText + "\n\n", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = 0f;
                                            cell.BorderWidthLeft = .5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = 0f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }

                                        //fetch the column value of the current row
                                        if (j == 1)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label1.Text + "'";


                                            DataTable dt = config.ExecuteReaderWithQueryAsync(summaryQry).Result;
                                            cellText = label1.Text;
                                            if (dt.Rows.Count > 0)
                                            {
                                                if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                    cellText += " (" + dt.Rows[0]["summary"].ToString() + ")";
                                            }

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            //cell.Border = 0;
                                            cell.BorderWidthBottom = 0f;
                                            cell.BorderWidthLeft = .5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = 0f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }


                                        if (j == 2)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = 0f;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        if (j == 3)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = 0f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                            if (cellText == "")
                                            {
                                                cellText = "0";
                                            }
                                            totaldts += Convert.ToSingle(cellText);
                                        }

                                        if (j == 4)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                            Label label2 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                               "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label2.Text + "'";

                                            //Duty Hrs removed for KL on 27/05/2015
                                            DataTable dt = config.ExecuteReaderWithQueryAsync(dutyhrsQry).Result;
                                            cellText = label1.Text;

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            cell.BorderWidthBottom = 0f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        //paragraph.Alignment = Element.ALIGN_CENTER
                                        if (j == 5)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            //cell.Border = 0;
                                            cell.BorderWidthBottom = 0f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    document.Add(table);

                    tablelogo.AddCell(celll);

                    PdfPTable tabled = new PdfPTable(colCount);
                    tabled.TotalWidth = 560;//432f;
                    tabled.LockedWidth = true;
                    float[] widthd = new float[] { 1f, 4f, 1.2f, 1.8f, 2.4f, 1.8f };
                    tabled.SetWidths(widthd);

                    if (RelChrgAmt > 0)
                    {

                        PdfPCell celldz51 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz51.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz51.Colspan = 1;
                        celldz51.BorderWidthBottom = .5f;
                        celldz51.BorderWidthLeft = .5f;
                        celldz51.BorderWidthTop = 0;
                        celldz51.BorderWidthRight = 0f;
                        //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz51);

                        PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz5.Colspan = 1;
                        celldz5.BorderWidthBottom = .5f;
                        celldz5.BorderWidthLeft = 0.5f;
                        celldz5.BorderWidthTop = 0;
                        celldz5.BorderWidthRight = 0f;
                        //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz5);

                        PdfPCell celldz521 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz521.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz521.Colspan = 1;
                        celldz521.BorderWidthBottom = .5f;
                        celldz521.BorderWidthLeft = 0.5f;
                        celldz521.BorderWidthTop = 0;
                        celldz521.BorderWidthRight = 0.5f;
                        //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz521);

                        PdfPCell celldz52 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz52.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz52.Colspan = 1;
                        celldz52.BorderWidthBottom = .5f;
                        celldz52.BorderWidthLeft = 0f;
                        celldz52.BorderWidthTop = 0;
                        celldz52.BorderWidthRight = 0.5f;
                        //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz52);

                        PdfPCell celldz522 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz522.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz522.Colspan = 1;
                        celldz522.BorderWidthBottom = .5f;
                        celldz522.BorderWidthLeft = 0f;
                        celldz522.BorderWidthTop = 0;
                        celldz522.BorderWidthRight = 0.5f;
                        //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz522);

                        PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz6.BorderWidthBottom = .5f;
                        celldz52.Colspan = 1;
                        celldz6.BorderWidthLeft = 0f;
                        celldz6.BorderWidthTop = 0;
                        celldz6.BorderWidthRight = .5f;
                        //celldz4.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz6);
                    }

                    PdfPCell celldz11 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz11.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz11.Colspan = 2;
                    celldz11.BorderWidthBottom = .5f;
                    celldz11.BorderWidthLeft = .5f;
                    celldz11.BorderWidthTop = 0;
                    celldz11.BorderWidthRight = 0f;
                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz11);

                    PdfPCell celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz1.Colspan = 1;
                    celldz1.BorderWidthBottom = .5f;
                    celldz1.BorderWidthLeft = 0.5f;
                    celldz1.BorderWidthTop = 0;
                    celldz1.BorderWidthRight = .5f;
                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz1);

                    PdfPCell celldz12 = new PdfPCell(new Phrase(totaldts.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldz12.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    celldz12.Colspan = 1;
                    celldz12.BorderWidthBottom = .5f;
                    celldz12.BorderWidthLeft = 0f;
                    celldz12.BorderWidthTop = 0;
                    celldz12.BorderWidthRight = .5f;
                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz12);

                    PdfPCell celldz13 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz13.Colspan = 1;
                    celldz13.BorderWidthBottom = .5f;
                    celldz13.BorderWidthLeft = 0f;
                    celldz13.BorderWidthTop = 0;
                    celldz13.BorderWidthRight = .5f;
                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz13);

                    PdfPCell celldz141 = new PdfPCell(new Phrase(" " + totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldz141.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz141.Colspan = 1;
                    celldz141.BorderWidthBottom = .5f;
                    celldz141.BorderWidthLeft = 0f;
                    celldz141.BorderWidthTop = 0;
                    celldz141.BorderWidthRight = .5f;
                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz141);

                    PdfPCell celldz14 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz14.Colspan = 5;
                    celldz14.BorderWidthBottom = .5f;
                    celldz14.BorderWidthLeft = .5f;
                    celldz14.BorderWidthTop = 0;
                    celldz14.BorderWidthRight = .5f;
                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    // tabled.AddCell(celldz14);

                    PdfPCell celldz4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz4.BorderWidthBottom = .5f;
                    celldz4.BorderWidthLeft = 0;
                    celldz4.Colspan = 1;
                    celldz4.BorderWidthTop = 0;
                    celldz4.BorderWidthRight = .5f;
                    //celldz4.BorderColor = BaseColor.LIGHT_GRAY;
                    //tabled.AddCell(celldz4);



                    if (machinarycost > 0)
                    {
                        if (STMachinary == true)
                        {
                            if (SCMachinary == true)
                            {
                                PdfPCell celldcst11 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst11.Colspan = 3;
                                celldcst11.BorderWidthBottom = .5f;
                                celldcst11.BorderWidthLeft = .5f;
                                celldcst11.BorderWidthRight = 0;
                                celldcst11.BorderWidthTop = 0;
                                tabled.AddCell(celldcst11);

                                PdfPCell celldcst1001 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1001.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1001.Colspan = 2;
                                celldcst1001.BorderWidthBottom = .5f;
                                celldcst1001.BorderWidthLeft = .5f;
                                celldcst1001.BorderWidthRight = 0;
                                celldcst1001.BorderWidthTop = 0;
                                tabled.AddCell(celldcst1001);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == true)
                        {
                            if (SCMaterial == true)
                            {

                                PdfPCell celldcstmet = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstmet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstmet.Colspan = 3;
                                celldcstmet.BorderWidthBottom = .5f;
                                celldcstmet.BorderWidthLeft = .5f;
                                celldcstmet.BorderWidthRight = 0;
                                celldcstmet.BorderWidthTop = 0;
                                tabled.AddCell(celldcstmet);

                                PdfPCell celldcst101 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst101.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst101.Colspan = 2;
                                celldcst101.BorderWidthBottom = .5f;
                                celldcst101.BorderWidthLeft = .5f;
                                celldcst101.BorderWidthRight = 0;
                                celldcst101.BorderWidthTop = 0;
                                tabled.AddCell(celldcst101);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == true)
                        {
                            if (SCMaintenance == true)
                            {
                                PdfPCell celldcstmm = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstmm.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstmm.Colspan = 3;
                                celldcstmm.BorderWidthBottom = .5f;
                                celldcstmm.BorderWidthLeft = .5f;
                                celldcstmm.BorderWidthRight = 0;
                                celldcstmm.BorderWidthTop = 0;
                                tabled.AddCell(celldcstmm);

                                PdfPCell celldcst102 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst102.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst102.Colspan = 2;
                                celldcst102.BorderWidthBottom = .5f;
                                celldcst102.BorderWidthLeft = .5f;
                                celldcst102.BorderWidthRight = 0;
                                celldcst102.BorderWidthTop = 0;
                                tabled.AddCell(celldcst102);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == true)
                        {
                            if (SCExtraone == true)
                            {
                                PdfPCell celldcstscone = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstscone.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstscone.Colspan = 3;
                                celldcstscone.BorderWidthBottom = .5f;
                                celldcstscone.BorderWidthLeft = .5f;
                                celldcstscone.BorderWidthRight = 0;
                                celldcstscone.BorderWidthTop = 0;
                                tabled.AddCell(celldcstscone);

                                PdfPCell celldcst103 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst103.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst103.Colspan = 2;
                                celldcst103.BorderWidthBottom = .5f;
                                celldcst103.BorderWidthLeft = .5f;
                                celldcst103.BorderWidthRight = 0;
                                celldcst103.BorderWidthTop = 0;
                                tabled.AddCell(celldcst103);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == true)
                        {
                            if (SCExtratwo == true)
                            {
                                PdfPCell celldcstsct = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstsct.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstsct.Colspan = 3;
                                celldcstsct.BorderWidthBottom = .5f;
                                celldcstsct.BorderWidthLeft = .5f;
                                celldcstsct.BorderWidthRight = 0;
                                celldcstsct.BorderWidthTop = 0;
                                tabled.AddCell(celldcstsct);

                                PdfPCell celldcst105 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst105.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst105.Colspan = 2;
                                celldcst105.BorderWidthBottom = .5f;
                                celldcst105.BorderWidthLeft = .5f;
                                celldcst105.BorderWidthRight = 0;
                                celldcst105.BorderWidthTop = 0;
                                tabled.AddCell(celldcst105);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    #region When Extra data is checked and STcheck is false and SCcheck is true

                    if (machinarycost > 0)
                    {
                        if (STMachinary == false)
                        {
                            if (SCMachinary == true)
                            {
                                PdfPCell celldcstscme = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstscme.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstscme.Colspan = 3;
                                celldcstscme.BorderWidthBottom = .5f;
                                celldcstscme.BorderWidthLeft = .5f;
                                celldcstscme.BorderWidthRight = 0;
                                celldcstscme.BorderWidthTop = 0;
                                tabled.AddCell(celldcstscme);

                                PdfPCell celldcst106 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst106.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst106.Colspan = 2;
                                celldcst106.BorderWidthBottom = .5f;
                                celldcst106.BorderWidthLeft = .5f;
                                celldcst106.BorderWidthRight = 0;
                                celldcst106.BorderWidthTop = 0;
                                tabled.AddCell(celldcst106);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == false)
                        {
                            if (SCMaterial == true)
                            {
                                PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstkk.Colspan = 3;
                                celldcstkk.BorderWidthBottom = .5f;
                                celldcstkk.BorderWidthLeft = .5f;
                                celldcstkk.BorderWidthRight = 0;
                                celldcstkk.BorderWidthTop = 0;
                                tabled.AddCell(celldcstkk);

                                PdfPCell celldcst107 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst107.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst107.Colspan = 2;
                                celldcst107.BorderWidthBottom = .5f;
                                celldcst107.BorderWidthLeft = .5f;
                                celldcst107.BorderWidthRight = 0;
                                celldcst107.BorderWidthTop = 0;
                                tabled.AddCell(celldcst107);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == false)
                        {
                            if (SCMaintenance == true)
                            {
                                PdfPCell celldcstsecm = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstsecm.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstsecm.Colspan = 3;
                                celldcstsecm.BorderWidthBottom = .5f;
                                celldcstsecm.BorderWidthLeft = .5f;
                                celldcstsecm.BorderWidthRight = 0;
                                celldcstsecm.BorderWidthTop = 0;
                                tabled.AddCell(celldcstsecm);

                                PdfPCell celldcst108 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst108.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst108.Colspan = 2;
                                celldcst108.BorderWidthBottom = .5f;
                                celldcst108.BorderWidthLeft = .5f;
                                celldcst108.BorderWidthRight = 0;
                                celldcst108.BorderWidthTop = 0;
                                tabled.AddCell(celldcst108);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == false)
                        {
                            if (SCExtraone == true)
                            {
                                PdfPCell celldcstseex = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstseex.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstseex.Colspan = 3;
                                celldcstseex.BorderWidthBottom = .5f;
                                celldcstseex.BorderWidthLeft = .5f;
                                celldcstseex.BorderWidthRight = 0;
                                celldcstseex.BorderWidthTop = 0;
                                tabled.AddCell(celldcstseex);

                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 2;
                                celldcst1.BorderWidthBottom = .5f;
                                celldcst1.BorderWidthLeft = .5f;
                                celldcst1.BorderWidthRight = 0;
                                celldcst1.BorderWidthTop = 0;
                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == false)
                        {
                            if (SCExtratwo == true)
                            {

                                PdfPCell celldcstsew = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcstsew.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcstsew.Colspan = 3;
                                celldcstsew.BorderWidthBottom = .5f;
                                celldcstsew.BorderWidthLeft = .5f;
                                celldcstsew.BorderWidthRight = 0;
                                celldcstsew.BorderWidthTop = 0;
                                tabled.AddCell(celldcstsew);

                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 2;
                                celldcst1.BorderWidthBottom = .5f;
                                celldcst1.BorderWidthLeft = .5f;
                                celldcst1.BorderWidthRight = 0;
                                celldcst1.BorderWidthTop = 0;
                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = .5f;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    #endregion
                    if (servicecharge > 0)//bSCType == true)
                    {
                        float scharge = servicecharge;
                        if (scharge > 0)
                        {
                            string SCharge = "";
                            if (bSCType == false)
                            {
                                SCharge = ServiceCharge + " %";
                            }
                            else
                            {
                                SCharge = ServiceCharge;
                            }

                            PdfPCell celldcstsc = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstsc.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstsc.Colspan = 3;
                            celldcstsc.BorderWidthBottom = .5f;
                            celldcstsc.BorderWidthLeft = .5f;
                            celldcstsc.BorderWidthRight = 0;
                            celldcstsc.BorderWidthTop = 0;
                            tabled.AddCell(celldcstsc);

                            PdfPCell celldc2 = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc2.Colspan = 2;
                            celldc2.BorderWidthBottom = 0;
                            celldc2.BorderWidthLeft = .5f;
                            celldc2.BorderWidthTop = 0;
                            celldc2.BorderWidthRight = .5f;
                            //celldc2.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldc2);




                            PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc4.BorderWidthBottom = 0;
                            celldc4.Colspan = 1;
                            celldc4.BorderWidthLeft = 0;
                            celldc4.BorderWidthTop = .5f;
                            celldc4.BorderWidthRight = .5f;
                            //celldc4.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldc4);
                        }
                    }



                    #region When Extra data is checked and STcheck is true
                    if (Extradatacheck == true)
                    {
                        //float machineryCostwithst = 0;
                        //if (lblMachinerywithst.Text.Length > 0)
                        //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == false)
                                {
                                    PdfPCell celldcstmece = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstmece.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstmece.Colspan = 3;
                                    celldcstmece.BorderWidthBottom = .5f;
                                    celldcstmece.BorderWidthLeft = .5f;
                                    celldcstmece.BorderWidthRight = 0;
                                    celldcstmece.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstmece);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        //float materialcostwithst = 0;
                        //if (lblMaterialwithst.Text.Length > 0)
                        //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == false)
                                {
                                    PdfPCell celldcstmec = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstmec.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstmec.Colspan = 3;
                                    celldcstmec.BorderWidthBottom = .5f;
                                    celldcstmec.BorderWidthLeft = .5f;
                                    celldcstmec.BorderWidthRight = 0;
                                    celldcstmec.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstmec);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                        //float electricalcostwithst = 0;
                        //if (lblElectricalwithst.Text.Length > 0)
                        //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == false)
                                {
                                    PdfPCell celldcstmc = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstmc.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstmc.Colspan = 3;
                                    celldcstmc.BorderWidthBottom = .5f;
                                    celldcstmc.BorderWidthLeft = .5f;
                                    celldcstmc.BorderWidthRight = 0;
                                    celldcstmc.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstmc);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        //float extraamtwithst = 0;
                        //if (lblextraonewithst.Text.Length > 0)
                        //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == false)
                                {
                                    PdfPCell celldcstece = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstece.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstece.Colspan = 3;
                                    celldcstece.BorderWidthBottom = .5f;
                                    celldcstece.BorderWidthLeft = .5f;
                                    celldcstece.BorderWidthRight = 0;
                                    celldcstece.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstece);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        //float Extraamtwithst1 = 0;
                        //if (lblextratwowithst.Text.Length > 0)
                        //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == false)
                                {
                                    PdfPCell celldcstec = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstec.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstec.Colspan = 3;
                                    celldcstec.BorderWidthBottom = .5f;
                                    celldcstec.BorderWidthLeft = .5f;
                                    celldcstec.BorderWidthRight = 0;
                                    celldcstec.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstec);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                    }

                    #endregion

                    if (!bIncludeST)
                    {

                        string scpercent = "";
                        if (bST75 == true)
                        {
                            scpercent = "3";
                        }
                        else
                        {
                            scpercent = SCPersent;
                        }

                        if (servicetax > 0)
                        {

                            PdfPCell celldcstsb = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstsb.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstsb.Colspan = 3;
                            celldcstsb.BorderWidthBottom = .5f;
                            celldcstsb.BorderWidthLeft = .5f;
                            celldcstsb.BorderWidthRight = 0;
                            celldcstsb.BorderWidthTop = 0;
                            tabled.AddCell(celldcstsb);

                            PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + servicetaxprc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = .5f;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0.5f;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }

                        if (sbcess > 0)
                        {
                            PdfPCell celldcstst = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstst.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstst.Colspan = 3;
                            celldcstst.BorderWidthBottom = .5f;
                            celldcstst.BorderWidthLeft = .5f;
                            celldcstst.BorderWidthRight = 0;
                            celldcstst.BorderWidthTop = 0;
                            tabled.AddCell(celldcstst);

                            string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + sbcessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = .5f;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0.5f;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }
                        if (kkcess > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);

                            string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + kkcessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = .5f;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }
                        #region for GST as on 17-6-2017

                        if (CGST > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);


                            PdfPCell CellCGST = new PdfPCell(new Phrase(CGSTAlias + " @ " + CGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = 2;
                            CellCGST.BorderWidthBottom = 0.5f;
                            CellCGST.BorderWidthLeft = .5f;
                            CellCGST.BorderWidthTop = 0;
                            CellCGST.BorderWidthRight = 0.5f;
                            CellCGST.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellCGST);

                            PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGSTAmt.BorderWidthBottom = 0;
                            CellCGSTAmt.BorderWidthLeft = 0;
                            CellCGSTAmt.BorderWidthTop = 0;
                            CellCGSTAmt.BorderWidthRight = .5f;
                            CellCGSTAmt.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellCGSTAmt);

                        }


                        if (SGST > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);


                            PdfPCell CellSGST = new PdfPCell(new Phrase(SGSTAlias + " @ " + SGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellSGST.Colspan = 2;
                            CellSGST.BorderWidthBottom = 0.5f;
                            CellSGST.BorderWidthLeft = .5f;
                            CellSGST.BorderWidthTop = 0;
                            CellSGST.BorderWidthRight = 0.5f;
                            CellSGST.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellSGST);

                            PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellSGSTAmt.BorderWidthBottom = 0;
                            CellSGSTAmt.BorderWidthLeft = 0;
                            CellSGSTAmt.BorderWidthTop = 0;
                            CellSGSTAmt.BorderWidthRight = .5f;
                            CellSGSTAmt.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellSGSTAmt);

                        }

                        if (IGST > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);


                            PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellIGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellIGST.Colspan = 2;
                            CellIGST.BorderWidthBottom = 0.5f;
                            CellIGST.BorderWidthLeft = .5f;
                            CellIGST.BorderWidthTop = 0;
                            CellIGST.BorderWidthRight = 0.5f;
                            CellIGST.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellIGST);

                            PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellIGSTAmt.BorderWidthBottom = 0;
                            CellIGSTAmt.BorderWidthLeft = 0;
                            CellIGSTAmt.BorderWidthTop = 0;
                            CellIGSTAmt.BorderWidthRight = .5f;
                            CellIGSTAmt.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellIGSTAmt);

                        }

                        if (Cess1 > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);


                            PdfPCell CellCess1 = new PdfPCell(new Phrase(Cess1Alias + " @ " + Cess1Prc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess1.Colspan = 2;
                            CellCess1.BorderWidthBottom = 0;
                            CellCess1.BorderWidthLeft = .5f;
                            CellCess1.BorderWidthTop = 0;
                            CellCess1.BorderWidthRight = 0.5f;
                            CellCess1.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellCess1);

                            PdfPCell CellCess1Amt = new PdfPCell(new Phrase(Cess1.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess1Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess1Amt.BorderWidthBottom = 0;
                            CellCess1Amt.BorderWidthLeft = 0;
                            CellCess1Amt.BorderWidthTop = 0;
                            CellCess1Amt.BorderWidthRight = .5f;
                            CellCess1Amt.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellCess1Amt);

                        }


                        if (Cess2 > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0.5f;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);


                            PdfPCell CellCess2 = new PdfPCell(new Phrase(Cess2Alias + " @ " + Cess2Prc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess2.Colspan = 2;
                            CellCess2.BorderWidthBottom = 0;
                            CellCess2.BorderWidthLeft = .5f;
                            CellCess2.BorderWidthTop = 0;
                            CellCess2.BorderWidthRight = 0.5f;
                            CellCess2.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellCess2);

                            PdfPCell CellCess2Amt = new PdfPCell(new Phrase(Cess2.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess2Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess2Amt.BorderWidthBottom = 0;
                            CellCess2Amt.BorderWidthLeft = 0;
                            CellCess2Amt.BorderWidthTop = 0;
                            CellCess2Amt.BorderWidthRight = .5f;
                            CellCess2Amt.BorderColor = BaseColor.GRAY;
                            tabled.AddCell(CellCess2Amt);

                        }

                        #endregion for GST 
                        if (cess > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);


                            string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("CESS @ " + cessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }

                        if (shecess > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);


                            string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                            PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ " + shecessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf2.Colspan = 2;
                            celldf2.BorderWidthBottom = 0;
                            celldf2.BorderWidthLeft = .5f;
                            celldf2.BorderWidthTop = 0;
                            celldf2.BorderWidthRight = 0;
                            tabled.AddCell(celldf2);


                            PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf4.BorderWidthBottom = 0;
                            celldf4.Colspan = 1;
                            celldf4.BorderWidthLeft = .5f;
                            celldf4.BorderWidthTop = 0;
                            celldf4.BorderWidthRight = .5f;
                            //celldf4.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldf4);
                        }
                    }

                    #region When Extradata check is false and STcheck is false



                    if (Extradatacheck == true)
                    {
                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == false)
                                {

                                    PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstkk.Colspan = 3;
                                    celldcstkk.BorderWidthBottom = .5f;
                                    celldcstkk.BorderWidthLeft = .5f;
                                    celldcstkk.BorderWidthRight = 0;
                                    celldcstkk.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstkk);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0.5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0.5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;

                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == false)
                                {
                                    PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstkk.Colspan = 3;
                                    celldcstkk.BorderWidthBottom = .5f;
                                    celldcstkk.BorderWidthLeft = .5f;
                                    celldcstkk.BorderWidthRight = 0;
                                    celldcstkk.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstkk);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0.5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0.5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == false)
                                {

                                    PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstkk.Colspan = 3;
                                    celldcstkk.BorderWidthBottom = .5f;
                                    celldcstkk.BorderWidthLeft = .5f;
                                    celldcstkk.BorderWidthRight = 0;
                                    celldcstkk.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstkk);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == false)
                                {
                                    PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstkk.Colspan = 3;
                                    celldcstkk.BorderWidthBottom = .5f;
                                    celldcstkk.BorderWidthLeft = .5f;
                                    celldcstkk.BorderWidthRight = 0;
                                    celldcstkk.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstkk);



                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;

                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == false)
                                {
                                    PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcstkk.Colspan = 3;
                                    celldcstkk.BorderWidthBottom = .5f;
                                    celldcstkk.BorderWidthLeft = .5f;
                                    celldcstkk.BorderWidthRight = 0;
                                    celldcstkk.BorderWidthTop = 0;
                                    tabled.AddCell(celldcstkk);

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        if (discountone > 0)
                        {
                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);

                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.Colspan = 2;
                            celldMt1.BorderWidthBottom = .5f;
                            celldMt1.BorderWidthLeft = .5f;
                            celldMt1.BorderWidthTop = .5f;
                            celldMt1.BorderWidthRight = .5f;
                            // celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = .5f;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.Colspan = 1;
                            celldMt3.BorderWidthTop = .5f;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt3);
                        }
                        if (discounttwo > 0)
                        {

                            PdfPCell celldcstkk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldcstkk.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldcstkk.Colspan = 3;
                            celldcstkk.BorderWidthBottom = .5f;
                            celldcstkk.BorderWidthLeft = .5f;
                            celldcstkk.BorderWidthRight = 0;
                            celldcstkk.BorderWidthTop = 0;
                            tabled.AddCell(celldcstkk);

                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.BorderWidthBottom = .5f;
                            celldMt1.BorderWidthLeft = 0;
                            celldMt1.BorderWidthTop = 0;
                            celldMt1.BorderWidthRight = .5f;
                            //celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            celldMt1.Colspan = 2;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = .5f;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.Colspan = 1;
                            celldMt3.BorderWidthTop = 0;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt3);
                        }
                    }
                    #endregion



                    PdfPCell cellcamt = new PdfPCell(new Phrase("Amount In Words:" + lblamtinwords.Text.Trim() + " Only",
                        FontFactory.GetFont(FontStyle, 10, Font.BOLDITALIC, BaseColor.BLACK)));
                    cellcamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellcamt.Colspan = 4;
                    cellcamt.BorderWidthBottom = 0;
                    cellcamt.BorderWidthLeft = .5f;
                    cellcamt.BorderWidthTop = 0;
                    cellcamt.BorderWidthRight = .5f;
                    //cellcamt.Border = 1;
                    tabled.AddCell(cellcamt);

                    PdfPCell celldg6 = new PdfPCell(new Phrase("Grand Total(Rs.)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldg6.BorderWidthBottom = .5f;
                    celldg6.BorderWidthLeft = 0;
                    celldg6.Colspan = 1;
                    celldg6.BorderWidthTop = 0f;
                    celldg6.BorderWidthRight = .5f;
                    // celldg6.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldg6);

                    PdfPCell celldg8 = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg8.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldg8.BorderWidthBottom = .5f;
                    celldg8.Colspan = 1;
                    celldg8.BorderWidthLeft = 0;
                    celldg8.BorderWidthTop = .5f;
                    celldg8.BorderWidthRight = .5f;
                    //celldg8.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldg8);

                    string Servicetax = string.Empty;
                    string PANNO = string.Empty;
                    string PFNo = string.Empty;
                    string Esino = string.Empty;
                    string PTno = string.Empty;
                    string Notes = string.Empty;
                    string RegNo = string.Empty;
                    string CIDNo = string.Empty;

                    if (compInfo.Rows.Count > 0)
                    {
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        PTno = compInfo.Rows[0]["bankname"].ToString();
                        Notes = compInfo.Rows[0]["Notes"].ToString();
                        RegNo = compInfo.Rows[0]["RegNo"].ToString();
                        CIDNo = compInfo.Rows[0]["CorporateIDNo"].ToString();
                    }

                    PdfPCell note = new PdfPCell(new Phrase("PLEASE NOTE :\n" + Notes, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    note.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    note.BorderWidthBottom = 0.5f;
                    note.BorderWidthLeft = 0.5f;
                    note.FixedHeight = 50;
                    note.Colspan = 4;
                    note.BorderWidthTop = 0f;
                    note.BorderWidthRight = 0f;
                    tabled.AddCell(note);

                    PdfPCell frocmpny = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    frocmpny.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    frocmpny.BorderWidthBottom = 0f;
                    frocmpny.BorderWidthLeft = 0.5f;
                    frocmpny.Colspan = 2;
                    frocmpny.BorderWidthTop = 0f;
                    frocmpny.BorderWidthRight = 0.5f;
                    tabled.AddCell(frocmpny);

                    if (dtn < DateTime.ParseExact("01/07/2017", "dd/MM/yyyy", CultureInfo.InvariantCulture))
                    {

                        PdfPCell srvtaxn = new PdfPCell(new Phrase("SERVICE TAX REG NO:", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        srvtaxn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        srvtaxn.BorderWidthBottom = 0f;
                        srvtaxn.BorderWidthLeft = 0.5f;
                        srvtaxn.Colspan = 2;
                        srvtaxn.BorderWidthTop = 0.5f;
                        srvtaxn.BorderWidthRight = 0f;
                        tabled.AddCell(srvtaxn);

                        srvtaxn = new PdfPCell(new Phrase(":" + Servicetax, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        srvtaxn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        srvtaxn.BorderWidthBottom = 0f;
                        srvtaxn.BorderWidthLeft = 0.5f;
                        srvtaxn.Colspan = 2;
                        srvtaxn.BorderWidthTop = 0.5f;
                        srvtaxn.BorderWidthRight = 0f;
                        tabled.AddCell(srvtaxn);

                    }
                    PdfPCell sign = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    sign.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    sign.BorderWidthBottom = 0.5f;
                    sign.BorderWidthLeft = 0.5f;
                    sign.Colspan = 2;
                    sign.BorderWidthTop = 0f;
                    sign.BorderWidthRight = 0.5f;
                    tabled.AddCell(sign);

                    if (Bdt.Rows.Count > 0)
                    {
                        if (OurGSTIN.Length > 0)
                        {
                            ////Phrase phrase2v = new Phrase();
                            ////phrase2v.Add(new Chunk(OurGSTINAlias + ":   " + OurGSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            ////PdfPCell cell14v = new PdfPCell();
                            ////cell14v.AddElement(phrase2v);

                            PdfPCell cell14v = new PdfPCell(new Paragraph(OurGSTINAlias + ":   " + OurGSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cell14v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell14v.BorderWidthBottom = 0;
                            cell14v.BorderWidthTop = 0f;
                            cell14v.Colspan = 4;
                            cell14v.BorderWidthLeft = 0.5f;
                            cell14v.BorderWidthRight = 1.5f;
                            tabled.AddCell(cell14v);
                        }
                    }

                    //    PdfPCell srvtaxn = new PdfPCell(new Phrase(OurGSTINAlias+":"+OurGSTIN + "\nPAN NO: " + PANNO + "\nPF CODE NO : " + PFNo + "\nESI CODE NO : " + Esino, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    //    srvtaxn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //    srvtaxn.BorderWidthBottom = 0.5f;
                    //    srvtaxn.BorderWidthLeft = 0.5f;
                    //    srvtaxn.Colspan = 4;
                    //    srvtaxn.BorderWidthTop = 0.5f;
                    //    srvtaxn.BorderWidthRight = 0f;
                    //    tabled.AddCell(srvtaxn);

                    //}
                    //PdfPCell sign = new PdfPCell(new Phrase("Authorised Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    //sign.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //sign.BorderWidthBottom = 0.5f;
                    //sign.BorderWidthLeft = 0.5f;
                    //sign.Colspan = 2;
                    //sign.BorderWidthTop = 0f;
                    //sign.BorderWidthRight = 0.5f;
                    //tabled.AddCell(sign);

                    document.Add(tabled);







                    string filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

                    //document.Add(tablecon);
                    document.NewPage();
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void ddlmonth_SelectedIndexChanged(object sender, EventArgs e)
        {
            lblResult.Text = "";
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";

            ClearExtraDataForBilling();
            if (ddlclientid.SelectedIndex <= 0)
            {
                //LblResult.Text = "Please select ClientId";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Please select ClientId ');", true);
                return;
            }
            if (ddlmonth.SelectedIndex > 0)
            {
                FillMonthDetails();
                DisplayDataInGrid();
            }
        }

        protected void ddlclientid_SelectedIndexChanged(object sender, EventArgs e)
        {
            btnvisible();
            lblResult.Text = "";
            lbltotalamount.Text = "";
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";
            ddlmonth.SelectedIndex = 0;
            txtmonth.Text = string.Empty;
            ClearExtraDataForBilling();
            if (ddlclientid.SelectedIndex > 0)
            {
                string SqlQryGetCname = "select clientid from clients where clientid='" + ddlclientid.SelectedValue + "'";
                DataTable dt;
                dt = config.ExecuteReaderWithQueryAsync(SqlQryGetCname).Result;
                ddlCname.SelectedValue = dt.Rows[0]["clientid"].ToString();
                ddlmonth.SelectedIndex = 0;
                dt = null;
                gvClientBilling.DataSource = dt;
                gvClientBilling.DataBind();

                if (ddlmonth.SelectedIndex > 0)
                {
                    // FillMonthDetails();
                    DisplayDataInGrid();
                }
            }
            else
            {
                ddlCname.SelectedIndex = 0;
            }
        }

        protected void ddlCname_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            btnvisible_cname();
            lblResult.Text = "";
            ddlmonth.SelectedIndex = 0;
            lblbillnolatest.Text = "";
            txtbilldate.Text = "";
            txtduedate.Text = "";
            txtfromdate.Text = "";
            txttodate.Text = "";
            txtmonth.Text = string.Empty;

            ClearExtraDataForBilling();
            if (ddlCname.SelectedIndex > 0)
            {
                string SqlQryGetCname = "select clientid from clients where clientid='" + ddlCname.SelectedValue + "'";
                DataTable dt;
                dt = config.ExecuteReaderWithQueryAsync(SqlQryGetCname).Result;
                if (dt.Rows.Count > 0)
                {
                    ddlclientid.SelectedValue = dt.Rows[0]["clientid"].ToString();
                }
                if (ddlmonth.SelectedIndex > 0)
                {
                    // FillMonthDetails();
                    DisplayDataInGrid();
                }
            }
            else
            {
                ddlclientid.SelectedIndex = 0;
            }
        }

        protected void checkExtraData_CheckedChanged(object sender, EventArgs e)
        {
            if (checkExtraData.Checked)
            {
                if (ddlclientid.SelectedIndex > 0 && ddlmonth.SelectedIndex > 0)
                {
                    panelRemarks.Visible = true;

                    txtmachinarycost.Text = "Machinery Cost :";
                    txtMaterialcost.Text = "Material Cost :";
                    txtMaintanancecost.Text = "Maintenance Work :";
                    txtextraonetitle.Text = "Extra Amount one :";
                    txtextratwotitle.Text = "Extra Amount Two :";
                    txtdiscount.Text = "Discounts :";
                    txtdiscounttwotitle.Text = "Discount Two :";

                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Select Client details and month ');", true);
                    checkExtraData.Checked = false;
                }
            }
            else
            {
                panelRemarks.Visible = false;
            }
        }

        protected void ClearExtraDataForBilling()
        {
            lblResult.Text = "";
            txtDiscounts.Text = "";
            txtElectical.Text = "";
            txtMachinery.Text = "";
            txtMaterial.Text = "";
            txtRemarks.Text = "";
            lblDiscount.Text = "";
            lblElectrical.Text = "";
            lblRemarks.Text = "";
            lblMachinery.Text = "";
            lblMaterial.Text = "";
            lblServiceCharges.Text = "";
            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();
            //txtfromdate.Text = "";
            //txttodate.Text = "";
            lblTotalResources.Text = "";
            lblServiceCharges.Text = "";
            lblServiceTax.Text = "";
            lblCESS.Text = "";
            lblSBCESS.Text = "";
            lblSheCESS.Text = "";
            lblST75.Text = "";
            lblMachinery.Text = "";
            lblMaterial.Text = "";
            lblElectrical.Text = "";
            lblDiscount.Text = "";
            lblGrandTotal.Text = "";
            lblST25.Text = "";



            checkExtraData.Checked = false;
            panelRemarks.Visible = false;


            lblMachineryTitle.Text = string.Empty;
            lblMachineryTitlewithst.Text = string.Empty;
            lblMachinery.Text = string.Empty;
            lblMachinerywithst.Text = string.Empty;

            lblMaterialTitle.Text = string.Empty;
            lblMaterialTitlewithst.Text = string.Empty;
            lblMaterial.Text = string.Empty;
            lblMaterialwithst.Text = string.Empty;

            lblElectricalTitle.Text = string.Empty;
            lblElectricalTitlewithst.Text = string.Empty;
            lblElectrical.Text = string.Empty;
            lblElectricalwithst.Text = string.Empty;

            lblextraoneamttitle.Text = string.Empty;
            lblextraonetitlewithst.Text = string.Empty;
            lblextraamt.Text = string.Empty;
            lblextraonewithst.Text = string.Empty;

            lblextratwoamttitle.Text = string.Empty;
            lblextratwotitlewithst.Text = string.Empty;
            lblextratwoamt.Text = string.Empty;
            lblextratwowithst.Text = string.Empty;

            lblDiscountTitle.Text = string.Empty;
            lblDiscountTitlewithst.Text = string.Empty;
            lblDiscount.Text = string.Empty;
            lblDiscountwithst.Text = string.Empty;

            lblDiscounttwoTitle.Text = string.Empty;
            lblDiscounttwotitlewithst.Text = string.Empty;
            lblDiscounttwo.Text = string.Empty;
            lblDiscounttwowithst.Text = string.Empty;

            txtmachinarycost.Text = "Machinery Cost :";
            txtMaterialcost.Text = "Material Cost :";
            txtMaintanancecost.Text = "Maintenance Work :";
            txtextraonetitle.Text = "Extra Amount one :";
            txtextratwotitle.Text = "Extra Amount Two :";
            txtdiscount.Text = "Discounts :";
            txtdiscounttwotitle.Text = "Discount Two :";


            chkSTYesMachinary.Checked = chkSTYesElectrical.Checked = chkSTYesMachinary.Checked = chkSTYesExtraone.Checked =
                chkSTYesExtratwo.Checked = chkSTDiscountone.Checked = chkSTDiscounttwo.Checked = false;

            chkSCYesMachinary.Checked = chkSCYesElectrical.Checked = chkSCYesMaterial.Checked = chkSCYesExtraone.Checked =
                chkSCYesExtratwo.Checked = false;



        }

        protected void txtbillno_OnTextChanged(object sender, EventArgs e)
        {
            string sqlqry = "Select Clients.Clientname,unitbill.unitid from unitbill  " +
                "  inner join  clients  on Clients.clientid=unitbill.unitid Where billno='" + txtbillno.Text.Trim() + "'";
            DataTable dt = config.ExecuteReaderWithQueryAsync(sqlqry).Result;
            if (dt.Rows.Count > 0)
            {
                txtclientid.Text = dt.Rows[0][1].ToString();
                txtclientname.Text = dt.Rows[0][0].ToString();
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('invalid Bill  no');", true);

            }


        }

        protected void btndelelte_Click(object sender, EventArgs e)
        {

            string sqlqry = "  delete from unitbill  Where billno='" + txtbillno.Text.Trim() + "'";
            int status = config.ExecuteNonQueryWithQueryAsync(sqlqry).Result;
            if (status > 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Bill Deleted Successfully');", true);

                txtbillno.Text = "";
                txtclientid.Text = "";
                txtclientname.Text = "";

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Invalid Bill No');", true);

            }

        }

        protected void btninvoice2_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);

                    document.Open();
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";


                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();

                    }
                    #endregion

                    string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteReaderWithQueryAsync(SqlQuryForServiCharge).Result;
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                    }
                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/BillLogo.png");
                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(70f);
                        gif2.SetAbsolutePosition(34f, 755f);
                        //document.Add(new Paragraph(" "));
                        //document.Add(gif2);
                    }

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 500f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);


                    //tablelogo.AddCell(celll);
                    PdfPCell CCompName = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 1;
                    CCompName.Border = 0;
                    CCompName.Colspan = 2;
                    CCompName.PaddingTop = -20;
                    tablelogo.AddCell(CCompName);

                    PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.Border = 0;
                    CCompAddress.Colspan = 2;
                    tablelogo.AddCell(CCompAddress);

                    PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellline.Border = 0;
                    cellline.Colspan = 2;
                    tablelogo.AddCell(cellline);
                    //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celll.Border = 0;
                    celll.Colspan = 2;
                    tablelogo.AddCell(celll);
                    //tablelogo.AddCell(celll);

                    // tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 18, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.PaddingTop = 50;
                    CInvoice.Border = 0;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);

                    PdfPTable address = new PdfPTable(2);
                    address.TotalWidth = 500f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(1);
                    tempTable1.TotalWidth = 250f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 1f };
                    tempTable1.SetWidths(tempWidth1);

                    string selectclientaddress = "select * from clients where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteReaderWithQueryAsync(selectclientaddress).Result;
                    string SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                    string BillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;
                    string DisplayBillNo = "";

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());
                        DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                        {
                            RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                        {
                            machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                        {
                            materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                        {
                            maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                        {
                            extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                        {
                            extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                        {
                            discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                        {
                            discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                        }

                        machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                        materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                        maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                        extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                        extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                        discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                        discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                            if (strExtradatacheck == "True")
                            {
                                Extradatacheck = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                        {
                            strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                            if (strExtrastcheck == "True")
                            {
                                ExtraDataSTcheck = true;
                            }
                        }



                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                            if (strSTMachinary == "True")
                            {
                                STMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                            if (strSTMaterial == "True")
                            {
                                STMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                            if (strSTMaintenance == "True")
                            {
                                STMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                            if (strSTExtraone == "True")
                            {
                                STExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                            if (strSTExtratwo == "True")
                            {
                                STExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                            if (strSCMachinary == "True")
                            {
                                SCMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                            if (strSCMaterial == "True")
                            {
                                SCMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                            if (strSCMaintenance == "True")
                            {
                                SCMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                            if (strSCExtraone == "True")
                            {
                                SCExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                            if (strSCExtratwo == "True")
                            {
                                SCExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                            if (strSTDiscountone == "True")
                            {
                                STDiscountone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                            if (strSTDiscounttwo == "True")
                            {
                                STDiscounttwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                        {
                            ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                        {
                            ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                        {
                            staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                        }

                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();

                    PdfPCell cell11 = new PdfPCell(new Paragraph("To,", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell11.Border = 0;
                    tempTable1.AddCell(cell11);
                    string addressData = "";
                    //addressData = dtclientaddress.Rows[0]["clientname"].ToString();
                    //if (addressData.Trim().Length > 0)
                    //{
                    //    PdfPCell clientname = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    //    clientname.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //    clientname.Border = 0;
                    //    tempTable1.AddCell(clientname);
                    //}
                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                               //clientaddrhno.Colspan = 0;
                        clientaddrhno.Border = 0;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 2;
                        clientcolony.Border = 0;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 2;
                        clientcity.Border = 0;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 2;
                        clientstate.Border = 0;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 2;
                        clietnpin.Border = 0;
                        tempTable1.AddCell(clietnpin);
                    }
                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(1);
                    tempTable2.TotalWidth = 250f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f };
                    tempTable2.SetWidths(tempWidth2);

                    //Blank Field for Space
                    PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell12.Border = 0;
                    tempTable2.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No: " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell13.Border = 0;

                    tempTable2.AddCell(cell13);
                    PdfPCell cell14 = new PdfPCell(new Paragraph("Date: " + BillDate.Day.ToString("00") + "/" + BillDate.Month.ToString("00") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell14.Border = 0;


                    tempTable2.AddCell(cell14);
                    //PdfPCell cell15 = new PdfPCell(new Paragraph("Due Date: " + DueDate.Day.ToString("00") + "/" + DueDate.Month.ToString("00") + "/" +
                    //DueDate.Year, FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    // tempTable2.AddCell(cell15);


                    PdfPCell cell15 = new PdfPCell(new Paragraph("For Month: " + GetMonthName() + " - " + GetMonthOfYear() +
                        "      ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell15.Border = 0;


                    tempTable2.AddCell(cell15);
                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    address.AddCell(celll);


                    document.Add(address);

                    PdfPTable bodytablelogo = new PdfPTable(2);
                    bodytablelogo.TotalWidth = 500f;//600f
                    bodytablelogo.LockedWidth = true;
                    float[] widthlogo = new float[] { 2f, 2f };
                    bodytablelogo.SetWidths(widthlogo);

                    PdfPCell cell9 = new PdfPCell(new Phrase("Unit Name : " + dtclientaddress.Rows[0]["clientname"].ToString(),
                        FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell9.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell9.Colspan = 2;
                    cell9.Border = 0;
                    bodytablelogo.AddCell(cell9);

                    string Fromdate = txtfromdate.Text;
                    string Todate = txttodate.Text;

                    PdfPCell cell10 = new PdfPCell(new Phrase("Bill From : " + Fromdate + "  to  " +
                        Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell10.Colspan = 2;
                    cell10.Border = 0;
                    bodytablelogo.AddCell(cell10);
                    bodytablelogo.AddCell(celll);

                    PdfPCell cell19 = new PdfPCell(new Phrase("Dear Sir, ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell19.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell19.Colspan = 2;
                    cell19.Border = 0;
                    bodytablelogo.AddCell(cell19);
                    bodytablelogo.AddCell(celll);

                    PdfPCell cell20 = new PdfPCell(new Phrase(strDescription, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell20.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell20.Colspan = 2;
                    cell20.Border = 0;
                    bodytablelogo.AddCell(cell20);
                    bodytablelogo.AddCell(celll);
                    PdfPCell cell21 = new PdfPCell(new Phrase("The Details are given below: ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell21.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell21.Colspan = 1;
                    cell21.Border = 0;
                    bodytablelogo.AddCell(cell21);
                    bodytablelogo.AddCell(celll);
                    //bodytablelogo.AddCell(celll);
                    document.Add(bodytablelogo);
                    int colCount = 6;// gvClientBilling.Columns.Count;
                                     //Create a table

                    PdfPTable table = new PdfPTable(colCount);
                    table.TotalWidth = 500f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = 1;


                    //create an array to store column widths
                    // int[] colWidths = new int[5];
                    float[] colWidths = new float[] { 1f, 4f, 1.2f, 1.8f, 2.4f, 1.8f };
                    table.SetWidths(colWidths);
                    PdfPCell cell;
                    string cellText;
                    //create the header row
                    for (int colIndex = 0; colIndex < 6; colIndex++)
                    {
                        //set the column width
                        if (colIndex < 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = .5f;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = 0;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[2].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = .5f;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 3)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[3].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 4)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[4].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                        if (colIndex == 5)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[5].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                    }
                    ////export rows from GridView to table
                    for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                    {
                        if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                        //gvClientBilling.RowStyle.BorderColor = System.Drawing.Color.Gray;
                        {
                            Label lblamount = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                            if (lblamount != null)
                            {
                                string strAmount = lblamount.Text;
                                float amount = 0;
                                if (strAmount.Length > 0)
                                    amount = Convert.ToSingle(strAmount);
                                if (amount >= 0)
                                {
                                    for (int j = 0; j < 6; j++)
                                    {
                                        if (j == 0)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText + "\n\n", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = .5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }

                                        //fetch the column value of the current row
                                        if (j == 1)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label1.Text + "'";


                                            DataTable dt = config.ExecuteReaderWithQueryAsync(summaryQry).Result;
                                            cellText = label1.Text;
                                            if (dt.Rows.Count > 0)
                                            {
                                                if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                    cellText += " (" + dt.Rows[0]["summary"].ToString() + ")";
                                            }

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            //cell.Border = 0;
                                            cell.BorderWidthBottom = .5f;
                                            //cell.BorderWidthLeft = .5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = 0;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }


                                        if (j == 2)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = .5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        if (j == 3)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        if (j == 4)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                            Label label2 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                               "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label2.Text + "'";

                                            //Duty Hrs removed for KL on 27/05/2015
                                            DataTable dt = config.ExecuteReaderWithQueryAsync(dutyhrsQry).Result;
                                            cellText = label1.Text;

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        //paragraph.Alignment = Element.ALIGN_CENTER
                                        if (j == 5)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            //cell.Border = 0;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    document.Add(table);

                    tablelogo.AddCell(celll);

                    PdfPTable tabled = new PdfPTable(colCount);
                    tabled.TotalWidth = 500;//432f;
                    tabled.LockedWidth = true;
                    float[] widthd = new float[] { 1f, 4f, 1.2f, 1.8f, 2.4f, 1.8f };
                    tabled.SetWidths(widthd);

                    if (RelChrgAmt > 0)
                    {
                        PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz5.Colspan = 5;
                        celldz5.BorderWidthBottom = .5f;
                        celldz5.BorderWidthLeft = .5f;
                        celldz5.BorderWidthTop = 0;
                        celldz5.BorderWidthRight = .5f;

                        //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz5);

                        PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz6.BorderWidthBottom = .5f;
                        celldz6.BorderWidthLeft = 0;
                        celldz6.BorderWidthTop = 0;
                        celldz6.BorderWidthRight = .5f;
                        //celldz4.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz6);
                    }

                    PdfPCell celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz1.Colspan = 5;
                    celldz1.BorderWidthBottom = .5f;
                    celldz1.BorderWidthLeft = .5f;
                    celldz1.BorderWidthTop = 0;
                    celldz1.BorderWidthRight = .5f;

                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz1);

                    PdfPCell celldz4 = new PdfPCell(new Phrase(" " + totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz4.BorderWidthBottom = .5f;
                    celldz4.BorderWidthLeft = 0;
                    celldz4.BorderWidthTop = 0;
                    celldz4.BorderWidthRight = .5f;
                    //celldz4.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz4);

                    string SqlQryForTaxes = "select * from  Tbloptions ";
                    DataTable DtTaxes = config.ExecuteReaderWithQueryAsync(SqlQryForTaxes).Result;
                    string SCPersent = "";
                    if (DtTaxes.Rows.Count > 0)
                    {
                        SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                    }
                    else
                    {
                        lblResult.Text = "There Is No Tax Values For Generating Bills ";
                        return;
                    }

                    if (machinarycost > 0)
                    {
                        if (STMachinary == true)
                        {
                            if (SCMachinary == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == true)
                        {
                            if (SCMaterial == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 4;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == true)
                        {
                            if (SCMaintenance == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == true)
                        {
                            if (SCExtraone == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == true)
                        {
                            if (SCExtratwo == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    #region When Extra data is checked and STcheck is false and SCcheck is true

                    if (machinarycost > 0)
                    {
                        if (STMachinary == false)
                        {
                            if (SCMachinary == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == false)
                        {
                            if (SCMaterial == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == false)
                        {
                            if (SCMaintenance == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == false)
                        {
                            if (SCExtraone == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == false)
                        {
                            if (SCExtratwo == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    #endregion
                    if (servicecharge > 0)//bSCType == true)
                    {
                        float scharge = servicecharge;
                        if (scharge > 0)
                        {
                            string SCharge = "";
                            if (bSCType == false)
                            {
                                SCharge = ServiceCharge + " %";
                            }
                            else
                            {
                                SCharge = ServiceCharge;
                            }

                            PdfPCell celldc2 = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc2.Colspan = 5;
                            celldc2.BorderWidthBottom = 0;
                            celldc2.BorderWidthLeft = .5f;
                            celldc2.BorderWidthTop = 0;
                            celldc2.BorderWidthRight = .5f;
                            //celldc2.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldc2);




                            PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc4.BorderWidthBottom = 0;
                            celldc4.BorderWidthLeft = 0;
                            celldc4.BorderWidthTop = .5f;
                            celldc4.BorderWidthRight = .5f;
                            //celldc4.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldc4);
                        }
                    }



                    #region When Extra data is checked and STcheck is true
                    if (Extradatacheck == true)
                    {
                        //float machineryCostwithst = 0;
                        //if (lblMachinerywithst.Text.Length > 0)
                        //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;

                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        //float materialcostwithst = 0;
                        //if (lblMaterialwithst.Text.Length > 0)
                        //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                        //float electricalcostwithst = 0;
                        //if (lblElectricalwithst.Text.Length > 0)
                        //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        //float extraamtwithst = 0;
                        //if (lblextraonewithst.Text.Length > 0)
                        //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        //float Extraamtwithst1 = 0;
                        //if (lblextratwowithst.Text.Length > 0)
                        //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                    }

                    #endregion

                    if (!bIncludeST)
                    {

                        string scpercent = "";
                        if (bST75 == true)
                        {
                            scpercent = "3";
                        }
                        else
                        {
                            scpercent = SCPersent;
                        }

                        if (servicetax > 0)
                        {

                            PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + scpercent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 5;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }

                        if (cess > 0)
                        {
                            string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                            PdfPCell cellde2 = new PdfPCell(new Phrase("CESS @ ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cellde2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            cellde2.Colspan = 4;
                            cellde2.BorderWidthBottom = 0;
                            cellde2.BorderWidthLeft = 0;
                            cellde2.BorderWidthTop = 0;
                            cellde2.BorderWidthRight = .5f;
                            //cellde2.BorderColor = BaseColor.LIGHT_GRAY;

                            tabled.AddCell(cellde2);

                            PdfPCell cellde3 = new PdfPCell(new Phrase(CESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cellde3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            cellde3.BorderWidthBottom = 0;
                            cellde3.BorderWidthLeft = 0;
                            cellde3.BorderWidthTop = 0;
                            cellde3.BorderWidthRight = .5f;
                            //cellde3.BorderColor = BaseColor.LIGHT_GRAY;
                            //V1 = V1 + float.Parse(lblCESS.Text);

                            tabled.AddCell(cellde3);

                            PdfPCell cellde4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cellde4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            cellde4.BorderWidthBottom = 0;
                            cellde4.BorderWidthLeft = .5f;
                            cellde4.BorderWidthTop = 0;
                            cellde4.BorderWidthRight = .5f;

                            //cellde4.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(cellde4);

                            string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                            PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf2.Colspan = 4;
                            celldf2.BorderWidthBottom = 0;
                            celldf2.BorderWidthLeft = .5f;
                            celldf2.BorderWidthTop = 0;
                            celldf2.BorderWidthRight = 0;


                            //celldf2.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldf2);


                            PdfPCell celldf3 = new PdfPCell(new Phrase(SHECESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf3.BorderWidthBottom = 0;
                            celldf3.BorderWidthLeft = .5f;
                            celldf3.BorderWidthTop = 0;
                            celldf3.BorderWidthRight = 0;
                            //celldf3.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldf3);

                            PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf4.BorderWidthBottom = 0;
                            celldf4.BorderWidthLeft = .5f;
                            celldf4.BorderWidthTop = 0;
                            celldf4.BorderWidthRight = .5f;
                            //celldf4.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldf4);
                        }
                    }
                    //if (bST75)
                    //{
                    //    if (ServiceTax75 > 0)
                    //    {
                    //        PdfPCell celldMeci1 = new PdfPCell(new Phrase("Less 75% Service Tax ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        celldMeci1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        //celld7.Border = 1;
                    //        celldMeci1.Colspan = 4;
                    //        tabled.AddCell(celldMeci1);

                    //        PdfPCell celldMeci3 = new PdfPCell(new Phrase(ServiceTax75.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        celldMeci3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        tabled.AddCell(celldMeci3);
                    //    }
                    //    if (ServiceTax25 > 0)
                    //    {

                    //        PdfPCell cellST25h = new PdfPCell(new Phrase("Service Tax Chargable @3.09% ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        cellST25h.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        //celld7.Border = 1;
                    //        cellST25h.Colspan = 4;
                    //        tabled.AddCell(cellST25h);

                    //        PdfPCell cellST25d = new PdfPCell(new Phrase(ServiceTax25.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        cellST25d.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        tabled.AddCell(cellST25d);
                    //    }


                    //}

                    #region When Extradata check is false and STcheck is false


                    //if (Extradatacheck == true)
                    //{
                    //    if (ExtraDataSTcheck==false)
                    //    {
                    //        if (machinarycost > 0)
                    //        {
                    //            PdfPCell celldMeci1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMeci1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMeci1.Colspan = 4;
                    //            tabled.AddCell(celldMeci1);

                    //            PdfPCell celldMeci3 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMeci3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMeci3);
                    //        }

                    //        if (materialcost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }
                    //        if (maintenancecost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }

                    //        if (extraonecost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }
                    //        if (extratwocost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }

                    //    }

                    if (Extradatacheck == true)
                    {
                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;

                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        if (discountone > 0)
                        {
                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldMt1.Colspan = 5;
                            celldMt1.BorderWidthBottom = .5f;
                            celldMt1.BorderWidthLeft = .5f;
                            celldMt1.BorderWidthTop = .5f;
                            celldMt1.BorderWidthRight = .5f;
                            // celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = .5f;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.BorderWidthTop = .5f;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt3);
                        }
                        if (discounttwo > 0)
                        {
                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldMt1.BorderWidthBottom = .5f;
                            celldMt1.BorderWidthLeft = 0;
                            celldMt1.BorderWidthTop = 0;
                            celldMt1.BorderWidthRight = .5f;
                            //celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            celldMt1.Colspan = 5;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = .5f;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.BorderWidthTop = 0;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt3);
                        }
                    }
                    #endregion

                    if (lblRemarks.Text == "0")
                    {
                        PdfPCell cRemarks = new PdfPCell(new Phrase("Remarks : ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cRemarks.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cRemarks.Colspan = 4;
                        cRemarks.BorderWidthBottom = .5f;
                        cRemarks.BorderWidthLeft = .5f;
                        cRemarks.BorderWidthTop = .5f;
                        cRemarks.BorderWidthRight = 0;
                        // cRemarks.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(cRemarks);
                    }
                    else
                    {
                        PdfPCell cRemarks = new PdfPCell(new Phrase("Remarks : " + lblRemarks.Text, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cRemarks.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cRemarks.Colspan = 4;
                        cRemarks.BorderWidthBottom = .5f;
                        cRemarks.BorderWidthLeft = .5f;
                        cRemarks.BorderWidthTop = .5f;
                        cRemarks.BorderWidthRight = .5f;
                        //cRemarks.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(cRemarks);
                    }
                    PdfPCell celldg6 = new PdfPCell(new Phrase("Grand Total(Rs.)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldg6.BorderWidthBottom = .5f;
                    celldg6.BorderWidthLeft = 0;
                    celldg6.BorderWidthTop = .5f;
                    celldg6.BorderWidthRight = .5f;
                    // celldg6.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldg6);

                    PdfPCell celldg8 = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg8.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldg8.BorderWidthBottom = .5f;
                    celldg8.BorderWidthLeft = 0;
                    celldg8.BorderWidthTop = .5f;
                    celldg8.BorderWidthRight = .5f;
                    //celldg8.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldg8);



                    document.Add(tabled);




                    PdfPTable tablecon = new PdfPTable(2);
                    tablecon.TotalWidth = 500f;
                    tablecon.LockedWidth = true;
                    float[] widthcon = new float[] { 2f, 2f };
                    tablecon.SetWidths(widthcon);

                    PdfPCell cellBreak = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 15, Font.NORMAL, BaseColor.BLACK)));
                    cellBreak.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellBreak.Colspan = 2;
                    cellBreak.BorderWidthBottom = 0;
                    cellBreak.BorderWidthLeft = .5f;
                    cellBreak.BorderWidthTop = 0;
                    cellBreak.BorderWidthRight = .5f;
                    //cellBreak.Border = 0;
                    tablecon.AddCell(cellBreak);

                    PdfPCell cellcamt = new PdfPCell(new Phrase(" In Words: Rupees " + lblamtinwords.Text.Trim() + " Only",
                        FontFactory.GetFont(FontStyle, 10, Font.BOLDITALIC, BaseColor.BLACK)));
                    cellcamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellcamt.Colspan = 2;
                    cellcamt.BorderWidthBottom = 0;
                    cellcamt.BorderWidthLeft = .5f;
                    cellcamt.BorderWidthTop = 0;
                    cellcamt.BorderWidthRight = .5f;
                    //cellcamt.Border = 1;
                    tablecon.AddCell(cellcamt);
                    tablecon.AddCell(cellBreak);

                    string Servicetax = string.Empty;
                    string PANNO = string.Empty;
                    string PFNo = string.Empty;
                    string Esino = string.Empty;
                    string PTno = string.Empty;
                    string Notes = string.Empty;
                    string RegNo = string.Empty;
                    string CIDNo = string.Empty;

                    if (compInfo.Rows.Count > 0)
                    {
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        PTno = compInfo.Rows[0]["bankname"].ToString();
                        Notes = compInfo.Rows[0]["Notes"].ToString();
                        RegNo = compInfo.Rows[0]["RegNo"].ToString();
                        CIDNo = compInfo.Rows[0]["CorporateIDNo"].ToString();
                    }


                    if (CIDNo.Trim().Length > 0)
                    {
                        PdfPCell cellCIDNo = new PdfPCell(new Phrase("CORPORATE IDENTITY NO: " + CIDNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellCIDNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellCIDNo.Colspan = 7;
                        cellCIDNo.BorderWidthBottom = 0;
                        cellCIDNo.BorderWidthLeft = .5f;
                        cellCIDNo.BorderWidthTop = .5f;
                        cellCIDNo.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellCIDNo);
                    }

                    if (RegNo.Trim().Length > 0)
                    {
                        PdfPCell cellRegNo = new PdfPCell(new Phrase("REG.NO: " + RegNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellRegNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellRegNo.Colspan = 7;
                        cellRegNo.BorderWidthBottom = 0;
                        cellRegNo.BorderWidthLeft = .5f;
                        cellRegNo.BorderWidthTop = .5f;
                        cellRegNo.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellRegNo);
                    }

                    if (Servicetax.Trim().Length > 0)
                    {
                        PdfPCell cellc6 = new PdfPCell(new Phrase("SERVICE TAX NO: " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc6.Colspan = 7;
                        cellc6.BorderWidthBottom = 0;
                        cellc6.BorderWidthLeft = .5f;
                        cellc6.BorderWidthTop = .5f;
                        cellc6.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellc6);
                    }



                    if (PANNO.Trim().Length > 0)
                    {
                        PdfPCell cellc7 = new PdfPCell(new Phrase("PAN NO: " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc7.Colspan = 7;
                        cellc7.BorderWidthBottom = .5f;
                        cellc7.BorderWidthLeft = .5f;
                        cellc7.BorderWidthTop = 0;
                        cellc7.BorderWidthRight = .5f;
                        //cellc7.Border = 0;
                        tablecon.AddCell(cellc7);
                    }
                    if (PFNo.Trim().Length > 0)
                    {
                        PdfPCell Pfno = new PdfPCell(new Phrase("EPF NO: " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Pfno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Pfno.Colspan = 7;
                        Pfno.BorderWidthBottom = .5f;
                        Pfno.BorderWidthLeft = .5f;
                        Pfno.BorderWidthTop = 0;
                        Pfno.BorderWidthRight = .5f;
                        //Pfno.Border = 0;
                        tablecon.AddCell(Pfno);
                    }

                    if (Esino.Trim().Length > 0)
                    {
                        PdfPCell ESino = new PdfPCell(new Phrase("ESIC NO: " + Esino, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        ESino.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        ESino.Colspan = 7;
                        ESino.BorderWidthBottom = .5f;
                        ESino.BorderWidthLeft = .5f;
                        ESino.BorderWidthTop = 0;
                        ESino.BorderWidthRight = .5f;
                        //ESino.Border = 0;
                        tablecon.AddCell(ESino);
                    }

                    if (PTno.Trim().Length > 0)
                    {
                        PdfPCell Ptno = new PdfPCell(new Phrase("P Tax No: " + PTno, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Ptno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Ptno.Colspan = 7;
                        Ptno.BorderWidthBottom = .5f;
                        Ptno.BorderWidthLeft = .5f;
                        Ptno.BorderWidthTop = 0;
                        Ptno.BorderWidthRight = .5f;
                        //Ptno.Border = 0;
                        tablecon.AddCell(Ptno);
                    }

                    PdfPCell cellspace = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellspace.Border = 0;
                    cellspace.Colspan = 2;
                    tablecon.AddCell(cellspace);

                    if (Notes.Trim().Length > 0)
                    {


                        PdfPCell note1 = new PdfPCell(new Phrase(Notes.ToString(), FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                        note1.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                        note1.Colspan = 7;
                        note1.Border = 0;
                        note1.SetLeading(0, 1.5f);
                        tablecon.AddCell(note1);

                    }

                    PdfPCell cellc41 = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc41.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc41.Colspan = 7;
                    cellc41.Border = 0;
                    cellc41.PaddingTop = 10;
                    tablecon.AddCell(cellc41);

                    PdfPCell cellc4 = new PdfPCell(new Phrase("Authorized Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc4.Colspan = 7;
                    cellc4.Border = 0;
                    cellc4.PaddingTop = 30;
                    tablecon.AddCell(cellc4);


                    string filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";



                    document.Add(tablecon);
                    document.NewPage();
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename);
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void btninvoice3_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);
                    document.Open();
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";


                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();

                    }
                    #endregion

                    string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteReaderWithQueryAsync(SqlQuryForServiCharge).Result;
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                    }
                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/BillLogo.png");
                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        gif2.ScalePercent(70f);
                        document.Add(new Paragraph(" "));
                        document.Add(gif2);
                    }

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 500f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);

                    PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celll.Border = 0;
                    celll.Colspan = 2;
                    tablelogo.AddCell(celll);
                    PdfPCell CCompName = new PdfPCell(new Paragraph(companyName, FontFactory.GetFont(FontStyle, 16, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 1;
                    CCompName.Border = 0;
                    CCompName.Colspan = 2;
                    CCompName.PaddingTop = -20;
                    tablelogo.AddCell(CCompName);
                    PdfPCell CCompAddress = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.Border = 0;
                    CCompAddress.Colspan = 2;
                    tablelogo.AddCell(CCompAddress);

                    //For Space 
                    tablelogo.AddCell(celll);


                    PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 12, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.Border = 0;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);

                    PdfPTable address = new PdfPTable(2);
                    address.TotalWidth = 500f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(1);
                    tempTable1.TotalWidth = 250f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 1f };
                    tempTable1.SetWidths(tempWidth1);

                    string selectclientaddress = "select * from clients where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteReaderWithQueryAsync(selectclientaddress).Result;
                    string SelectBillNo = "Select * from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;
                    string BillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceChrg"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["ServiceChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                        {
                            machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                        {
                            materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                        {
                            maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                        {
                            extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                        {
                            extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                        {
                            discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                        {
                            discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                        }

                        machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                        materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                        maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                        extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                        extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                        discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                        discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                            if (strExtradatacheck == "True")
                            {
                                Extradatacheck = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                        {
                            strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                            if (strExtrastcheck == "True")
                            {
                                ExtraDataSTcheck = true;
                            }
                        }



                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                            if (strSTMachinary == "True")
                            {
                                STMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                            if (strSTMaterial == "True")
                            {
                                STMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                            if (strSTMaintenance == "True")
                            {
                                STMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                            if (strSTExtraone == "True")
                            {
                                STExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                            if (strSTExtratwo == "True")
                            {
                                STExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                            if (strSCMachinary == "True")
                            {
                                SCMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                            if (strSCMaterial == "True")
                            {
                                SCMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                            if (strSCMaintenance == "True")
                            {
                                SCMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                            if (strSCExtraone == "True")
                            {
                                SCExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                            if (strSCExtratwo == "True")
                            {
                                SCExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                            if (strSTDiscountone == "True")
                            {
                                STDiscountone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                            if (strSTDiscounttwo == "True")
                            {
                                STDiscounttwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                        {
                            ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                        {
                            ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                        {
                            staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                        }

                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();

                    PdfPCell cell11 = new PdfPCell(new Paragraph("To,", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell11.Border = 0;
                    tempTable1.AddCell(cell11);
                    string addressData = "";
                    //addressData = dtclientaddress.Rows[0]["clientname"].ToString();
                    //if (addressData.Trim().Length > 0)
                    //{
                    //    PdfPCell clientname = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    //    clientname.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //    clientname.Border = 0;
                    //    tempTable1.AddCell(clientname);
                    //}
                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                               //clientaddrhno.Colspan = 0;
                        clientaddrhno.Border = 0;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 2;
                        clientcolony.Border = 0;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 2;
                        clientcity.Border = 0;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 2;
                        clientstate.Border = 0;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 2;
                        clietnpin.Border = 0;
                        tempTable1.AddCell(clietnpin);
                    }
                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(1);
                    tempTable2.TotalWidth = 250f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f };
                    tempTable2.SetWidths(tempWidth2);

                    //Blank Field for Space
                    PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell12.Border = 0;
                    tempTable2.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No: " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell13.Border = 0;

                    tempTable2.AddCell(cell13);
                    PdfPCell cell14 = new PdfPCell(new Paragraph("Date: " + BillDate.Day.ToString("00") + "/" + BillDate.Month.ToString("00") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell14.Border = 0;


                    tempTable2.AddCell(cell14);
                    //PdfPCell cell15 = new PdfPCell(new Paragraph("Due Date: " + DueDate.Day.ToString("00") + "/" + DueDate.Month.ToString("00") + "/" +
                    //DueDate.Year, FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    // tempTable2.AddCell(cell15);


                    PdfPCell cell15 = new PdfPCell(new Paragraph("For Month: " + GetMonthName() + " - " + GetMonthOfYear() +
                        "      ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell15.Border = 0;


                    tempTable2.AddCell(cell15);
                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    address.AddCell(celll);


                    document.Add(address);

                    PdfPTable bodytablelogo = new PdfPTable(2);
                    bodytablelogo.TotalWidth = 500f;//600f
                    bodytablelogo.LockedWidth = true;
                    float[] widthlogo = new float[] { 2f, 2f };
                    bodytablelogo.SetWidths(widthlogo);

                    PdfPCell cell9 = new PdfPCell(new Phrase("Unit Name : " + dtclientaddress.Rows[0]["clientname"].ToString(),
                        FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell9.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell9.Colspan = 2;
                    cell9.Border = 0;
                    bodytablelogo.AddCell(cell9);

                    string Fromdate = txtfromdate.Text;
                    string Todate = txttodate.Text;

                    PdfPCell cell10 = new PdfPCell(new Phrase("Bill From : " + Fromdate + "  to  " +
                        Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell10.Colspan = 2;
                    cell10.Border = 0;
                    bodytablelogo.AddCell(cell10);
                    bodytablelogo.AddCell(celll);

                    PdfPCell cell19 = new PdfPCell(new Phrase("Dear Sir, ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell19.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell19.Colspan = 2;
                    cell19.Border = 0;
                    bodytablelogo.AddCell(cell19);
                    //bodytablelogo.AddCell(celll);

                    PdfPCell cell20 = new PdfPCell(new Phrase(strDescription, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell20.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell20.Colspan = 2;
                    cell20.Border = 0;
                    bodytablelogo.AddCell(cell20);
                    //bodytablelogo.AddCell(celll);
                    PdfPCell cell21 = new PdfPCell(new Phrase("The Details are given below: ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell21.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell21.Colspan = 1;
                    cell21.Border = 0;
                    bodytablelogo.AddCell(cell21);
                    bodytablelogo.AddCell(celll);
                    // bodytablelogo.AddCell(celll);
                    document.Add(bodytablelogo);
                    int colCount = 6;// gvClientBilling.Columns.Count;
                                     //Create a table

                    PdfPTable table = new PdfPTable(colCount);
                    table.TotalWidth = 500f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = 1;


                    //create an array to store column widths
                    // int[] colWidths = new int[5];
                    float[] colWidths = new float[] { 4f, 1.2f, 1.2f, 1.8f, 2.4f, 1.8f };
                    table.SetWidths(colWidths);
                    PdfPCell cell;
                    string cellText;
                    //create the header row
                    for (int colIndex = 0; colIndex < 6; colIndex++)
                    {
                        //set the column width
                        if (colIndex < 3)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.BorderWidthBottom = .5f;
                            //cell.BorderWidthLeft = .5f;
                            //cell.BorderWidthTop = .5f;
                            //cell.BorderWidthRight = 0;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 3)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            //cell.BorderWidthBottom = .5f;
                            //cell.BorderWidthLeft = .5f;
                            //cell.BorderWidthTop = .5f;
                            //cell.BorderWidthRight = 0;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 4)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[4].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            //cell.BorderWidthBottom = .5f;
                            //cell.BorderWidthLeft = .5f;
                            //cell.BorderWidthTop = .5f;
                            //cell.BorderWidthRight = 0;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 5)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[6].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            //cell.BorderWidthBottom = .5f;
                            //cell.BorderWidthLeft = .5f;
                            //cell.BorderWidthTop = .5f;
                            //cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                    }
                    ////export rows from GridView to table
                    for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                    {
                        if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                        //gvClientBilling.RowStyle.BorderColor = System.Drawing.Color.Gray;
                        {
                            Label lblamount = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                            if (lblamount != null)
                            {
                                string strAmount = lblamount.Text;
                                float amount = 0;
                                if (strAmount.Length > 0)
                                    amount = Convert.ToSingle(strAmount);
                                if (amount >= 0)
                                {
                                    for (int j = 0; j < 6; j++)
                                    {
                                        //fetch the column value of the current row
                                        if (j == 0)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string summaryQry = "select summary from contractdetails " +
                                                "  where clientid='" + ddlclientid.SelectedValue + "' and Designations='" + label1.Text + "'";
                                            DataTable dt = config.ExecuteReaderWithQueryAsync(summaryQry).Result;
                                            cellText = label1.Text;
                                            if (dt.Rows.Count > 0)
                                            {
                                                if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                    cellText += " (" + dt.Rows[0]["summary"].ToString() + ")";
                                            }

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            //cell.Border = 0;
                                            //cell.BorderWidthBottom = 0;
                                            //cell.BorderWidthLeft = .5f;
                                            //cell.BorderWidthTop = 0;
                                            //cell.BorderWidthRight = 0;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        if (j == 1)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldutyhrs"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "--";
                                                cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            }
                                            else
                                            {
                                                cellText = label1.Text;

                                                //create a new cell with column value
                                                cell = new PdfPCell(new Phrase(cellText + " " + "Hrs", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            }
                                            cell.HorizontalAlignment = 1;
                                            //cell.Border = 0;


                                            table.AddCell(cell);
                                        }

                                        if (j == 2)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            //cell.Border = 0;
                                            table.AddCell(cell);
                                        }
                                        if (j == 3)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            //cell.Border = 0;
                                            table.AddCell(cell);
                                        }
                                        if (j == 4)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            //cell.Border = 0;
                                            table.AddCell(cell);
                                        }
                                        //paragraph.Alignment = Element.ALIGN_CENTER
                                        if (j == 5)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            //cell.Border = 0;
                                            //cell.BorderWidthBottom = 0;
                                            //cell.BorderWidthLeft = 0;
                                            //cell.BorderWidthTop = 0;
                                            //cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    document.Add(table);

                    tablelogo.AddCell(celll);

                    PdfPTable tabled = new PdfPTable(colCount);
                    tabled.TotalWidth = 500;//432f;
                    tabled.LockedWidth = true;
                    float[] widthd = new float[] { 4f, 1.2f, 1.2f, 1.8f, 2.4f, 1.8f };
                    tabled.SetWidths(widthd);

                    PdfPCell celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz1.Colspan = 5;
                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz1);

                    PdfPCell celldz4 = new PdfPCell(new Phrase(" " + totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                     //celldz4.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz4);

                    string SqlQryForTaxes = "select * from  Tbloptions ";
                    DataTable DtTaxes = config.ExecuteReaderWithQueryAsync(SqlQryForTaxes).Result;
                    string SCPersent = "";
                    if (DtTaxes.Rows.Count > 0)
                    {
                        SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                    }
                    else
                    {
                        lblResult.Text = "There Is No Tax Values For Generating Bills ";
                        return;
                    }
                    if (servicecharge > 0)//bSCType == true)
                    {
                        float scharge = servicecharge;
                        if (scharge > 0)
                        {
                            PdfPCell celldc2 = new PdfPCell(new Phrase("Service Charges @ ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc2.Colspan = 4;
                            //celldc2.Border = 0;
                            tabled.AddCell(celldc2);

                            string SCharge = "";
                            if (bSCType == false)
                            {
                                SCharge = ServiceCharge + " %";
                            }
                            else
                            {
                                SCharge = ServiceCharge;
                            }
                            PdfPCell celldc3 = new PdfPCell(new Phrase(SCharge, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldc3);

                            PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldc4);
                        }
                    }

                    #region When Extra data is checked and STcheck is true


                    if (Extradatacheck == true)
                    {
                        //float machineryCostwithst = 0;
                        //if (lblMachinerywithst.Text.Length > 0)
                        //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);
                        if (ExtraDataSTcheck == true)
                        {
                            if (machinarycost > 0)
                            {
                                if (STMachinary == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }

                            //float materialcostwithst = 0;
                            //if (lblMaterialwithst.Text.Length > 0)
                            //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                            if (materialcost > 0)
                            {
                                if (STMaterial == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }


                            //float electricalcostwithst = 0;
                            //if (lblElectricalwithst.Text.Length > 0)
                            //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }

                            //float extraamtwithst = 0;
                            //if (lblextraonewithst.Text.Length > 0)
                            //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                            if (extraonecost > 0)
                            {
                                if (STExtraone == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }
                            //float Extraamtwithst1 = 0;
                            //if (lblextratwowithst.Text.Length > 0)
                            //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == true)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                    }

                    #endregion

                    if (!bIncludeST)
                    {
                        PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldd2.Colspan = 4;
                        tabled.AddCell(celldd2);

                        string scpercent = "";
                        if (bST75 == true)
                        {
                            scpercent = "12";
                        }
                        else
                        {
                            scpercent = SCPersent;
                        }
                        PdfPCell celldd3 = new PdfPCell(new Phrase(scpercent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldd3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        tabled.AddCell(celldd3);

                        PdfPCell celldd4 = new PdfPCell(new Phrase(((totalamount + servicecharge) * 12 / 100).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        tabled.AddCell(celldd4);

                        if (cess > 0)
                        {
                            string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                            PdfPCell cellde2 = new PdfPCell(new Phrase("CESS @ ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cellde2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            cellde2.Colspan = 4;
                            tabled.AddCell(cellde2);

                            PdfPCell cellde3 = new PdfPCell(new Phrase(CESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cellde3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                             //V1 = V1 + float.Parse(lblCESS.Text);
                            tabled.AddCell(cellde3);

                            PdfPCell cellde4 = new PdfPCell(new Phrase(((totalamount + servicecharge) * 12 / 100 * 2 / 100).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            cellde4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(cellde4);

                            string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                            PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf2.Colspan = 4;
                            tabled.AddCell(celldf2);


                            PdfPCell celldf3 = new PdfPCell(new Phrase(SHECESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldf3);

                            PdfPCell celldf4 = new PdfPCell(new Phrase(((totalamount + servicecharge) * 12 / 100 * 1 / 100).ToString("0.00"),
                                FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldf4);
                        }
                    }
                    //if (bST75)
                    //{
                    //    if (ServiceTax75 > 0)
                    //    {
                    //        PdfPCell celldMeci1 = new PdfPCell(new Phrase("Less 75% Service Tax ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        celldMeci1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        //celld7.Border = 1;
                    //        celldMeci1.Colspan = 4;
                    //        tabled.AddCell(celldMeci1);

                    //        PdfPCell celldMeci3 = new PdfPCell(new Phrase(ServiceTax75.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        celldMeci3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        tabled.AddCell(celldMeci3);
                    //    }
                    //    if (ServiceTax25 > 0)
                    //    {

                    //        PdfPCell cellST25h = new PdfPCell(new Phrase("Service Tax Chargable @3.09% ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        cellST25h.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        //celld7.Border = 1;
                    //        cellST25h.Colspan = 4;
                    //        tabled.AddCell(cellST25h);

                    //        PdfPCell cellST25d = new PdfPCell(new Phrase(ServiceTax25.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        cellST25d.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        tabled.AddCell(cellST25d);
                    //    }


                    //}

                    #region When Extradata check is false and STcheck is false


                    if (Extradatacheck == true)
                    {
                        if (ExtraDataSTcheck == false)
                        {
                            if (machinarycost > 0)
                            {
                                PdfPCell celldMeci1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMeci1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMeci1.Colspan = 5;
                                tabled.AddCell(celldMeci1);

                                PdfPCell celldMeci3 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMeci3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                tabled.AddCell(celldMeci3);
                            }

                            if (materialcost > 0)
                            {
                                PdfPCell celldMt1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt1.Colspan = 5;
                                tabled.AddCell(celldMt1);

                                PdfPCell celldMt3 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                tabled.AddCell(celldMt3);
                            }
                            if (maintenancecost > 0)
                            {
                                PdfPCell celldMt1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt1.Colspan = 5;
                                tabled.AddCell(celldMt1);

                                PdfPCell celldMt3 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                tabled.AddCell(celldMt3);
                            }

                            if (extraonecost > 0)
                            {
                                PdfPCell celldMt1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt1.Colspan = 5;
                                tabled.AddCell(celldMt1);

                                PdfPCell celldMt3 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                tabled.AddCell(celldMt3);
                            }
                            if (extratwocost > 0)
                            {
                                PdfPCell celldMt1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldMt1.Colspan = 5;
                                tabled.AddCell(celldMt1);

                                PdfPCell celldMt3 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                tabled.AddCell(celldMt3);
                            }

                        }

                        if (ExtraDataSTcheck == true)
                        {
                            if (machinarycost > 0)
                            {
                                if (STMachinary == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }
                            if (materialcost > 0)
                            {
                                if (STMaterial == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }


                            if (maintenancecost > 0)
                            {
                                if (STMaintenance == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }

                            if (extraonecost > 0)
                            {
                                if (STExtraone == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }
                            if (extratwocost > 0)
                            {
                                if (STExtratwo == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        if (discountone > 0)
                        {
                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.Colspan = 5;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldMt3);
                        }
                        if (discounttwo > 0)
                        {
                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.Colspan = 5;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldMt3);
                        }
                    }
                    #endregion

                    if (lblRemarks.Text == "0")
                    {
                        PdfPCell cRemarks = new PdfPCell(new Phrase("Remarks : ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cRemarks.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cRemarks.Colspan = 4;
                        tabled.AddCell(cRemarks);
                    }
                    else
                    {
                        PdfPCell cRemarks = new PdfPCell(new Phrase("Remarks : " + lblRemarks.Text, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cRemarks.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cRemarks.Colspan = 4;
                        tabled.AddCell(cRemarks);
                    }
                    PdfPCell celldg6 = new PdfPCell(new Phrase("Total Service Tax - (A)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    tabled.AddCell(celldg6);

                    PdfPCell celldg8 = new PdfPCell(new Phrase((((totalamount + servicecharge) * 12 / 100) + ((totalamount + servicecharge) * 12 / 100 * 2 / 100) + ((totalamount + servicecharge) * 12 / 100 * 1 / 100)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg8.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    tabled.AddCell(celldg8);

                    PdfPCell celldg99 = new PdfPCell(new Phrase("Total Bill Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg99.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldg99.Colspan = 5;
                    tabled.AddCell(celldg99);

                    PdfPCell celldg100 = new PdfPCell(new Phrase(((totalamount + servicecharge) + ((totalamount + servicecharge) * 12 / 100) + ((totalamount + servicecharge) * 12 / 100 * 2 / 100) + ((totalamount + servicecharge) * 12 / 100 * 1 / 100)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg100.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    tabled.AddCell(celldg100);

                    if (bST75)
                    {
                        {
                            PdfPCell celldst10 = new PdfPCell(new Phrase("Less: 75% of (A)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldst10.HorizontalAlignment = 2;
                            celldst10.Colspan = 5;//0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldst10);

                            PdfPCell cellst110 = new PdfPCell(new Phrase((((totalamount + servicecharge) * 12 / 100 * 75 / 100) + ((totalamount + servicecharge) * 12 / 100 * 2 / 100 * 75 / 100) + ((totalamount + servicecharge) * 12 / 100 * 1 / 100 * 75 / 100)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            cellst110.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(cellst110);
                        }

                        {
                            PdfPCell celldst = new PdfPCell(new Phrase("Grand Total (Rs.)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldst.HorizontalAlignment = 2;
                            celldst.Colspan = 5;//0=Left, 1=Centre, 2=Right
                            tabled.AddCell(celldst);

                            PdfPCell cellst1 = new PdfPCell(new Phrase((Grandtotal).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            cellst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            tabled.AddCell(cellst1);
                        }


                        //{
                        //    PdfPCell celldst11 = new PdfPCell(new Phrase("Service Tax Payable by SP (Contractor)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    celldst11.HorizontalAlignment = 2;
                        //    celldst11.Colspan = 5;//0=Left, 1=Centre, 2=Right
                        //    tabled.AddCell(celldst11);

                        //    PdfPCell cellst12 = new PdfPCell(new Phrase(((((totalamount + servicecharge) + ((totalamount + servicecharge) * 12 / 100) + ((totalamount + servicecharge) * 12 / 100 * 2 / 100) + ((totalamount + servicecharge) * 12 / 100 * 1 / 100)) - Grandtotal)).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        //    cellst12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        //    tabled.AddCell(cellst12);
                        //}
                    }
                    document.Add(tabled);




                    PdfPTable tablecon = new PdfPTable(2);
                    tablecon.TotalWidth = 500f;
                    tablecon.LockedWidth = true;
                    float[] widthcon = new float[] { 2f, 2f };
                    tablecon.SetWidths(widthcon);

                    PdfPCell cellBreak = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 15, Font.NORMAL, BaseColor.BLACK)));
                    cellBreak.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellBreak.Colspan = 2;
                    cellBreak.Border = 0;
                    tablecon.AddCell(cellBreak);

                    PdfPCell cellcamt = new PdfPCell(new Phrase(" In Words: Rupees " + lblamtinwords.Text.Trim() + " Only",
                        FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellcamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellcamt.Colspan = 2;
                    cellcamt.Border = 0;
                    tablecon.AddCell(cellcamt);
                    tablecon.AddCell(cellBreak);
                    //tablecon.AddCell(cellBreak);
                    //tablecon.AddCell(cellBreak);
                    //tablecon.AddCell(cellBreak);



                    string Servicetax = string.Empty;
                    string PANNO = string.Empty;
                    string PFNo = string.Empty;
                    string Esino = string.Empty;
                    string PTno = string.Empty;
                    string Notes = string.Empty;
                    string RegNo = string.Empty;
                    string CIDNo = string.Empty;

                    if (compInfo.Rows.Count > 0)
                    {
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        PTno = compInfo.Rows[0]["bankname"].ToString();
                        Notes = compInfo.Rows[0]["Notes"].ToString();
                        RegNo = compInfo.Rows[0]["RegNo"].ToString();
                        CIDNo = compInfo.Rows[0]["CorporateIDNo"].ToString();
                    }


                    if (CIDNo.Trim().Length > 0)
                    {
                        PdfPCell cellCIDNo = new PdfPCell(new Phrase("CORPORATE IDENTITY NO: " + CIDNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellCIDNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellCIDNo.Colspan = 7;
                        cellCIDNo.BorderWidthBottom = 0;
                        cellCIDNo.BorderWidthLeft = .5f;
                        cellCIDNo.BorderWidthTop = .5f;
                        cellCIDNo.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellCIDNo);
                    }

                    if (RegNo.Trim().Length > 0)
                    {
                        PdfPCell cellRegNo = new PdfPCell(new Phrase("REG.NO: " + RegNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellRegNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellRegNo.Colspan = 7;
                        cellRegNo.BorderWidthBottom = 0;
                        cellRegNo.BorderWidthLeft = .5f;
                        cellRegNo.BorderWidthTop = .5f;
                        cellRegNo.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellRegNo);
                    }

                    if (Servicetax.Trim().Length > 0)
                    {
                        PdfPCell cellc6 = new PdfPCell(new Phrase("SERVICE TAX NO: " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc6.Colspan = 7;
                        cellc6.BorderWidthBottom = 0;
                        cellc6.BorderWidthLeft = .5f;
                        cellc6.BorderWidthTop = .5f;
                        cellc6.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellc6);
                    }



                    if (PANNO.Trim().Length > 0)
                    {
                        PdfPCell cellc7 = new PdfPCell(new Phrase("PAN NO: " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc7.Colspan = 7;
                        cellc7.BorderWidthBottom = .5f;
                        cellc7.BorderWidthLeft = .5f;
                        cellc7.BorderWidthTop = 0;
                        cellc7.BorderWidthRight = .5f;
                        //cellc7.Border = 0;
                        tablecon.AddCell(cellc7);
                    }
                    if (PFNo.Trim().Length > 0)
                    {
                        PdfPCell Pfno = new PdfPCell(new Phrase("EPF NO: " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Pfno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Pfno.Colspan = 7;
                        Pfno.BorderWidthBottom = .5f;
                        Pfno.BorderWidthLeft = .5f;
                        Pfno.BorderWidthTop = 0;
                        Pfno.BorderWidthRight = .5f;
                        //Pfno.Border = 0;
                        tablecon.AddCell(Pfno);
                    }

                    if (Esino.Trim().Length > 0)
                    {
                        PdfPCell ESino = new PdfPCell(new Phrase("ESIC NO: " + Esino, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        ESino.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        ESino.Colspan = 7;
                        ESino.BorderWidthBottom = .5f;
                        ESino.BorderWidthLeft = .5f;
                        ESino.BorderWidthTop = 0;
                        ESino.BorderWidthRight = .5f;
                        //ESino.Border = 0;
                        tablecon.AddCell(ESino);
                    }

                    if (PTno.Trim().Length > 0)
                    {
                        PdfPCell Ptno = new PdfPCell(new Phrase("P Tax No: " + PTno, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Ptno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Ptno.Colspan = 7;
                        Ptno.BorderWidthBottom = .5f;
                        Ptno.BorderWidthLeft = .5f;
                        Ptno.BorderWidthTop = 0;
                        Ptno.BorderWidthRight = .5f;
                        //Ptno.Border = 0;
                        tablecon.AddCell(Ptno);
                    }

                    PdfPCell cellspace = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellspace.Border = 0;
                    cellspace.Colspan = 2;
                    tablecon.AddCell(cellspace);

                    if (Notes.Trim().Length > 0)
                    {


                        PdfPCell note1 = new PdfPCell(new Phrase(Notes.ToString(), FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                        note1.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                        note1.Colspan = 7;
                        note1.Border = 0;
                        note1.SetLeading(0, 1.5f);
                        tablecon.AddCell(note1);

                    }

                    PdfPCell cellc41 = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc41.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc41.Colspan = 7;
                    cellc41.Border = 0;
                    cellc41.PaddingTop = 10;
                    tablecon.AddCell(cellc41);

                    PdfPCell cellc4 = new PdfPCell(new Phrase("Authorized Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc4.Colspan = 7;
                    cellc4.Border = 0;
                    cellc4.PaddingTop = 30;
                    tablecon.AddCell(cellc4);



                    document.Add(tablecon);
                    document.NewPage();
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=Invoice.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void btninvoiceletterhead_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);
                    PageEventHelper pageEventHelper = new PageEventHelper();
                    writer.PageEvent = pageEventHelper;
                    document.Open();
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";


                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();

                    }
                    #endregion

                    string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteReaderWithQueryAsync(SqlQuryForServiCharge).Result;
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                    }
                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/BillLogo.png");
                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(70f);
                        gif2.SetAbsolutePosition(34f, 755f);
                        //document.Add(new Paragraph(" "));
                        //document.Add(gif2);
                    }

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 350f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);


                    //tablelogo.AddCell(celll);
                    PdfPCell CCompName = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 1;
                    CCompName.Border = 0;
                    CCompName.Colspan = 2;
                    CCompName.PaddingTop = -20;
                    tablelogo.AddCell(CCompName);

                    PdfPCell CCompAddress = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.Border = 0;
                    CCompAddress.Colspan = 2;
                    CCompAddress.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompAddress);

                    PdfPCell cellline = new PdfPCell(new Paragraph("", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellline.Border = 0;
                    cellline.Colspan = 2;
                    tablelogo.AddCell(cellline);
                    //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celll.Border = 0;
                    celll.Colspan = 2;
                    tablelogo.AddCell(celll);
                    tablelogo.AddCell(celll);
                    tablelogo.AddCell(celll);
                    //tablelogo.AddCell(celll);

                    // tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 18, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.PaddingTop = 50;
                    CInvoice.Border = 0;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);

                    PdfPTable address = new PdfPTable(2);
                    address.TotalWidth = 500f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(1);
                    tempTable1.TotalWidth = 250f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 1f };
                    tempTable1.SetWidths(tempWidth1);

                    string selectclientaddress = "select * from clients where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteReaderWithQueryAsync(selectclientaddress).Result;
                    string SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteAdaptorAsyncWithQueryParams(SelectBillNo).Result;
                    string BillNo = "";
                    string DisplayBillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float sbcess = 0;
                    float kkcess = 0;

                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                        {
                            RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                        {
                            sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                        {
                            kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                        {
                            machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                        {
                            materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                        {
                            maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                        {
                            extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                        {
                            extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                        {
                            discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                        {
                            discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                        }

                        machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                        materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                        maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                        extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                        extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                        discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                        discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                            if (strExtradatacheck == "True")
                            {
                                Extradatacheck = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                        {
                            strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                            if (strExtrastcheck == "True")
                            {
                                ExtraDataSTcheck = true;
                            }
                        }



                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                            if (strSTMachinary == "True")
                            {
                                STMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                            if (strSTMaterial == "True")
                            {
                                STMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                            if (strSTMaintenance == "True")
                            {
                                STMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                            if (strSTExtraone == "True")
                            {
                                STExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                            if (strSTExtratwo == "True")
                            {
                                STExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                            if (strSCMachinary == "True")
                            {
                                SCMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                            if (strSCMaterial == "True")
                            {
                                SCMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                            if (strSCMaintenance == "True")
                            {
                                SCMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                            if (strSCExtraone == "True")
                            {
                                SCExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                            if (strSCExtratwo == "True")
                            {
                                SCExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                            if (strSTDiscountone == "True")
                            {
                                STDiscountone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                            if (strSTDiscounttwo == "True")
                            {
                                STDiscounttwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                        {
                            ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                        {
                            ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                        {
                            staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                        }

                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();

                    PdfPCell cell11 = new PdfPCell(new Paragraph("To,", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell11.Border = 0;
                    tempTable1.AddCell(cell11);
                    string addressData = "";
                    //addressData = dtclientaddress.Rows[0]["clientname"].ToString();
                    //if (addressData.Trim().Length > 0)
                    //{
                    //    PdfPCell clientname = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 12, Font.BOLD, BaseColor.BLACK)));
                    //    clientname.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //    clientname.Border = 0;
                    //    tempTable1.AddCell(clientname);
                    //}
                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                               //clientaddrhno.Colspan = 0;
                        clientaddrhno.Border = 0;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 2;
                        clientcolony.Border = 0;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 2;
                        clientcity.Border = 0;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 2;
                        clientstate.Border = 0;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 2;
                        clietnpin.Border = 0;
                        tempTable1.AddCell(clietnpin);
                    }
                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(1);
                    tempTable2.TotalWidth = 250f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f };
                    tempTable2.SetWidths(tempWidth2);

                    //Blank Field for Space
                    PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell12.Border = 0;
                    tempTable2.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No: " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell13.Border = 0;

                    tempTable2.AddCell(cell13);
                    PdfPCell cell14 = new PdfPCell(new Paragraph("Date: " + BillDate.Day.ToString("00") + "/" + BillDate.Month.ToString("00") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell14.Border = 0;


                    tempTable2.AddCell(cell14);
                    //PdfPCell cell15 = new PdfPCell(new Paragraph("Due Date: " + DueDate.Day.ToString("00") + "/" + DueDate.Month.ToString("00") + "/" +
                    //DueDate.Year, FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    // tempTable2.AddCell(cell15);


                    PdfPCell cell15 = new PdfPCell(new Paragraph("For Month: " + GetMonthName() + " - " + GetMonthOfYear() +
                        "      ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell15.Border = 0;


                    tempTable2.AddCell(cell15);
                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    address.AddCell(celll);


                    document.Add(address);

                    PdfPTable bodytablelogo = new PdfPTable(2);
                    bodytablelogo.TotalWidth = 500f;//600f
                    bodytablelogo.LockedWidth = true;
                    float[] widthlogo = new float[] { 2f, 2f };
                    bodytablelogo.SetWidths(widthlogo);

                    PdfPCell cell9 = new PdfPCell(new Phrase("Unit Name : " + dtclientaddress.Rows[0]["clientname"].ToString(),
                        FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell9.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell9.Colspan = 2;
                    cell9.Border = 0;
                    bodytablelogo.AddCell(cell9);

                    string Fromdate = txtfromdate.Text;
                    string Todate = txttodate.Text;

                    PdfPCell cell10 = new PdfPCell(new Phrase("Bill From : " + Fromdate + "  to  " +
                        Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell10.Colspan = 2;
                    cell10.Border = 0;
                    bodytablelogo.AddCell(cell10);
                    bodytablelogo.AddCell(celll);

                    PdfPCell cell19 = new PdfPCell(new Phrase("Dear Sir, ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell19.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell19.Colspan = 2;
                    cell19.Border = 0;
                    bodytablelogo.AddCell(cell19);
                    bodytablelogo.AddCell(celll);

                    PdfPCell cell20 = new PdfPCell(new Phrase(strDescription, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell20.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell20.Colspan = 2;
                    cell20.Border = 0;
                    bodytablelogo.AddCell(cell20);
                    bodytablelogo.AddCell(celll);
                    PdfPCell cell21 = new PdfPCell(new Phrase("The Details are given below: ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell21.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell21.Colspan = 1;
                    cell21.Border = 0;
                    bodytablelogo.AddCell(cell21);
                    bodytablelogo.AddCell(celll);
                    //bodytablelogo.AddCell(celll);
                    document.Add(bodytablelogo);
                    int colCount = 6;// gvClientBilling.Columns.Count;
                                     //Create a table

                    PdfPTable table = new PdfPTable(colCount);
                    table.TotalWidth = 500f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = 1;


                    //create an array to store column widths
                    // int[] colWidths = new int[5];
                    float[] colWidths = new float[] { 1f, 4f, 1.2f, 1.8f, 2.4f, 1.8f };
                    table.SetWidths(colWidths);
                    PdfPCell cell;
                    string cellText;
                    //create the header row
                    for (int colIndex = 0; colIndex < 6; colIndex++)
                    {
                        //set the column width
                        if (colIndex < 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = .5f;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 3)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[3].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 4)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[4].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                        if (colIndex == 5)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[5].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = .5f;
                            cell.BorderWidthLeft = 0;
                            cell.BorderWidthTop = .5f;
                            cell.BorderWidthRight = .5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                    }
                    ////export rows from GridView to table
                    for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                    {
                        if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                        //gvClientBilling.RowStyle.BorderColor = System.Drawing.Color.Gray;
                        {
                            Label lblamount = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                            if (lblamount != null)
                            {
                                string strAmount = lblamount.Text;
                                float amount = 0;
                                if (strAmount.Length > 0)
                                    amount = Convert.ToSingle(strAmount);
                                if (amount >= 0)
                                {
                                    for (int j = 0; j < 6; j++)
                                    {
                                        if (j == 0)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText + "\n\n", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = .5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }

                                        //fetch the column value of the current row
                                        if (j == 1)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label1.Text + "'";


                                            DataTable dt = config.ExecuteReaderWithQueryAsync(summaryQry).Result;
                                            cellText = label1.Text;
                                            if (dt.Rows.Count > 0)
                                            {
                                                if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                    cellText += " (" + dt.Rows[0]["summary"].ToString() + ")";
                                            }

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            //cell.Border = 0;
                                            cell.BorderWidthBottom = .5f;
                                            //cell.BorderWidthLeft = .5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }


                                        if (j == 2)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        if (j == 3)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        if (j == 4)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                            Label label2 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                               "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label2.Text + "'";

                                            //Duty Hrs removed for KL on 27/05/2015
                                            DataTable dt = config.ExecuteReaderWithQueryAsync(dutyhrsQry).Result;
                                            cellText = label1.Text;

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                        //paragraph.Alignment = Element.ALIGN_CENTER
                                        if (j == 5)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            //cell.Border = 0;
                                            cell.BorderWidthBottom = .5f;
                                            cell.BorderWidthLeft = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = .5f;
                                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                                            table.AddCell(cell);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    document.Add(table);

                    tablelogo.AddCell(celll);

                    PdfPTable tabled = new PdfPTable(colCount);
                    tabled.TotalWidth = 500;//432f;
                    tabled.LockedWidth = true;
                    float[] widthd = new float[] { 1f, 4f, 1.2f, 1.8f, 2.4f, 1.8f };
                    tabled.SetWidths(widthd);

                    if (RelChrgAmt > 0)
                    {
                        PdfPCell celldz5 = new PdfPCell(new Phrase("1/6 Reliever Charges", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        celldz5.Colspan = 5;
                        celldz5.BorderWidthBottom = .5f;
                        celldz5.BorderWidthLeft = .5f;
                        celldz5.BorderWidthTop = 0;
                        celldz5.BorderWidthRight = .5f;

                        //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz5);

                        PdfPCell celldz6 = new PdfPCell(new Phrase(" " + RelChrgAmt.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        celldz6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        celldz6.BorderWidthBottom = .5f;
                        celldz6.BorderWidthLeft = 0;
                        celldz6.BorderWidthTop = 0;
                        celldz6.BorderWidthRight = .5f;
                        //celldz4.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(celldz6);
                    }

                    PdfPCell celldz1 = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz1.Colspan = 5;
                    celldz1.BorderWidthBottom = .5f;
                    celldz1.BorderWidthLeft = .5f;
                    celldz1.BorderWidthTop = 0;
                    celldz1.BorderWidthRight = .5f;

                    //celldz1.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz1);

                    PdfPCell celldz4 = new PdfPCell(new Phrase(" " + totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldz4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldz4.BorderWidthBottom = .5f;
                    celldz4.BorderWidthLeft = 0;
                    celldz4.BorderWidthTop = 0;
                    celldz4.BorderWidthRight = .5f;
                    //celldz4.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldz4);

                    string SqlQryForTaxes = "select * from  Tbloptions ";
                    DataTable DtTaxes = config.ExecuteReaderWithQueryAsync(SqlQryForTaxes).Result;
                    string SCPersent = "";
                    if (DtTaxes.Rows.Count > 0)
                    {
                        SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                    }
                    else
                    {
                        lblResult.Text = "There Is No Tax Values For Generating Bills ";
                        return;
                    }

                    if (machinarycost > 0)
                    {
                        if (STMachinary == true)
                        {
                            if (SCMachinary == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == true)
                        {
                            if (SCMaterial == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 4;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == true)
                        {
                            if (SCMaintenance == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == true)
                        {
                            if (SCExtraone == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == true)
                        {
                            if (SCExtratwo == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    #region When Extra data is checked and STcheck is false and SCcheck is true

                    if (machinarycost > 0)
                    {
                        if (STMachinary == false)
                        {
                            if (SCMachinary == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == false)
                        {
                            if (SCMaterial == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == false)
                        {
                            if (SCMaintenance == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == false)
                        {
                            if (SCExtraone == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == false)
                        {
                            if (SCExtratwo == true)
                            {
                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 5;

                                tabled.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                                   //celldcst2.BorderWidthBottom = .5f;
                                                                   //celldcst2.BorderWidthLeft = 0;
                                                                   //celldcst2.BorderWidthTop = .5f;
                                                                   //celldcst2.BorderWidthRight = .5f;
                                                                   // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tabled.AddCell(celldcst2);
                            }
                        }
                    }

                    #endregion
                    if (servicecharge > 0)//bSCType == true)
                    {
                        float scharge = servicecharge;
                        if (scharge > 0)
                        {
                            string SCharge = "";
                            if (bSCType == false)
                            {
                                SCharge = ServiceCharge + " %";
                            }
                            else
                            {
                                SCharge = ServiceCharge;
                            }

                            PdfPCell celldc2 = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc2.Colspan = 5;
                            celldc2.BorderWidthBottom = 0;
                            celldc2.BorderWidthLeft = .5f;
                            celldc2.BorderWidthTop = 0;
                            celldc2.BorderWidthRight = .5f;
                            //celldc2.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldc2);




                            PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc4.BorderWidthBottom = 0;
                            celldc4.BorderWidthLeft = 0;
                            celldc4.BorderWidthTop = .5f;
                            celldc4.BorderWidthRight = .5f;
                            //celldc4.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldc4);
                        }
                    }



                    #region When Extra data is checked and STcheck is true
                    if (Extradatacheck == true)
                    {
                        //float machineryCostwithst = 0;
                        //if (lblMachinerywithst.Text.Length > 0)
                        //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;

                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        //float materialcostwithst = 0;
                        //if (lblMaterialwithst.Text.Length > 0)
                        //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                        //float electricalcostwithst = 0;
                        //if (lblElectricalwithst.Text.Length > 0)
                        //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 5;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        //float extraamtwithst = 0;
                        //if (lblextraonewithst.Text.Length > 0)
                        //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 4;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        //float Extraamtwithst1 = 0;
                        //if (lblextratwowithst.Text.Length > 0)
                        //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 4;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                    }

                    #endregion

                    if (!bIncludeST)
                    {

                        string scpercent = "";
                        if (bST75 == true)
                        {
                            scpercent = "3";
                        }
                        else
                        {
                            scpercent = SCPersent;
                        }

                        if (servicetax > 0)
                        {

                            PdfPCell celldd2 = new PdfPCell(new Phrase("Service Tax @ " + scpercent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 5;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }

                        if (sbcess > 0)
                        {
                            string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh bharat Cess @ " + SBCESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 5;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }
                        if (kkcess > 0)
                        {
                            string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + KKCESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 5;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }

                        if (cess > 0)
                        {
                            string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("CESS @ " + CESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 5;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = .5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = .5f;
                            tabled.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.BorderWidthLeft = 0;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = .5f;
                            tabled.AddCell(celldd4);

                        }

                        if (shecess > 0)
                        {

                            string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                            PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ " + SHECESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf2.Colspan = 5;
                            celldf2.BorderWidthBottom = 0;
                            celldf2.BorderWidthLeft = .5f;
                            celldf2.BorderWidthTop = 0;
                            celldf2.BorderWidthRight = 0;
                            tabled.AddCell(celldf2);


                            PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf4.BorderWidthBottom = 0;
                            celldf4.BorderWidthLeft = .5f;
                            celldf4.BorderWidthTop = 0;
                            celldf4.BorderWidthRight = .5f;
                            //celldf4.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldf4);
                        }
                    }
                    //if (bST75)
                    //{
                    //    if (ServiceTax75 > 0)
                    //    {
                    //        PdfPCell celldMeci1 = new PdfPCell(new Phrase("Less 75% Service Tax ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        celldMeci1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        //celld7.Border = 1;
                    //        celldMeci1.Colspan = 4;
                    //        tabled.AddCell(celldMeci1);

                    //        PdfPCell celldMeci3 = new PdfPCell(new Phrase(ServiceTax75.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        celldMeci3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        tabled.AddCell(celldMeci3);
                    //    }
                    //    if (ServiceTax25 > 0)
                    //    {

                    //        PdfPCell cellST25h = new PdfPCell(new Phrase("Service Tax Chargable @3.09% ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        cellST25h.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        //celld7.Border = 1;
                    //        cellST25h.Colspan = 4;
                    //        tabled.AddCell(cellST25h);

                    //        PdfPCell cellST25d = new PdfPCell(new Phrase(ServiceTax25.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //        cellST25d.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //        tabled.AddCell(cellST25d);
                    //    }


                    //}

                    #region When Extradata check is false and STcheck is false


                    //if (Extradatacheck == true)
                    //{
                    //    if (ExtraDataSTcheck==false)
                    //    {
                    //        if (machinarycost > 0)
                    //        {
                    //            PdfPCell celldMeci1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMeci1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMeci1.Colspan = 4;
                    //            tabled.AddCell(celldMeci1);

                    //            PdfPCell celldMeci3 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMeci3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMeci3);
                    //        }

                    //        if (materialcost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }
                    //        if (maintenancecost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }

                    //        if (extraonecost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }
                    //        if (extratwocost > 0)
                    //        {
                    //            PdfPCell celldMt1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            celldMt1.Colspan = 4;
                    //            tabled.AddCell(celldMt1);

                    //            PdfPCell celldMt3 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //            tabled.AddCell(celldMt3);
                    //        }

                    //    }

                    if (Extradatacheck == true)
                    {
                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 4;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;

                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 4;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }


                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 4;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 4;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == false)
                                {
                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 4;
                                    celldcst1.BorderWidthBottom = .5f;
                                    celldcst1.BorderWidthLeft = .5f;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = .5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tabled.AddCell(celldcst2);
                                }
                            }
                        }

                        if (discountone > 0)
                        {
                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldMt1.Colspan = 4;
                            celldMt1.BorderWidthBottom = .5f;
                            celldMt1.BorderWidthLeft = .5f;
                            celldMt1.BorderWidthTop = .5f;
                            celldMt1.BorderWidthRight = .5f;
                            // celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = .5f;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.BorderWidthTop = .5f;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt3);
                        }
                        if (discounttwo > 0)
                        {
                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            celldMt1.BorderWidthBottom = .5f;
                            celldMt1.BorderWidthLeft = 0;
                            celldMt1.BorderWidthTop = 0;
                            celldMt1.BorderWidthRight = .5f;
                            //celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            celldMt1.Colspan = 4;
                            tabled.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = .5f;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.BorderWidthTop = 0;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tabled.AddCell(celldMt3);
                        }
                    }
                    #endregion

                    if (lblRemarks.Text == "0")
                    {
                        PdfPCell cRemarks = new PdfPCell(new Phrase("Remarks : ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cRemarks.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cRemarks.Colspan = 4;
                        cRemarks.BorderWidthBottom = .5f;
                        cRemarks.BorderWidthLeft = .5f;
                        cRemarks.BorderWidthTop = .5f;
                        cRemarks.BorderWidthRight = 0;
                        // cRemarks.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(cRemarks);
                    }
                    else
                    {
                        PdfPCell cRemarks = new PdfPCell(new Phrase("Remarks : " + lblRemarks.Text, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        cRemarks.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cRemarks.Colspan = 4;
                        cRemarks.BorderWidthBottom = .5f;
                        cRemarks.BorderWidthLeft = .5f;
                        cRemarks.BorderWidthTop = .5f;
                        cRemarks.BorderWidthRight = .5f;
                        //cRemarks.BorderColor = BaseColor.LIGHT_GRAY;
                        tabled.AddCell(cRemarks);
                    }
                    PdfPCell celldg6 = new PdfPCell(new Phrase("Grand Total(Rs.)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldg6.BorderWidthBottom = .5f;
                    celldg6.BorderWidthLeft = 0;
                    celldg6.BorderWidthTop = .5f;
                    celldg6.BorderWidthRight = .5f;
                    // celldg6.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldg6);

                    PdfPCell celldg8 = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldg8.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    celldg8.BorderWidthBottom = .5f;
                    celldg8.BorderWidthLeft = 0;
                    celldg8.BorderWidthTop = .5f;
                    celldg8.BorderWidthRight = .5f;
                    //celldg8.BorderColor = BaseColor.LIGHT_GRAY;
                    tabled.AddCell(celldg8);



                    document.Add(tabled);




                    PdfPTable tablecon = new PdfPTable(2);
                    tablecon.TotalWidth = 500f;
                    tablecon.LockedWidth = true;
                    float[] widthcon = new float[] { 2f, 2f };
                    tablecon.SetWidths(widthcon);

                    PdfPCell cellBreak = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 15, Font.NORMAL, BaseColor.BLACK)));
                    cellBreak.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellBreak.Colspan = 2;
                    cellBreak.BorderWidthBottom = 0;
                    cellBreak.BorderWidthLeft = .5f;
                    cellBreak.BorderWidthTop = 0;
                    cellBreak.BorderWidthRight = .5f;
                    //cellBreak.Border = 0;
                    tablecon.AddCell(cellBreak);

                    PdfPCell cellcamt = new PdfPCell(new Phrase(" In Words: Rupees " + lblamtinwords.Text.Trim() + " Only",
                        FontFactory.GetFont(FontStyle, 10, Font.BOLDITALIC, BaseColor.BLACK)));
                    cellcamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellcamt.Colspan = 2;
                    cellcamt.BorderWidthBottom = 0;
                    cellcamt.BorderWidthLeft = .5f;
                    cellcamt.BorderWidthTop = 0;
                    cellcamt.BorderWidthRight = .5f;
                    //cellcamt.Border = 1;
                    tablecon.AddCell(cellcamt);
                    tablecon.AddCell(cellBreak);

                    string Servicetax = string.Empty;
                    string PANNO = string.Empty;
                    string PFNo = string.Empty;
                    string Esino = string.Empty;
                    string PTno = string.Empty;
                    string RegNo = string.Empty;
                    string CIDNo = string.Empty;

                    if (compInfo.Rows.Count > 0)
                    {
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        PTno = compInfo.Rows[0]["bankname"].ToString();
                        RegNo = compInfo.Rows[0]["RegNo"].ToString();
                        CIDNo = compInfo.Rows[0]["CorporateIDNo"].ToString();
                    }

                    if (CIDNo.Trim().Length > 0)
                    {
                        PdfPCell cellCIDNo = new PdfPCell(new Phrase("CORPORATE IDENTITY NO: " + CIDNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellCIDNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellCIDNo.Colspan = 7;
                        cellCIDNo.BorderWidthBottom = 0;
                        cellCIDNo.BorderWidthLeft = .5f;
                        cellCIDNo.BorderWidthTop = .5f;
                        cellCIDNo.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellCIDNo);
                    }

                    if (RegNo.Trim().Length > 0)
                    {
                        PdfPCell cellRegNo = new PdfPCell(new Phrase("REG.NO: " + RegNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellRegNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellRegNo.Colspan = 7;
                        cellRegNo.BorderWidthBottom = 0;
                        cellRegNo.BorderWidthLeft = .5f;
                        cellRegNo.BorderWidthTop = .5f;
                        cellRegNo.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellRegNo);
                    }

                    if (Servicetax.Trim().Length > 0)
                    {
                        PdfPCell cellc6 = new PdfPCell(new Phrase("SERVICE TAX NO: " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc6.Colspan = 7;
                        cellc6.BorderWidthBottom = 0;
                        cellc6.BorderWidthLeft = .5f;
                        cellc6.BorderWidthTop = .5f;
                        cellc6.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellc6);
                    }

                    //var normalFont = FontFactory.GetFont(FontFactory.HELVETICA, 12);
                    //var boldFont = FontFactory.GetFont(FontFactory.HELVETICA_BOLD, 12);

                    //var phrase = new Phrase();
                    //phrase.Add(new Chunk("REASON(S) FOR CANCELLATION:", boldFont));
                    //phrase.Add(new Chunk(" See Statutoryreason(s) designated by Code No(s) 1 on the reverse side hereof", normalFont));

                    if (PANNO.Trim().Length > 0)
                    {
                        PdfPCell cellc7 = new PdfPCell(new Phrase("PAN NO: " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc7.Colspan = 7;
                        cellc7.BorderWidthBottom = .5f;
                        cellc7.BorderWidthLeft = .5f;
                        cellc7.BorderWidthTop = 0;
                        cellc7.BorderWidthRight = .5f;
                        //cellc7.Border = 0;
                        tablecon.AddCell(cellc7);
                    }
                    if (PFNo.Trim().Length > 0)
                    {
                        PdfPCell Pfno = new PdfPCell(new Phrase("EPF NO: " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Pfno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Pfno.Colspan = 7;
                        Pfno.BorderWidthBottom = .5f;
                        Pfno.BorderWidthLeft = .5f;
                        Pfno.BorderWidthTop = 0;
                        Pfno.BorderWidthRight = .5f;
                        //Pfno.Border = 0;
                        tablecon.AddCell(Pfno);
                    }

                    if (Esino.Trim().Length > 0)
                    {
                        PdfPCell ESino = new PdfPCell(new Phrase("ESIC NO: " + Esino, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        ESino.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        ESino.Colspan = 7;
                        ESino.BorderWidthBottom = .5f;
                        ESino.BorderWidthLeft = .5f;
                        ESino.BorderWidthTop = 0;
                        ESino.BorderWidthRight = .5f;
                        //ESino.Border = 0;
                        tablecon.AddCell(ESino);
                    }

                    if (PTno.Trim().Length > 0)
                    {
                        PdfPCell Ptno = new PdfPCell(new Phrase("P Tax No: " + PTno, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Ptno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Ptno.Colspan = 7;
                        Ptno.BorderWidthBottom = .5f;
                        Ptno.BorderWidthLeft = .5f;
                        Ptno.BorderWidthTop = 0;
                        Ptno.BorderWidthRight = .5f;
                        //Ptno.Border = 0;
                        tablecon.AddCell(Ptno);
                    }

                    PdfPCell cellspace = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellspace.Border = 0;
                    cellspace.Colspan = 2;
                    tablecon.AddCell(cellspace);
                    //tablecon.AddCell(cellspace);

                    //PdfPCell note = new PdfPCell(new Phrase("Terms & Conditions:", FontFactory.GetFont(FontStyle, 9, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    //note.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //note.Colspan = 7;
                    //note.Border = 0;
                    //tablecon.AddCell(note);

                    //PdfPCell note1 = new PdfPCell(new Phrase("1. Bill will be treated as correct, if no error reported within 3 days from the date of submission.", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    //note1.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                    //note1.Colspan = 7;
                    //note1.Border = 0;
                    //tablecon.AddCell(note1);

                    //PdfPCell note2 = new PdfPCell(new Phrase("2. Bill should be cleared with in a week time from the date of submission. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    //note2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //note2.Colspan = 7;
                    //note2.Border = 0;
                    //tablecon.AddCell(note2);

                    //PdfPCell note3 = new PdfPCell(new Phrase("3. Payment should be made along with payment advice. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    //note3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //note3.Colspan = 7;
                    //note3.Border = 0;
                    //tablecon.AddCell(note3);

                    //PdfPCell note4 = new PdfPCell(new Phrase("4. Bill shall not be deducted without prior acceptance in writing. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    //note4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //note4.Colspan = 7;
                    //note4.Border = 0;
                    //tablecon.AddCell(note4);

                    //PdfPCell note5 = new PdfPCell(new Phrase("5. Payment shall be made through crossed cheque in favour of " + companyName + " Payable at Hyderabad.", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    //note5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //note5.Colspan = 7;
                    //note5.Border = 0;
                    //tablecon.AddCell(note5);

                    //PdfPCell note6 = new PdfPCell(new Phrase("6. Delayed payments will attract interest 24% per annum.  ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    //note6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //note6.Colspan = 7;
                    //note6.Border = 0;
                    //tablecon.AddCell(note6);

                    //PdfPCell note7 = new PdfPCell(new Phrase("7. Bill received with supported documents.  ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    //note7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //note7.Colspan = 7;
                    //note7.Border = 0;
                    //tablecon.AddCell(note7);

                    PdfPCell cellc41 = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc41.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc41.Colspan = 7;
                    cellc41.Border = 0;
                    cellc41.PaddingTop = 10;
                    tablecon.AddCell(cellc41);

                    PdfPCell cellc4 = new PdfPCell(new Phrase("Authorized Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc4.Colspan = 7;
                    cellc4.Border = 0;
                    cellc4.PaddingTop = 30;
                    tablecon.AddCell(cellc4);




                    // string PANNO = GlobalData.Instance.Getpanno();

                    //PdfPCell NoteCell = new PdfPCell(new Phrase("Note:", FontFactory.GetFont(FontStyle, 12, Font.BOLD|Font.UNDERLINE, BaseColor.BLACK)));
                    //NoteCell.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //NoteCell.Colspan = 7;
                    //NoteCell.Border = 0;
                    //tablecon.AddCell(NoteCell);

                    //PdfPCell NoteDesc = new PdfPCell(new Phrase("•	All Cheques, D.D’s should be drawn in favour of Vasu Realtors (P) Ltd., Hyderabad only.\n•	Interest @ 24% per annum shall be charged from date of supply if not paid within 10 days.\n•	All disputes, Controversies arising out of matters related to above will be subject to \n  Hyderabad Jurisdiction.\n•	E & O.E", FontFactory.GetFont(FontStyle, 10, Font.BOLD , BaseColor.BLACK)));
                    //NoteDesc.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //NoteDesc.Colspan = 7;
                    //NoteDesc.Border = 0;
                    //tablecon.AddCell(NoteDesc);

                    string filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

                    document.Add(tablecon);
                    document.NewPage();
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename);
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected int GetMonthBasedonSelection()
        {

            int Month = 0;
            if (ddlmonth.SelectedIndex == 1)
            {
                Month = GlobalData.Instance.GetIDForNextMonth();
            }
            else if (ddlmonth.SelectedIndex == 2)
            {
                Month = GlobalData.Instance.GetIDForThisMonth();
            }
            else if (ddlmonth.SelectedIndex == 3)
            {
                Month = GlobalData.Instance.GetIDForPrviousMonth();
            }
            else if (ddlmonth.SelectedIndex == 4)
            {
                Month = GlobalData.Instance.GetIDForPrviousoneMonth();
            }

            return Month;
        }

        protected void Btn_Genrate_Invoice_Click(object sender, EventArgs e)
        {

            try
            {

                #region  Begin  Validations as on [26-10-2013]
                if (ddlclientid.SelectedIndex == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Select Client Id ');", true);
                    return;
                }

                #region  Begin New code As on [10-03-2014]

                if (Chk_Month.Checked == true)
                {
                    if (txtmonth.Text.Trim().Length == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Please Enter Month for Bill ');", true);
                        return;
                    }
                    if (Timings.Instance.CheckEnteredDate(txtmonth.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid TO DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }
                else
                {
                    if (ddlmonth.SelectedIndex == 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert('Select Month for Bill ');", true);

                        return;
                    }
                }
                #endregion  End Old Code As on [14-02-2014]

                if (txtfromdate.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Please Fill The From Date  ');", true);
                    return;
                }
                else
                {
                    if (Timings.Instance.CheckEnteredDate(txtfromdate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid FROM DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }

                if (txttodate.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert(' Please Fill The To Date  ');", true);
                    return;
                }
                else
                {
                    if (Timings.Instance.CheckEnteredDate(txttodate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid TO DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }

                if (txtbilldate.Text.Trim().Length == 0)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' Please Fill The Billdate  ');", true);
                    return;
                }
                else
                {
                    if (Timings.Instance.CheckEnteredDate(txtbilldate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid BILL DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }
                if (txtduedate.Text.Trim().Length > 0)
                {
                    if (Timings.Instance.CheckEnteredDate(txtbilldate.Text) == 1)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid DUE DATE .Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return;
                    }
                }


                #endregion End   Validations as on [26-10-2013]

                DateTime DtLastDay = DateTime.Now;
                if (Chk_Month.Checked == false)
                {
                    DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                }
                if (Chk_Month.Checked == true)
                {
                    DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                }
                var ContractID = "";
                var bBillDates = 0;
                var ServiceTaxType = false;
                string SPName = "IMinvoiceformonth";
                #region  Begin Get Contract Id Based on The Last Day


                Hashtable HtGetContractID = new Hashtable();
                var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                HtGetContractID.Add("@LastDay", DtLastDay);
                DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                if (DTContractID.Rows.Count > 0)
                {
                    ContractID = DTContractID.Rows[0]["contractid"].ToString();
                    bBillDates = int.Parse(DTContractID.Rows[0]["BillDates"].ToString());
                    ServiceTaxType = bool.Parse(DTContractID.Rows[0]["ServiceTaxType"].ToString());
                }
                else
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                    return;
                }

                #endregion  End Get Contract Id Based on The Last Day

                #region Begin Variable Declarations as on [08-03-2014]


                #region Begin Part One
                var ClientId = "";
                var month = 0;
                var ContractId = "";
                var LastDay = "";
                var Fromdate = "";


                #endregion End Part One

                #region Begin  Part Two
                var Todate = "";
                var Duedate = "";
                var BillDate = "";
                var Gendays = 0;
                var G_Sdays = 0;
                // var  Staticdays=0;
                #endregion End Part Two

                #region Begin Part Three
                var Extradatacheck = "0";
                var Extradatastcheck = "0";
                var MachinaryCost = "0";
                var MaterialCost = "0";
                var MaintenanceCost = "0";

                var Extraamountone = "";
                var Extraamounttwo = "";
                var Discount = "";
                var DiscountTwo = "";

                #endregion End Part Three

                #region Begin Part Four
                var MaterialCostTitle = "";

                var MachinaryCostTitle = "";
                var MaintenanceCostTitle = "";
                var ExtraamountoneTitle = "";
                var ExtraamounttwoTitle = "";
                var DiscountTitle = "";
                var DiscountTwoTitle = "";
                var BillNum = "";

                //New Code as on 10/03/2014 by venkat

                var STMachinary = 0;
                var STMaterial = 0;
                var STMaintenance = 0;
                var STExtraone = 0;
                var STExtratwo = 0;

                var SCMachinary = 0;
                var SCMaterial = 0;
                var SCMaintenance = 0;
                var SCExtraone = 0;
                var SCExtratwo = 0;

                var STDiscountone = 0;
                var STDiscounttwo = 0;

                #endregion End Part Four



                #endregion End Variable Declarations as on [08-03-2014]

                #region Begin Assign Values To The Variables as on [08-03-2014]
                #region Begin Part One
                ClientId = ddlclientid.SelectedValue;
                // month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                month = GetMonthBasedOnSelectionDateorMonth();
                LastDay = DtLastDay.ToString();
                ContractId = ContractID;
                Fromdate = Timings.Instance.CheckDateFormat(txtfromdate.Text); ;
                #endregion End Part One

                #region Begin  Part Two

                Todate = Timings.Instance.CheckDateFormat(txttodate.Text); ;
                Duedate = Timings.Instance.CheckDateFormat(txtduedate.Text); ;
                BillDate = Timings.Instance.CheckDateFormat(txtbilldate.Text); ;
                if (Chk_Month.Checked == false)
                {
                    Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bBillDates);
                }

                //New Code when select month in Textbox
                if (Chk_Month.Checked == true)
                {
                    DateTime mGendays = DateTime.Now;
                    DateTime date = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    mGendays = DateTime.Parse(date.ToString());
                    Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bBillDates);
                }
                G_Sdays = Timings.Instance.Get_GS_Days(month, Gendays);
                //Staticdays = "";

                #endregion End Part Two

                #region Begin Part Three

                if (checkExtraData.Checked)
                {
                    Extradatacheck = "1";
                }
                if (Extradatacheck == "1")
                {
                    if (txtMachinery.Text.Trim().Length > 0)
                    {
                        MachinaryCost = txtMachinery.Text;
                    }
                    if (txtMaterial.Text.Trim().Length > 0)
                    {
                        MaterialCost = txtMaterial.Text;
                    }
                    if (txtElectical.Text.Trim().Length > 0)
                    {
                        MaintenanceCost = txtElectical.Text;
                    }
                    if (txtextraonevalue.Text.Trim().Length > 0)
                    {
                        Extraamountone = txtextraonevalue.Text;
                    }
                    if (txtextratwovalue.Text.Trim().Length > 0)
                    {
                        Extraamounttwo = txtextratwovalue.Text;
                    }
                    if (txtDiscounts.Text.Trim().Length > 0)
                    {
                        Discount = txtDiscounts.Text;
                    }
                    if (txtdiscounttwovalue.Text.Trim().Length > 0)
                    {
                        DiscountTwo = txtdiscounttwovalue.Text;
                    }
                }
                #endregion End Part Three

                #region Begin Part Four
                if (Extradatacheck == "1")
                {
                    MaterialCostTitle = txtMaterialcost.Text;
                    MachinaryCostTitle = txtmachinarycost.Text;
                    MaintenanceCostTitle = txtMaintanancecost.Text;
                    ExtraamountoneTitle = txtextraonetitle.Text;
                    ExtraamounttwoTitle = txtextratwotitle.Text;
                    DiscountTitle = txtdiscount.Text;
                    DiscountTwoTitle = txtdiscounttwotitle.Text;
                }
                BillNum = BillnoAutoGenrate(ServiceTaxType, ClientId, month);
                #endregion End Part Three

                #region New Code for Service tax for extra data check value on 01/04/2014

                if (Extradatacheck == "1")
                {

                    if (chkSTYesMachinary.Checked == true)
                    {
                        STMachinary = 1;
                    }
                    if (chkSTYesMaterial.Checked == true)
                    {
                        STMaterial = 1;
                    }
                    if (chkSTYesElectrical.Checked == true)
                    {
                        STMaintenance = 1;
                    }
                    if (chkSTYesExtraone.Checked == true)
                    {
                        STExtraone = 1;
                    }
                    if (chkSTYesExtratwo.Checked == true)
                    {
                        STExtratwo = 1;
                    }


                    if (chkSCYesMachinary.Checked == true)
                    {
                        SCMachinary = 1;
                    }
                    if (chkSCYesMaterial.Checked == true)
                    {
                        SCMaterial = 1;
                    }
                    if (chkSCYesElectrical.Checked == true)
                    {
                        SCMaintenance = 1;
                    }
                    if (chkSCYesExtraone.Checked == true)
                    {
                        SCExtraone = 1;
                    }
                    if (chkSCYesExtratwo.Checked == true)
                    {
                        SCExtratwo = 1;
                    }


                    if (chkSTDiscountone.Checked == true)
                    {
                        STDiscountone = 1;
                    }
                    if (chkSTDiscounttwo.Checked == true)
                    {
                        STDiscounttwo = 1;
                    }
                }
                #endregion


                #endregion End Assign Values To The Variables as on [08-03-2014]

                #region for insertion into empbillsheet

                string chkpdfsquery = "select pdfs from Contracts where clientid='" + ddlclientid.SelectedValue + "'";
                DataTable dtchkpdfs = config.ExecuteReaderWithQueryAsync(chkpdfsquery).Result;
                string chkpdf = "False";
                if (dtchkpdfs.Rows.Count > 0)
                    chkpdf = dtchkpdfs.Rows[0]["pdfs"].ToString();

                if (chkpdf == "True")
                {
                    ddlpaymenttype.Visible = false;
                    btndownloadpdffile.Visible = false;

                    #region  Begin Code For Variable Declarations as on [18-03-2014]
                    var ClientID = "";
                    DataTable DtEmpBillpaysheet = null;
                    Hashtable HTEmpBillpaysheet = new Hashtable();
                    var SPName1 = "IMGenrateBillPaysheet";
                    #endregion End Code For Variable Declarations    as on [18-03-2014]



                    #region  Begin Code For Assign Values To the  Variable  as on [18-03-2014]
                    ClientID = ddlclientid.SelectedValue;
                    month = GetMonthBasedOnSelectionDateorMonth();
                    if (Chk_Month.Checked == false)
                    {
                        Gendays = Timings.Instance.GetNoofDaysForSelectedMonth(ddlmonth.SelectedIndex, bBillDates);
                    }

                    //New Code when select month in Textbox
                    if (Chk_Month.Checked == true)
                    {
                        DateTime mGendays = DateTime.Now;
                        DateTime date = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                        mGendays = DateTime.Parse(date.ToString());
                        Gendays = Timings.Instance.GetNoofDaysForEnteredMonth(mGendays, bBillDates);
                    }
                    G_Sdays = Timings.Instance.Get_GS_Days(month, Gendays);
                    HTEmpBillpaysheet.Add("@Gendays", Gendays);
                    HTEmpBillpaysheet.Add("@G_Sdays", G_Sdays);
                    HTEmpBillpaysheet.Add("@clientid", ddlclientid.SelectedValue);
                    HTEmpBillpaysheet.Add("@month", month);
                    HTEmpBillpaysheet.Add("@lastday", DtLastDay);
                    #endregion End Code For  Assign Values To the Variable  as on [18-03-2014]

                    #region Begin Code For Calling Stored procedure as on [18-03-2014]
                    DtEmpBillpaysheet = config.ExecuteAdaptorAsyncWithParams(SPName1, HTEmpBillpaysheet).Result;
                    #endregion  end Code For Calling Stored procedure as on [18-03-2014]


                }

                #endregion for insertion into empbillsheet

                #region Begin Code For Define & Assign Values To The Hash Table as on [08-03-2014]

                var BankName = "";
                var BankAccountNo = "";
                var IFSCCode = "";
                string SqlQrycompanyinfo = " select BankAccountNo,IFSCCode,BankName from CompanyInfo  where  ClientidPrefix  ='" + CmpIDPrefix + "'";
                DataTable dtcompanyinfo = config.ExecuteReaderWithQueryAsync(SqlQrycompanyinfo).Result;
                if (dtcompanyinfo.Rows.Count > 0)
                {
                    BankName = dtcompanyinfo.Rows[0]["BankName"].ToString();
                    BankAccountNo = dtcompanyinfo.Rows[0]["BankAccountNo"].ToString();
                    IFSCCode = dtcompanyinfo.Rows[0]["IFSCCode"].ToString();
                }
                Hashtable HTIMInvoice = new Hashtable();

                #region Begin Part One

                HTIMInvoice.Add("@ClientId", ClientId);
                HTIMInvoice.Add("@month", month);
                HTIMInvoice.Add("@ContractId", ContractId);
                HTIMInvoice.Add("@LastDay", DtLastDay);
                HTIMInvoice.Add("@Fromdate", Fromdate);
                HTIMInvoice.Add("@BankName", BankName);
                HTIMInvoice.Add("@BankAccountNo", BankAccountNo);
                HTIMInvoice.Add("@IFSCCode", IFSCCode);

                #endregion End Part One

                #region Begin  Part Two
                HTIMInvoice.Add("@Todate", Todate);
                HTIMInvoice.Add("@Duedate", Duedate);
                HTIMInvoice.Add("@BillDate", BillDate);
                HTIMInvoice.Add("@Gendays", Gendays);
                HTIMInvoice.Add("@G_Sdays", G_Sdays);
                #endregion End Part Two

                #region Begin Part Three

                HTIMInvoice.Add("@Extradatacheck", Extradatacheck);
                HTIMInvoice.Add("@Extradatastcheck", Extradatastcheck);
                HTIMInvoice.Add("@MaterialCost", MaterialCost);
                HTIMInvoice.Add("@MaintenanceCost", MaintenanceCost);
                HTIMInvoice.Add("@MachinaryCost", MachinaryCost);

                HTIMInvoice.Add("@Extraamountone", Extraamountone);
                HTIMInvoice.Add("@Extraamounttwo", Extraamounttwo);
                HTIMInvoice.Add("@Discount", Discount);
                HTIMInvoice.Add("@DiscountTwo", DiscountTwo);


                #endregion End Part Three

                #region Begin Part Four

                HTIMInvoice.Add("@MaterialCostTitle", MaterialCostTitle);
                HTIMInvoice.Add("@MachinaryCostTitle", MachinaryCostTitle);
                HTIMInvoice.Add("@MaintenanceCostTitle", MaintenanceCostTitle);
                HTIMInvoice.Add("@ExtraamountoneTitle", ExtraamountoneTitle);
                HTIMInvoice.Add("@ExtraamounttwoTitle", ExtraamounttwoTitle);
                HTIMInvoice.Add("@DiscountTitle", DiscountTitle);

                HTIMInvoice.Add("@DiscountTwoTitle", DiscountTwoTitle);
                HTIMInvoice.Add("@BillNum", BillNum);
                #endregion End Part Four

                #region Begin Part Five on 10/03/2014

                HTIMInvoice.Add("@STMachinary", STMachinary);
                HTIMInvoice.Add("@STMaterial", STMaterial);
                HTIMInvoice.Add("@STMaintenance", STMaintenance);
                HTIMInvoice.Add("@STExtraone", STExtraone);
                HTIMInvoice.Add("@STExtratwo", STExtratwo);



                HTIMInvoice.Add("@SCMachinary", SCMachinary);
                HTIMInvoice.Add("@SCMaterial", SCMaterial);
                HTIMInvoice.Add("@SCMaintenance", SCMaintenance);
                HTIMInvoice.Add("@SCExtraone", SCExtraone);
                HTIMInvoice.Add("@SCExtratwo", SCExtratwo);

                HTIMInvoice.Add("@STDiscountone", STDiscountone);
                HTIMInvoice.Add("@STDiscounttwo", STDiscounttwo);

                var remarkText = txtRemarks.Text;

                HTIMInvoice.Add("@Remarks", remarkText);

                #endregion

                #endregion Begin Code For Define & Assign Values To The Hash Table as on [08-03-2014]

                #region Begin Code For Calling Stored Procedure As on [08-05-2014]
                DataTable DtIMInvoice = config.ExecuteAdaptorAsyncWithParams(SPName, HTIMInvoice).Result;
                DisplayDataInGrid();
                #endregion End Code For Calling Stored Procedure As on [08-05-2014]



            }
            catch (Exception ex)
            {

            }
        }

        private string BillnoAutoGenrate(bool StType, string unitId, int month)
        {
            string billno = "00001";
            string strBillprefix = "select isnull(gst.BillPrefix,'') as BillPrefix from Clients c inner join GSTMaster gst on gst.Id=c.OurGSTIN where c.ClientId  = '" + unitId + "' ";
            DataTable dtBillPrefix = config.ExecuteReaderWithQueryAsync(strBillprefix).Result;
            string billPrefix = "";
            if (dtBillPrefix.Rows.Count > 0)
            {
                billPrefix = dtBillPrefix.Rows[0]["BillPrefix"].ToString();
            }
            string strQry = "Select BillNo from UnitBill where UnitId='" + unitId + "' And Month=" + month;
            DataTable noTable = config.ExecuteReaderWithQueryAsync(strQry).Result;
            if (noTable.Rows.Count > 0)
            {
                if (noTable.Rows[0]["billno"].ToString().Length > 0)
                {
                    billno = noTable.Rows[0]["billno"].ToString();
                }
            }
            else
            {
                if (StType)
                {

                    //string billPrefix = GlobalData.Instance.GetBillPrefix(false);
                    string billStartNo = GlobalData.Instance.GetBillStartingNo(false);
                    string billSeq = GlobalData.Instance.GetBillSequence();
                    billno = billPrefix + billSeq + "/" + billStartNo;

                    int startingNumberPart = billno.Length - 5 + 1;

                    string selectqueryclientid = "select MAX( RIGHT(billno,5)) as billno from unitbill where billno like '"
                      + billPrefix + "%" + billSeq + "%'";
                    DataTable dt = config.ExecuteReaderWithQueryAsync(selectqueryclientid).Result;
                    int BILLNO = 0;
                    int BILLNOMB = 0;
                    if (dt.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(dt.Rows[0]["billno"].ToString()) == false)
                            BILLNO = int.Parse(dt.Rows[0]["billno"].ToString());
                    }

                    string selectqueryclientidMB = "select MAX( RIGHT(billno,5)) as billno from Munitbill where billno like '"
                       + billPrefix + "%" + billSeq + "%'";
                    DataTable dtMB = config.ExecuteReaderWithQueryAsync(selectqueryclientidMB).Result;

                    if (dtMB.Rows.Count > 0)
                    {

                        if (String.IsNullOrEmpty(dtMB.Rows[0]["billno"].ToString()) == false)
                            BILLNOMB = int.Parse(dtMB.Rows[0]["billno"].ToString());
                    }

                    if (BILLNO > BILLNOMB)
                    {
                        billno = billPrefix + billSeq + (Convert.ToInt32(BILLNO) + 1).ToString("00000");
                    }
                    else
                    {
                        billno = billPrefix + billSeq + "/" + (Convert.ToInt32(BILLNOMB) + 1).ToString("00000");
                    }

                }
                else
                {
                    //string billPrefix = GlobalData.Instance.GetBillPrefix(true);
                    string billStartNo = GlobalData.Instance.GetBillStartingNo(true);
                    string billSeq = GlobalData.Instance.GetBillSequence();
                    billno = billSeq + "/" + billStartNo;
                    int startingNumberPart = billno.Length - 5 + 1;

                    string selectqueryclientid = "select MAX( RIGHT(billno,5)) as billno from unitbill where billno like '"
                       + billPrefix + "%" + billSeq + "%'";
                    DataTable dt = config.ExecuteReaderWithQueryAsync(selectqueryclientid).Result;
                    int BILLNO = 0;
                    int BILLNOMB = 0;
                    if (dt.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(dt.Rows[0]["billno"].ToString()) == false)
                            BILLNO = int.Parse(dt.Rows[0]["billno"].ToString());
                    }

                    string selectqueryclientidMB = "select MAX( RIGHT(billno,5)) as billno from Munitbill where billno like '"
                       + billPrefix + "%" + billSeq + "%'";
                    DataTable dtMB = config.ExecuteReaderWithQueryAsync(selectqueryclientidMB).Result;

                    if (dtMB.Rows.Count > 0)
                    {

                        if (String.IsNullOrEmpty(dtMB.Rows[0]["billno"].ToString()) == false)
                            BILLNOMB = int.Parse(dtMB.Rows[0]["billno"].ToString());
                    }

                    if (BILLNO > BILLNOMB)
                    {
                        billno = billPrefix + billSeq + "/" + (Convert.ToInt32(BILLNO) + 1).ToString("00000");
                    }
                    else
                    {
                        billno = billPrefix + billSeq + "/" + (Convert.ToInt32(BILLNOMB) + 1).ToString("00000");
                    }

                }
            }
            return billno;
        }

        protected void FillMonthDetails()
        {

            if (Chk_Month.Checked == true)
            {
                if (txtmonth.Text.Trim().Length == 0)
                {
                    return;
                }
                if (Timings.Instance.CheckEnteredDate(txtmonth.Text) == 1)
                {
                    return;
                }
            }
            else
            {
                if (ddlmonth.SelectedIndex == 0)
                {
                    return;
                }
            }


            DateTime DtLastDay = DateTime.Now;
            if (Chk_Month.Checked == false)
            {
                DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
            }
            if (Chk_Month.Checked == true)
            {
                DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
            }




            var ContractID = "";
            var bBillDates = 0;
            var ServiceTaxType = false;
            #region  Begin Get Contract Id Based on The Last Day


            Hashtable HtGetContractID = new Hashtable();
            var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
            HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
            HtGetContractID.Add("@LastDay", DtLastDay);
            DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

            if (DTContractID.Rows.Count > 0)
            {
                ContractID = DTContractID.Rows[0]["contractid"].ToString();
                bBillDates = int.Parse(DTContractID.Rows[0]["BillDates"].ToString());
                ServiceTaxType = bool.Parse(DTContractID.Rows[0]["ServiceTaxType"].ToString());

                string ContractStartDate = DTContractID.Rows[0]["ContractStartDate"].ToString();
                string ContractEndDate = DTContractID.Rows[0]["ContractEndDate"].ToString();
                string strBillDates = DTContractID.Rows[0]["BillDates"].ToString();

                DateTime CSdate = DateTime.Parse(ContractStartDate);
                DateTime CurrentDate = DateTime.Now.Date;
                DateTime lastDay = DateTime.Now.Date;
                int monval = GetMonthBasedOnSelectionDateorMonth();
                string mntchk = "0";
                if (monval.ToString().Length == 3)
                {
                    mntchk = monval.ToString().Substring(0, 1);

                }
                else if (monval.ToString().Length == 4)
                {
                    mntchk = monval.ToString().Substring(0, 2);

                }

                if (Chk_Month.Checked == false)
                {
                    if (ddlmonth.SelectedIndex == 1)
                    {
                        CurrentDate = CurrentDate.AddMonths(0);
                        lastDay = Timings.Instance.GetLastDayOfThisMonth();
                        txtyear.Text = GetMonthOfYear();
                    }
                    else if (ddlmonth.SelectedIndex == 2)
                    {
                        txtyear.Text = GetMonthOfYear();

                        if (CurrentDate.Month == 1)
                        {
                            CurrentDate = CurrentDate.AddMonths(11);
                            CurrentDate = CurrentDate.AddYears(-1);

                        }
                        else
                        {
                            CurrentDate = CurrentDate.AddMonths(-1);
                        }

                        lastDay = Timings.Instance.GetLastDayOfPreviousMonth();
                    }
                    else if (ddlmonth.SelectedIndex == 3)
                    {
                        txtyear.Text = GetMonthOfYear();
                        if (CurrentDate.Month == 2)
                        {
                            CurrentDate = CurrentDate.AddMonths(10);
                            CurrentDate = CurrentDate.AddYears(-1);
                        }
                        else
                        {
                            CurrentDate = CurrentDate.AddMonths(-2);
                        }

                        lastDay = Timings.Instance.GetLastDayOfPreviousOneMonth();
                    }
                    else if (ddlmonth.SelectedIndex == 4)
                    {
                        txtyear.Text = GetMonthOfYear();
                        if (CurrentDate.Month == 3)
                        {
                            CurrentDate = CurrentDate.AddMonths(9);
                            CurrentDate = CurrentDate.AddYears(-1);
                        }
                        else
                        {
                            CurrentDate = CurrentDate.AddMonths(-3);
                        }
                        lastDay = Timings.Instance.GetLastDayOfPreviousTwoMonth();
                    }
                }

                #region  Begin Old Code As on [02-03-2014]


                if (Chk_Month.Checked == true)
                {
                    DateTime sdate = DateTime.Now.Date;
                    int month = 0;
                    int year = 0;


                    if (txtmonth.Text.Trim().Length > 0)
                    {
                        sdate = DateTime.Parse(txtmonth.Text.Trim(), CultureInfo.GetCultureInfo("en-gb"));
                    }

                    month = sdate.Month;
                    year = sdate.Year;
                    DateTime finalday = new DateTime(sdate.Year, sdate.Month, DateTime.DaysInMonth(sdate.Year, sdate.Month));

                    CurrentDate = sdate;
                    lastDay = finalday;
                    txtyear.Text = year.ToString();
                }



                DateTime CEdate = DateTime.Parse(ContractEndDate);
                if (CSdate <= lastDay)
                {
                    if (bBillDates == 1)
                    {

                        if (CurrentDate.Month == 2 && (CSdate.Day > 28 || CSdate.Day > 29))
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month, 28).ToString("dd/MM/yyyy"));
                        }
                        if (CurrentDate.Month == 1)
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year, 12, CSdate.Day).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, CSdate.Day).ToString("dd/MM/yyyy"));

                        }
                        DateTime tempDate = CurrentDate.AddMonths(1);

                        if (CSdate.Day == 1)
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month, CSdate.Day).ToString("dd/MM/yyyy"));
                        }
                        else
                            if (CurrentDate.Month == 1)
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, 1, CSdate.Day - 1).ToString("dd/MM/yyyy"));
                        }
                        else
                                if (tempDate.Month == 1)
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, 12, CSdate.Day - 1).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month - 1, CSdate.Day - 1).ToString("dd/MM/yyyy"));
                        }

                    }
                    if (bBillDates == 0)
                    {
                        txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, 1).ToString("dd/MM/yyyy"));

                        if (CSdate.Day == 1)
                        {
                            txttodate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month)).ToString("dd/MM/yyyy"));
                        }
                        else
                        {
                            txttodate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, DateTime.DaysInMonth(CurrentDate.Year, CurrentDate.Month)).ToString("dd/MM/yyyy"));

                        }
                    }


                    if (bBillDates == 2)
                    {
                        if (CurrentDate.Month == 1)
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year - 1, 12, 26).ToString("dd/MM/yyyy"));
                        }
                        else

                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, 26).ToString("dd/MM/yyyy"));

                        DateTime tempDate = CurrentDate.AddMonths(1);

                        if (mntchk == "12")
                        {
                            tempDate = CurrentDate;
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month, 25).ToString("dd/MM/yyyy"));

                        }
                        else
                        {
                            if (tempDate.Month == 1)
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, 12, 25).ToString("dd/MM/yyyy"));
                            }
                            else
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month - 1, 25).ToString("dd/MM/yyyy"));
                            }
                        }

                    }


                    if (bBillDates == 3)
                    {
                        if (CurrentDate.Month == 1)
                        {
                            txtfromdate.Text = (new DateTime(CurrentDate.Year - 1, 12, 21).ToString("dd/MM/yyyy"));
                        }
                        else

                            txtfromdate.Text = (new DateTime(CurrentDate.Year, CurrentDate.Month - 1, 21).ToString("dd/MM/yyyy"));
                        DateTime tempDate = CurrentDate.AddMonths(1);

                        if (mntchk == "12")
                        {
                            tempDate = CurrentDate;
                            txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month, 20).ToString("dd/MM/yyyy"));

                        }
                        else
                        {
                            if (tempDate.Month == 1)
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, 12, 20).ToString("dd/MM/yyyy"));
                            }
                            else
                            {
                                txttodate.Text = (new DateTime(tempDate.Year, tempDate.Month - 1, 20).ToString("dd/MM/yyyy"));
                            }
                        }

                    }




                    //if (CurrentDate.Month/* - 1*/ == CSdate.Month && CurrentDate.Year == CSdate.Year)
                    //{
                    //    DateTime date = new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, CSdate.Day);
                    //    txtfromdate.Text = date.ToString("dd/MM/yyyy");
                    //}
                    if (CurrentDate.Month/* - 1*/ == CEdate.Month && CurrentDate.Year == CEdate.Year)
                    {
                        DateTime date = DateTime.Now.Date;
                        if (CSdate.Day == 1)
                        {
                            date = new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, CEdate.Day);
                        }
                        else
                        {
                            date = new DateTime(CurrentDate.Year, CurrentDate.Month/* - 1*/, CEdate.Day - 1);

                        }

                        txttodate.Text = date.ToString("dd/MM/yyyy");
                    }
                    btngenratepayment.Enabled = true;
                    btninvoice.Enabled = true;
                }
                else
                {
                    btngenratepayment.Enabled = false;
                    btninvoice.Enabled = false;
                    //LblResult.Text = "There Is No Valid Contract for this month";
                    ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There Is No Valid Contract for this month ');", true);

                }


                #endregion End Old Code As on [02-03-2014]


            }
            else
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "", "alert('Contract Details Are Not  Avaialable For This Client.');", true);
                return;
            }

            #endregion  End Get Contract Id Based on The Last Day
        }

        protected void btndownloadpdffile_Click(object sender, EventArgs e)
        {
            //if (ddlpaymenttype.SelectedIndex == 0)
            //{
            btnmhb_Click(sender, e);
            return;
            //}

            //if (ddlpaymenttype.SelectedIndex == 1)
            //{
            //    btnall_Click(sender, e);
            //    return;
            //}
        }

        protected void btnmhb_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);
                    PageEventHelper pageEventHelper = new PageEventHelper();
                    writer.PageEvent = pageEventHelper;
                    document.Open();
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }
                    var ContractID = "";


                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();

                    }
                    #endregion

                    string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteAdaptorAsyncWithQueryParams(SqlQuryForServiCharge).Result;
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                    }
                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/BillLogo.png");
                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(70f);
                        gif2.SetAbsolutePosition(34f, 755f);
                        //document.Add(new Paragraph(" "));
                        document.Add(gif2);
                    }

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 350f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);


                    //tablelogo.AddCell(celll);
                    PdfPCell CCompName = new PdfPCell(new Paragraph(companyName, FontFactory.GetFont(FontStyle, 18, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 1;
                    CCompName.Border = 0;
                    CCompName.Colspan = 2;
                    CCompName.PaddingTop = -20;
                    tablelogo.AddCell(CCompName);

                    PdfPCell CCompAddress = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.Border = 0;
                    CCompAddress.Colspan = 2;
                    tablelogo.AddCell(CCompAddress);

                    PdfPCell cellline = new PdfPCell(new Paragraph(companyaddressline, FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellline.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellline.Border = 0;
                    cellline.Colspan = 2;
                    tablelogo.AddCell(cellline);
                    //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celll.Border = 0;
                    celll.Colspan = 2;
                    tablelogo.AddCell(celll);
                    //tablelogo.AddCell(celll);

                    // tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 18, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.PaddingTop = 30;
                    CInvoice.Border = 0;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);

                    PdfPTable address = new PdfPTable(2);
                    address.TotalWidth = 500f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(1);
                    tempTable1.TotalWidth = 250f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 1f };
                    tempTable1.SetWidths(tempWidth1);

                    string selectclientaddress = "select * from clients where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteAdaptorAsyncWithQueryParams(selectclientaddress).Result;

                    string Unitbillbreakup = "select sum(isnull(BasicDA,0)) as BasicDA ,sum(isnull(Basic,0)) as Basic,sum(isnull(Da,0)) as DA,sum(isnull(HRA,0)) as HRA,sum(isnull(Conveyance,0)) as Conveyance,sum(isnull(WashAllowance,0)) as WashAllowance, " +
                                                "sum(isnull(OtherAllowance,0)) as OtherAllowance,sum(isnull(ServiceCharges,0)) as ServiceCharges,sum(isnull(bonus,0)) as bonus,sum(isnull(AttendanceAllowance,0)) as AttendanceAllowance,sum(isnull(Arrears,0)) as Arrears, " +
                                                "sum(isnull(ESITotal,0)) as ESITotal,sum(isnull(Encashamt,0)) as Encashamt,sum(PF) as PF,sum(ESI) as ESI from UnitBillBreakup where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtUnitbillbreakup = config.ExecuteAdaptorAsyncWithQueryParams(Unitbillbreakup).Result;

                    float totalbasic = 0;
                    float totalhra = 0;
                    float totalconveyance = 0;
                    float totalotherallowance = 0;
                    float AttendanceAllowance = 0;
                    float TotalWashingAllowance = 0;
                    float Totalbonus = 0;
                    float TotalEnchashement = 0;
                    float BillTotal = 0;
                    float esitotal = 0;
                    float esiempr = 0;
                    float pfempr = 0;
                    float managementfee = 0;
                    float Arrears = 0;

                    if (DtUnitbillbreakup.Rows.Count > 0)
                    {
                        totalbasic = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Basic"].ToString());
                        totalhra = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["HRA"].ToString());
                        totalconveyance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Conveyance"].ToString());
                        totalotherallowance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["OtherAllowance"].ToString());
                        AttendanceAllowance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["AttendanceAllowance"].ToString());
                        TotalWashingAllowance = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["WashAllowance"].ToString());
                        Totalbonus = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["bonus"].ToString());
                        TotalEnchashement = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Encashamt"].ToString());
                        BillTotal = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["BasicDA"].ToString());
                        esitotal = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["ESITotal"].ToString());
                        esiempr = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["PF"].ToString());
                        pfempr = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["ESI"].ToString());
                        managementfee = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["ServiceCharges"].ToString());
                        Arrears = Convert.ToSingle(DtUnitbillbreakup.Rows[0]["Arrears"].ToString());

                    }


                    string SelectBillNo = "Select * from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;
                    string BillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                        {
                            RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }



                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();

                    PdfPCell cell11 = new PdfPCell(new Paragraph("To,", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell11.Border = 0;
                    tempTable1.AddCell(cell11);
                    string addressData = "";

                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                               //clientaddrhno.Colspan = 0;
                        clientaddrhno.Border = 0;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.Border = 0;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 2;
                        clientcolony.Border = 0;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 2;
                        clientcity.Border = 0;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 2;
                        clientstate.Border = 0;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 2;
                        clietnpin.Border = 0;
                        tempTable1.AddCell(clietnpin);
                    }
                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(1);
                    tempTable2.TotalWidth = 250f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f };
                    tempTable2.SetWidths(tempWidth2);

                    //Blank Field for Space
                    PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell12.Border = 0;
                    tempTable2.AddCell(cell12);

                    PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No: " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell13.Border = 0;
                    tempTable2.AddCell(cell13);

                    PdfPCell cell14 = new PdfPCell(new Paragraph("Date: " + BillDate.Day.ToString("00") + "/" + BillDate.Month.ToString("00") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cell14.Border = 0;
                    tempTable2.AddCell(cell14);

                    //PdfPCell cell15 = new PdfPCell(new Paragraph("Due Date: " + DueDate.Day.ToString("00") + "/" + DueDate.Month.ToString("00") + "/" +
                    //DueDate.Year, FontFactory.GetFont(FontStyle, 13, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    // tempTable2.AddCell(cell15);


                    //PdfPCell cell15 = new PdfPCell(new Paragraph("For Month: " + GetMonthName() + " - " + GetMonthOfYear() +
                    //    "      ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    //cell15.Border = 0;
                    //tempTable2.AddCell(cell15);

                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    address.AddCell(celll);


                    document.Add(address);

                    PdfPTable bodytablelogo = new PdfPTable(2);
                    bodytablelogo.TotalWidth = 500f;//600f
                    bodytablelogo.LockedWidth = true;
                    float[] widthlogo = new float[] { 2f, 2f };
                    bodytablelogo.SetWidths(widthlogo);


                    //PdfPCell cell9 = new PdfPCell(new Phrase("Unit Name : " + dtclientaddress.Rows[0]["clientname"].ToString(),
                    //    FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    //cell9.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell9.Colspan = 2;
                    //cell9.Border = 0;
                    //bodytablelogo.AddCell(cell9);

                    //string Fromdate = txtfromdate.Text;
                    //string Todate = txttodate.Text;

                    //PdfPCell cell10 = new PdfPCell(new Phrase("Bill From : " + Fromdate + "  to  " +
                    //    Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell10.Colspan = 2;
                    //cell10.Border = 0;
                    //bodytablelogo.AddCell(cell10);
                    //bodytablelogo.AddCell(celll);

                    //PdfPCell cell19 = new PdfPCell(new Phrase("Dear Sir, ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell19.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell19.Colspan = 2;
                    //cell19.Border = 0;
                    //bodytablelogo.AddCell(cell19);
                    //bodytablelogo.AddCell(celll);

                    //PdfPCell cell20 = new PdfPCell(new Phrase(strDescription, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell20.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell20.Colspan = 2;
                    //cell20.Border = 0;
                    //bodytablelogo.AddCell(cell20);
                    //bodytablelogo.AddCell(celll);
                    //PdfPCell cell21 = new PdfPCell(new Phrase("The Details are given below: ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    //cell21.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    //cell21.Colspan = 1;
                    //cell21.Border = 0;
                    //bodytablelogo.AddCell(cell21);
                    //bodytablelogo.AddCell(celll);
                    ////bodytablelogo.AddCell(celll);
                    //document.Add(bodytablelogo);


                    PdfPTable tabled = new PdfPTable(3);
                    tabled.TotalWidth = 500f;//600f
                    tabled.LockedWidth = true;
                    float[] tabledwidths = new float[] { 0.5f, 6f, 2f };
                    tabled.SetWidths(tabledwidths);

                    PdfPCell cell9 = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell9.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cell9.Colspan = 0;
                    cell9.PaddingTop = 3;
                    cell9.PaddingBottom = 3;
                    //cell9.Border = 0;
                    tabled.AddCell(cell9);

                    PdfPCell cell10 = new PdfPCell(new Phrase("Particulars", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell10.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cell10.Colspan = 0;
                    cell10.PaddingTop = 3;
                    cell10.PaddingBottom = 3;
                    //cell10.Border = 0;
                    tabled.AddCell(cell10);

                    PdfPCell cellAmount = new PdfPCell(new Phrase("Amount", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmount.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellAmount.Colspan = 0;
                    cellAmount.PaddingTop = 3;
                    cellAmount.PaddingBottom = 3;
                    //cellAmount.Border = 0;
                    tabled.AddCell(cellAmount);


                    PdfPCell cellSno1 = new PdfPCell(new Phrase("1", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno1.Border = 0;
                    cellSno1.PaddingTop = 3;
                    cellSno1.PaddingBottom = 3;
                    tabled.AddCell(cellSno1);


                    PdfPCell celldesc = new PdfPCell(new Phrase("Amount Claimed on Kst/Service/Production Staff Rendered to " + ddlCname.SelectedItem.Text + "  for the month of " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc.PaddingTop = 3;
                    celldesc.PaddingBottom = 3;
                    celldesc.SetLeading(0.0f, 1.3f);
                    //celldesc.Border = 0;
                    tabled.AddCell(celldesc);

                    PdfPCell cellAmount1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmount1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                         //cellSno1.Border = 0;
                    cellAmount1.PaddingTop = 3;
                    cellAmount1.PaddingBottom = 3;
                    tabled.AddCell(cellAmount1);

                    PdfPCell cellSno2 = new PdfPCell(new Phrase("A", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellSno2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno2.Border = 0;
                    cellSno2.PaddingTop = 3;
                    cellSno2.PaddingBottom = 3;
                    tabled.AddCell(cellSno2);


                    PdfPCell celldesc2 = new PdfPCell(new Phrase("Monthly Payments ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc2.Colspan = 2;
                    celldesc2.PaddingTop = 3;
                    celldesc2.PaddingBottom = 3;
                    //celldesc2.Border = 0;
                    tabled.AddCell(celldesc2);


                    PdfPCell cellSno3 = new PdfPCell(new Phrase("1", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno3.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno3.Border = 0;
                    cellSno3.PaddingTop = 3;
                    cellSno3.PaddingBottom = 3;
                    tabled.AddCell(cellSno3);


                    PdfPCell celldesc3 = new PdfPCell(new Phrase("Total Basic", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc3.Colspan = 0;
                    celldesc3.PaddingTop = 3;
                    celldesc3.PaddingBottom = 3;
                    // celldesc3.Border = 0;
                    tabled.AddCell(celldesc3);

                    PdfPCell cellAmt1 = new PdfPCell(new Phrase(totalbasic.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      // cellAmt1.Border = 0;
                    cellAmt1.PaddingTop = 3;
                    cellAmt1.PaddingBottom = 3;
                    tabled.AddCell(cellAmt1);

                    PdfPCell cellSno4 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno4.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno4.Border = 0;
                    cellSno4.PaddingTop = 3;
                    cellSno4.PaddingBottom = 3;
                    tabled.AddCell(cellSno4);


                    PdfPCell celldesc4 = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc4.Colspan = 0;
                    //celldesc4.Border = 0;
                    celldesc4.PaddingTop = 3;
                    celldesc4.PaddingBottom = 3;
                    tabled.AddCell(celldesc4);

                    PdfPCell cellAmt2 = new PdfPCell(new Phrase(totalhra.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      //cellAmt2.Border = 0;
                    cellAmt2.PaddingTop = 3;
                    cellAmt2.PaddingBottom = 3;
                    tabled.AddCell(cellAmt2);

                    PdfPCell cellSno5 = new PdfPCell(new Phrase("3", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno5.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno5.Border = 0;
                    cellSno5.PaddingTop = 3;
                    cellSno5.PaddingBottom = 3;
                    tabled.AddCell(cellSno5);


                    PdfPCell celldesc5 = new PdfPCell(new Phrase("Total Conveyance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                       //celldesc5.Border = 0;
                    celldesc5.PaddingTop = 3;
                    celldesc5.PaddingBottom = 3;
                    tabled.AddCell(celldesc5);

                    PdfPCell cellAmt3 = new PdfPCell(new Phrase(totalconveyance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      //cellAmt3.Border = 0;
                    cellAmt3.PaddingTop = 3;
                    cellAmt3.PaddingBottom = 3;
                    tabled.AddCell(cellAmt3);


                    PdfPCell cellSno6 = new PdfPCell(new Phrase("4", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno6.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno6.Border = 0;
                    cellSno6.PaddingTop = 3;
                    cellSno6.PaddingBottom = 3;
                    tabled.AddCell(cellSno6);


                    PdfPCell celldesc6 = new PdfPCell(new Phrase("Total Attendance Allowance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                       //celldesc6.Border = 0;
                    celldesc6.PaddingTop = 3;
                    celldesc6.PaddingBottom = 3;
                    tabled.AddCell(celldesc6);

                    PdfPCell cellAmt4 = new PdfPCell(new Phrase(AttendanceAllowance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      //cellAmt4.Border = 0;
                    cellAmt4.PaddingTop = 3;
                    cellAmt4.PaddingBottom = 3;
                    tabled.AddCell(cellAmt4);


                    PdfPCell cellSno7 = new PdfPCell(new Phrase("5", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno7.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno7.Border = 0;
                    cellSno7.PaddingTop = 3;
                    cellSno7.PaddingBottom = 3;
                    tabled.AddCell(cellSno7);


                    PdfPCell celldesc7 = new PdfPCell(new Phrase("Other Allowance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                       //celldesc7.Border = 0;
                    celldesc7.PaddingTop = 3;
                    celldesc7.PaddingBottom = 3;
                    tabled.AddCell(celldesc7);

                    PdfPCell cellAmt5 = new PdfPCell(new Phrase(totalotherallowance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt5.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      //cellAmt5.Border = 0;
                    cellAmt5.PaddingTop = 3;
                    cellAmt5.PaddingBottom = 3;
                    tabled.AddCell(cellAmt5);

                    PdfPCell cellSno8 = new PdfPCell(new Phrase("6", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno8.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      //cellSno8.Border = 0;
                    cellSno8.PaddingTop = 3;
                    cellSno8.PaddingBottom = 3;
                    tabled.AddCell(cellSno8);


                    PdfPCell celldesc8 = new PdfPCell(new Phrase("Arreas", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc8.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                       //celldesc8.Border = 0;
                    celldesc8.PaddingTop = 3;
                    celldesc8.PaddingBottom = 3;
                    tabled.AddCell(celldesc8);

                    PdfPCell cellAmt6 = new PdfPCell(new Phrase(Arrears.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt6.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      // cellAmt6.Border = 0;
                    cellAmt6.PaddingTop = 3;
                    cellAmt6.PaddingBottom = 3;
                    tabled.AddCell(cellAmt6);

                    PdfPCell cellSno9 = new PdfPCell(new Phrase("7", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno9.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                      // cellSno9.Border = 0;
                    cellSno9.PaddingTop = 3;
                    cellSno9.PaddingBottom = 3;
                    tabled.AddCell(cellSno9);


                    PdfPCell celldesc9 = new PdfPCell(new Phrase("Washing Allowance", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc9.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                       //celldesc9.Border = 0;
                    celldesc9.PaddingTop = 3;
                    celldesc9.PaddingBottom = 3;
                    tabled.AddCell(celldesc9);

                    PdfPCell cellAmt7 = new PdfPCell(new Phrase(TotalWashingAllowance.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt7.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      //cellAmt7.Border = 0;
                    cellAmt7.PaddingTop = 3;
                    cellAmt7.PaddingBottom = 3;
                    tabled.AddCell(cellAmt7);


                    PdfPCell cellSno10 = new PdfPCell(new Phrase("8", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno10.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno10.Border = 0;
                    cellSno10.PaddingTop = 3;
                    cellSno10.PaddingBottom = 3;
                    tabled.AddCell(cellSno10);


                    PdfPCell celldesc10 = new PdfPCell(new Phrase("Total Statutory Bonus", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc10.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                        //celldesc10.Border = 0;
                    celldesc10.PaddingTop = 3;
                    celldesc10.PaddingBottom = 3;
                    tabled.AddCell(celldesc10);

                    PdfPCell cellAmt8 = new PdfPCell(new Phrase(Totalbonus.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt8.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      //cellAmt8.Border = 0;
                    cellAmt8.PaddingTop = 3;
                    cellAmt8.PaddingBottom = 3;
                    tabled.AddCell(cellAmt8);

                    PdfPCell cellSno11 = new PdfPCell(new Phrase("9", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno11.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno11.Border = 0;
                    cellSno11.PaddingTop = 3;
                    cellSno11.PaddingBottom = 3;
                    tabled.AddCell(cellSno11);


                    PdfPCell celldesc11 = new PdfPCell(new Phrase("Total EL Encashment", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                        //celldesc11.Border = 0;
                    celldesc11.PaddingTop = 3;
                    celldesc11.PaddingBottom = 3;
                    tabled.AddCell(celldesc11);

                    PdfPCell cellAmt9 = new PdfPCell(new Phrase(TotalEnchashement.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt9.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                      //cellAmt9.Border = 0;
                    cellAmt9.PaddingTop = 3;
                    cellAmt9.PaddingBottom = 3;
                    tabled.AddCell(cellAmt9);

                    PdfPCell cellSno12 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno12.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno12.Border = 0;
                    cellSno12.PaddingTop = 3;
                    cellSno12.PaddingBottom = 3;
                    tabled.AddCell(cellSno12);


                    PdfPCell celldesc12 = new PdfPCell(new Phrase("TOTAL", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc12.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                        //celldesc12.Border = 0;
                    celldesc12.PaddingTop = 3;
                    celldesc12.PaddingBottom = 3;
                    tabled.AddCell(celldesc12);

                    PdfPCell cellAmt10 = new PdfPCell(new Phrase(BillTotal.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt10.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                       //cellAmt10.Border = 0;
                    cellAmt10.PaddingTop = 3;
                    cellAmt10.PaddingBottom = 3;
                    tabled.AddCell(cellAmt10);

                    PdfPCell cellSno13 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno13.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno13.Border = 0;
                    cellSno13.PaddingTop = 3;
                    cellSno13.PaddingBottom = 3;
                    tabled.AddCell(cellSno13);


                    PdfPCell celldesc13 = new PdfPCell(new Phrase("ESI TOTAL", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                        //celldesc13.Border = 0;
                    celldesc13.PaddingTop = 3;
                    celldesc13.PaddingBottom = 3;
                    tabled.AddCell(celldesc13);

                    PdfPCell cellAmt11 = new PdfPCell(new Phrase(esitotal.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt11.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                       //cellAmt11.Border = 0;
                    cellAmt11.PaddingTop = 3;
                    cellAmt11.PaddingBottom = 3;
                    tabled.AddCell(cellAmt11);


                    PdfPCell cellSno14 = new PdfPCell(new Phrase("B", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellSno14.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno14.Border = 0;
                    cellSno14.PaddingTop = 3;
                    cellSno14.PaddingBottom = 3;
                    tabled.AddCell(cellSno14);


                    PdfPCell celldesc14 = new PdfPCell(new Phrase("Statutory & Reimbursement", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc14.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc14.Colspan = 2;
                    // celldesc14.Border = 0;
                    celldesc14.PaddingTop = 3;
                    celldesc14.PaddingBottom = 3;
                    tabled.AddCell(celldesc14);


                    PdfPCell cellSno15 = new PdfPCell(new Phrase("1", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno15.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno15.Border = 0;
                    cellSno15.PaddingTop = 3;
                    cellSno15.PaddingBottom = 3;
                    tabled.AddCell(cellSno15);


                    PdfPCell celldesc15 = new PdfPCell(new Phrase("Esic @ 4.75%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc15.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc15.Colspan = 0;
                    // celldesc15.Border = 0;
                    celldesc15.PaddingTop = 3;
                    celldesc15.PaddingBottom = 3;
                    tabled.AddCell(celldesc15);

                    PdfPCell cellAmt12 = new PdfPCell(new Phrase(esiempr.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                       //cellAmt12.Border = 0;
                    cellAmt12.PaddingTop = 3;
                    cellAmt12.PaddingBottom = 3;
                    tabled.AddCell(cellAmt12);

                    PdfPCell cellSno16 = new PdfPCell(new Phrase("2", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno16.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno16.Border = 0;
                    cellSno16.PaddingTop = 3;
                    cellSno16.PaddingBottom = 3;
                    tabled.AddCell(cellSno16);


                    PdfPCell celldesc16 = new PdfPCell(new Phrase("EPF @ 13.36%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc16.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    celldesc16.Colspan = 0;
                    //celldesc16.Border = 0;
                    celldesc16.PaddingTop = 3;
                    celldesc16.PaddingBottom = 3;
                    tabled.AddCell(celldesc16);

                    PdfPCell cellAmt13 = new PdfPCell(new Phrase(pfempr.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                       //cellAmt13.Border = 0;
                    cellAmt13.PaddingTop = 3;
                    cellAmt13.PaddingBottom = 3;
                    tabled.AddCell(cellAmt13);

                    PdfPCell cellSno17 = new PdfPCell(new Phrase("3", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno17.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno17.Border = 0;
                    cellSno17.PaddingTop = 3;
                    cellSno17.PaddingBottom = 3;
                    tabled.AddCell(cellSno17);


                    PdfPCell celldesc17 = new PdfPCell(new Phrase("Management Fees", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    celldesc17.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                        //celldesc17.Border = 0;
                    celldesc17.PaddingTop = 3;
                    celldesc17.PaddingBottom = 3;
                    tabled.AddCell(celldesc17);

                    PdfPCell cellAmt14 = new PdfPCell(new Phrase(managementfee.ToString(), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellAmt14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                       //cellAmt14.Border = 0;
                    cellAmt14.PaddingTop = 3;
                    cellAmt14.PaddingBottom = 3;
                    tabled.AddCell(cellAmt14);

                    PdfPCell cellSno18 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellSno18.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno18.Border = 0;
                    cellSno18.PaddingTop = 3;
                    cellSno18.PaddingBottom = 3;
                    tabled.AddCell(cellSno18);

                    float TotalB = managementfee + pfempr + esiempr;

                    PdfPCell celldesc18 = new PdfPCell(new Phrase("TOTAL (B)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc18.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                        //celldesc18.Border = 0;
                    celldesc18.PaddingTop = 3;
                    celldesc18.PaddingBottom = 3;
                    tabled.AddCell(celldesc18);

                    PdfPCell cellAmt15 = new PdfPCell(new Phrase(TotalB.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                       //cellAmt15.Border = 0;
                    cellAmt15.PaddingTop = 3;
                    cellAmt15.PaddingBottom = 3;
                    tabled.AddCell(cellAmt15);

                    PdfPCell cellSno19 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellSno19.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                       //cellSno19.Border = 0;
                    cellSno19.PaddingTop = 3;
                    cellSno19.PaddingBottom = 3;
                    tabled.AddCell(cellSno19);

                    PdfPCell celldesc19 = new PdfPCell(new Phrase("TOTAL (A + B)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    celldesc19.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                                        //celldesc19.Border = 0;
                    celldesc19.PaddingTop = 3;
                    celldesc19.PaddingBottom = 3;
                    tabled.AddCell(celldesc19);

                    float TotalAB = BillTotal + TotalB;

                    PdfPCell cellAmt16 = new PdfPCell(new Phrase(TotalAB.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellAmt16.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                                       //cellAmt16.Border = 0;
                    cellAmt16.PaddingTop = 3;
                    cellAmt16.PaddingBottom = 3;
                    tabled.AddCell(cellAmt16);

                    document.Add(tabled);




                    PdfPTable tablecon = new PdfPTable(2);
                    tablecon.TotalWidth = 500f;
                    tablecon.LockedWidth = true;
                    float[] widthcon = new float[] { 2f, 2f };
                    tablecon.SetWidths(widthcon);

                    PdfPCell cellBreak = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 15, Font.NORMAL, BaseColor.BLACK)));
                    cellBreak.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellBreak.Colspan = 2;
                    cellBreak.BorderWidthBottom = 0;
                    cellBreak.BorderWidthLeft = .5f;
                    cellBreak.BorderWidthTop = 0;
                    cellBreak.BorderWidthRight = .5f;
                    //cellBreak.Border = 0;
                    tablecon.AddCell(cellBreak);

                    string gtotal = NumberToEnglish.Instance.changeNumericToWords(TotalAB.ToString("#"));

                    PdfPCell cellcamt = new PdfPCell(new Phrase(" Grand Total is Rs. " + TotalAB.ToString("#") + " (Rupees " + gtotal.ToString() + "Only)", FontFactory.GetFont(FontStyle, 10, Font.BOLDITALIC, BaseColor.BLACK)));
                    cellcamt.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellcamt.Colspan = 2;
                    cellcamt.BorderWidthBottom = 0;
                    cellcamt.BorderWidthLeft = .5f;
                    cellcamt.BorderWidthTop = 0;
                    cellcamt.BorderWidthRight = .5f;
                    //cellcamt.Border = 1;
                    tablecon.AddCell(cellcamt);
                    tablecon.AddCell(cellBreak);

                    string Servicetax = string.Empty;
                    string PANNO = string.Empty;
                    string PFNo = string.Empty;
                    string Esino = string.Empty;
                    string PTno = string.Empty;

                    if (compInfo.Rows.Count > 0)
                    {
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        PTno = compInfo.Rows[0]["bankname"].ToString();
                    }

                    if (Servicetax.Trim().Length > 0)
                    {
                        PdfPCell cellc6 = new PdfPCell(new Phrase("SERVICE TAX NO: " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc6.Colspan = 7;
                        cellc6.BorderWidthBottom = 0;
                        cellc6.BorderWidthLeft = .5f;
                        cellc6.BorderWidthTop = .5f;
                        cellc6.BorderWidthRight = .5f;
                        //cellc6.Border = 0;
                        tablecon.AddCell(cellc6);
                    }



                    if (PANNO.Trim().Length > 0)
                    {
                        PdfPCell cellc7 = new PdfPCell(new Phrase("PAN NO: " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        cellc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cellc7.Colspan = 7;
                        cellc7.BorderWidthBottom = .5f;
                        cellc7.BorderWidthLeft = .5f;
                        cellc7.BorderWidthTop = 0;
                        cellc7.BorderWidthRight = .5f;
                        //cellc7.Border = 0;
                        tablecon.AddCell(cellc7);
                    }
                    if (PFNo.Trim().Length > 0)
                    {
                        PdfPCell Pfno = new PdfPCell(new Phrase("EPF NO: " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Pfno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Pfno.Colspan = 7;
                        Pfno.BorderWidthBottom = .5f;
                        Pfno.BorderWidthLeft = .5f;
                        Pfno.BorderWidthTop = 0;
                        Pfno.BorderWidthRight = .5f;
                        //Pfno.Border = 0;
                        tablecon.AddCell(Pfno);
                    }

                    if (Esino.Trim().Length > 0)
                    {
                        PdfPCell ESino = new PdfPCell(new Phrase("ESIC NO: " + Esino, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        ESino.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        ESino.Colspan = 7;
                        ESino.BorderWidthBottom = .5f;
                        ESino.BorderWidthLeft = .5f;
                        ESino.BorderWidthTop = 0;
                        ESino.BorderWidthRight = .5f;
                        //ESino.Border = 0;
                        tablecon.AddCell(ESino);
                    }

                    if (PTno.Trim().Length > 0)
                    {
                        PdfPCell Ptno = new PdfPCell(new Phrase("P Tax No: " + PTno, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                        Ptno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Ptno.Colspan = 7;
                        Ptno.BorderWidthBottom = .5f;
                        Ptno.BorderWidthLeft = .5f;
                        Ptno.BorderWidthTop = 0;
                        Ptno.BorderWidthRight = .5f;
                        //Ptno.Border = 0;
                        tablecon.AddCell(Ptno);
                    }

                    PdfPCell cellspace = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    cellspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellspace.Border = 0;
                    cellspace.Colspan = 2;
                    tablecon.AddCell(cellspace);
                    //tablecon.AddCell(cellspace);

                    PdfPCell cellnote = new PdfPCell(new Paragraph("NOTE", FontFactory.GetFont(FontStyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    cellnote.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellnote.Border = 0;
                    cellnote.Colspan = 2;
                    tablecon.AddCell(cellnote);


                    PdfPCell cellnote1 = new PdfPCell(new Paragraph("Service Tax 14%(100%)  payable  by service Receiver ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellnote1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellnote1.Border = 0;
                    cellnote1.Colspan = 2;
                    cellnote1.PaddingTop = 5;
                    tablecon.AddCell(cellnote1);

                    PdfPCell cellc41 = new PdfPCell(new Phrase("For " + companyName, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc41.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc41.Colspan = 7;
                    cellc41.Border = 0;
                    cellc41.PaddingTop = 10;
                    tablecon.AddCell(cellc41);

                    PdfPCell cellc4 = new PdfPCell(new Phrase("Authorized Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellc4.Colspan = 7;
                    cellc4.Border = 0;
                    cellc4.PaddingTop = 30;
                    tablecon.AddCell(cellc4);





                    document.Add(tablecon);
                    document.NewPage();
                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=Invoice.pdf");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void btnall_Click(object sender, EventArgs e)
        {

            int titleofdocumentindex = 0;
            if (ddlclientid.SelectedIndex <= 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "Showalert()", "alert('Please Select Client ID/Name')", true);
                return;
            }

            int payMonth = GetMonth(ddlmonth.SelectedValue);
            //int month = GetMonthAndYear();
            int month = GetMonthBasedOnSelectionDateorMonth();

            string selectmonth = string.Empty;
            string SelectmonthWithbankacno = string.Empty;
            string SelectmonthWithoutbankacno = string.Empty;
            DataTable dt = null;


            var clientid = ddlclientid.SelectedValue;
            var Paysheetoption = ddlpaymenttype.SelectedIndex;


            var SPName = "";
            Hashtable HTPaysheet = new Hashtable();
            SPName = "IMEBillpdfs";
            HTPaysheet.Add("@ClientId", clientid);
            HTPaysheet.Add("@month", month);
            HTPaysheet.Add("@PaymentOption", Paysheetoption);

            dt = SqlHelper.Instance.ExecuteStoredProcedureWithParams(SPName, HTPaysheet);

            MemoryStream ms = new MemoryStream();
            if (dt.Rows.Count > 0)
            {
                Document document = new Document(PageSize.LEGAL.Rotate());
                PdfWriter writer = PdfWriter.GetInstance(document, ms);
                document.Open();
                document.AddTitle("FaMS");
                document.AddAuthor("WebWonders");
                document.AddSubject("Wage Sheet");
                document.AddKeywords("Keyword1, keyword2, …");//
                float forConvert;

                string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                DataTable compInfo = SqlHelper.Instance.GetTableByQuery(strQry);
                string cmpname = "Your Company Name";
                string companyAddress = "Your Company Address";
                string Servicetax = string.Empty;
                string PANNO = string.Empty;
                string PFNo = string.Empty;
                string Esino = string.Empty;
                string PTno = string.Empty;


                if (compInfo.Rows.Count > 0)
                {
                    cmpname = compInfo.Rows[0]["CompanyName"].ToString();
                    companyAddress = compInfo.Rows[0]["Address"].ToString();
                    Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                    PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                    PFNo = compInfo.Rows[0]["PFNo"].ToString();
                    Esino = compInfo.Rows[0]["ESINo"].ToString();
                    PTno = compInfo.Rows[0]["bankname"].ToString();
                }

                #region Variables for table cells counting

                int dts = 0;
                int srate = 0;
                int basic = 0;
                int da = 0;
                int hra = 0;
                int cca = 0;
                int conveyance = 0;
                int washallowance = 0;
                int otherallowance = 0;
                int leavewages = 0;
                int gratuity = 0;
                int bonus = 0;
                int nfhs = 0;
                int rc = 0;
                int cs = 0;
                int gross = 0;
                int incentivs = 0;
                int pfonduties = 0;
                int esionduties = 0;
                int proftax = 0;
                int salAdvDed = 0;
                int uniformDed = 0;
                int otherDed = 0;
                int canteenAdv = 0;
                int penalty = 0;
                int totalDeductions = 0;
                int netpay = 0;

                int ots = 0;
                int otamt = 0;
                int wos = 0;
                int wosamt = 0;
                int nhs = 0;
                int nhsamt = 0;
                int pfonot = 0;
                int esionot = 0;
                int Pf = 0;
                int Esi = 0;


                float dts1 = 0;
                float srate1 = 0;
                float basic1 = 0;
                float da1 = 0;
                float hra1 = 0;
                float cca1 = 0;
                float conveyance1 = 0;
                float washallowance1 = 0;
                float otherallowance1 = 0;
                float leavewages1 = 0;
                float gratuity1 = 0;
                float bonus1 = 0;
                float nfhs1 = 0;
                float rc1 = 0;
                float cs1 = 0;
                float gross1 = 0;
                float incentivs1 = 0;
                float pfonduties1 = 0;
                float esionduties1 = 0;
                float proftax1 = 0;
                float salAdvDed1 = 0;
                float uniformDed1 = 0;
                float otherDed1 = 0;
                float canteenAdv1 = 0;
                float penalty1 = 0;
                float totalDeductions1 = 0;
                float netpay1 = 0;

                float ots1 = 0;
                float otamt1 = 0;
                float wos1 = 0;
                float wosamt1 = 0;
                float nhs1 = 0;
                float nhsamt1 = 0;
                float pfonot1 = 0;
                float esionot1 = 0;
                float Pf1 = 0;
                float Esi1 = 0;

                float esiempr = 0;
                float pfempr = 0;
                float Grandesiempr = 0;
                float Grandpfempr = 0;


                #endregion


                #region Data for counting tablecells

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    dts1 = float.Parse(dt.Rows[i]["NoOfDuties"].ToString());
                    if (dts1 != 0)
                    {
                        dts1 += 1;
                        if (dts1 > 0)
                        {
                            dts = 1;
                        }
                    }

                    srate1 = float.Parse(dt.Rows[i]["SalRate"].ToString());
                    if (srate1 != 0)
                    {
                        srate1 += 1;
                        if (srate1 > 0)
                        {
                            srate = 1;
                        }
                    }

                    basic1 = float.Parse(dt.Rows[i]["basic"].ToString());
                    if (basic1 != 0)
                    {
                        basic1 += 1;
                        if (basic1 > 0)
                        {
                            basic = 1;
                        }
                    }
                    da1 = float.Parse(dt.Rows[i]["da"].ToString());
                    if (da1 != 0)
                    {
                        da1 += 1;
                        if (da1 > 0)
                        {
                            da = 1;
                        }
                    }
                    hra1 = float.Parse(dt.Rows[i]["hra"].ToString());
                    if (hra1 != 0)
                    {
                        hra1 += 1;
                        if (hra1 > 0)
                        {
                            hra = 1;
                        }
                    }
                    cca1 = float.Parse(dt.Rows[i]["cca"].ToString());
                    if (cca1 != 0)
                    {
                        cca1 += 1;
                        if (cca1 > 0)
                        {
                            cca = 1;
                        }
                    }
                    conveyance1 = float.Parse(dt.Rows[i]["Conveyance"].ToString());
                    if (conveyance1 != 0)
                    {
                        conveyance1 += 1;
                        if (conveyance1 > 0)
                        {
                            conveyance = 1;
                        }
                    }

                    washallowance1 = float.Parse(dt.Rows[i]["washallowance"].ToString());
                    if (washallowance1 != 0)
                    {
                        washallowance1 += 1;
                        if (washallowance1 > 0)
                        {
                            washallowance = 1;
                        }
                    }
                    otherallowance1 = float.Parse(dt.Rows[i]["otherallowance"].ToString());
                    if (otherallowance1 != 0)
                    {
                        otherallowance1 += 1;
                        if (otherallowance1 > 0)
                        {
                            otherallowance = 1;
                        }
                    }
                    leavewages1 = float.Parse(dt.Rows[i]["Leavewages"].ToString());
                    if (leavewages1 != 0)
                    {
                        leavewages1 += 1;
                        if (leavewages1 > 0)
                        {
                            leavewages = 1;
                        }
                    }
                    gratuity1 = float.Parse(dt.Rows[i]["gratuity"].ToString());
                    if (gratuity1 != 0)
                    {
                        gratuity1 += 1;
                        if (gratuity1 > 0)
                        {
                            gratuity = 1;
                        }
                    }
                    bonus1 = float.Parse(dt.Rows[i]["bonus"].ToString());
                    if (bonus1 != 0)
                    {
                        bonus1 += 1;
                        if (bonus1 > 0)
                        {
                            bonus = 1;
                        }
                    }

                    nfhs1 = float.Parse(dt.Rows[i]["nfhs"].ToString());
                    if (nfhs1 != 0)
                    {
                        nfhs1 += 1;
                        if (nfhs1 > 0)
                        {
                            nfhs = 1;
                        }
                    }
                    rc1 = float.Parse(dt.Rows[i]["rc"].ToString());
                    if (rc1 != 0)
                    {
                        rc1 += 1;
                        if (rc1 > 0)
                        {
                            rc = 1;
                        }
                    }

                    cs1 = float.Parse(dt.Rows[i]["cs"].ToString());
                    if (cs1 != 0)
                    {
                        cs1 += 1;
                        if (cs1 > 0)
                        {
                            cs = 1;
                        }
                    }
                    gross1 = float.Parse(dt.Rows[i]["gross"].ToString());
                    if (gross1 != 0)
                    {
                        gross1 += 1;
                        if (gross1 > 0)
                        {
                            gross = 1;
                        }
                    }

                    incentivs1 = float.Parse(dt.Rows[i]["incentivs"].ToString());
                    if (incentivs1 != 0)
                    {
                        incentivs1 += 1;
                        if (incentivs1 > 0)
                        {
                            incentivs = 1;
                        }
                    }
                    //CHanged to zero so as to get PF and ESI in PFTotal and ESITotal as given below //Check PFTotal and ESITotal
                    pfonduties1 = float.Parse(dt.Rows[i]["PFonDuties"].ToString());
                    if (pfonduties1 != 0)
                    {
                        pfonduties1 += 1;
                        if (pfonduties1 > 0)
                        {
                            pfonduties = 0;
                        }
                    }
                    esionduties1 = float.Parse(dt.Rows[i]["ESIonduties"].ToString());
                    if (esionduties1 != 0)
                    {
                        esionduties1 += 1;
                        if (esionduties1 > 0)
                        {
                            esionduties = 0;
                        }
                    }
                    proftax1 = float.Parse(dt.Rows[i]["proftax"].ToString());
                    if (proftax1 != 0)
                    {
                        proftax1 += 1;
                        if (proftax1 > 0)
                        {
                            proftax = 1;
                        }
                    }
                    salAdvDed1 = float.Parse(dt.Rows[i]["salAdvDed"].ToString());
                    if (salAdvDed1 != 0)
                    {
                        salAdvDed1 += 1;
                        if (salAdvDed1 > 0)
                        {
                            salAdvDed = 1;
                        }
                    }
                    uniformDed1 = float.Parse(dt.Rows[i]["uniformDed"].ToString());
                    if (uniformDed1 != 0)
                    {
                        uniformDed1 += 1;
                        if (uniformDed1 > 0)
                        {
                            uniformDed = 1;
                        }
                    }
                    otherDed1 = float.Parse(dt.Rows[i]["otherDed"].ToString());
                    if (otherDed1 != 0)
                    {
                        otherDed1 += 1;
                        if (otherDed1 > 0)
                        {
                            otherDed = 1;
                        }
                    }
                    canteenAdv1 = float.Parse(dt.Rows[i]["canteenAdv"].ToString());
                    if (canteenAdv1 != 0)
                    {
                        canteenAdv1 += 1;
                        if (canteenAdv1 > 0)
                        {
                            canteenAdv = 1;
                        }
                    }

                    penalty1 = float.Parse(dt.Rows[i]["penalty"].ToString());
                    if (penalty1 != 0)
                    {
                        penalty1 += 1;
                        if (penalty1 > 0)
                        {
                            penalty = 1;
                        }
                    }
                    totalDeductions1 = float.Parse(dt.Rows[i]["Totaldeduct"].ToString());
                    if (totalDeductions1 != 0)
                    {
                        totalDeductions1 += 1;
                        if (totalDeductions1 > 0)
                        {
                            totalDeductions = 1;
                        }
                    }
                    netpay1 = float.Parse(dt.Rows[i]["NetAmount"].ToString());
                    if (netpay1 != 0)
                    {
                        netpay1 += 1;
                        if (netpay1 > 0)
                        {
                            netpay = 1;
                        }
                    }

                    ots1 = float.Parse(dt.Rows[i]["Duties"].ToString());
                    if (ots1 != 0)
                    {
                        ots1 += 1;
                        if (ots1 > 0)
                        {
                            ots = 1;
                        }
                    }

                    otamt1 = float.Parse(dt.Rows[i]["Amount"].ToString());
                    if (otamt1 != 0)
                    {
                        otamt1 += 1;
                        if (otamt1 > 0)
                        {
                            otamt = 1;
                        }
                    }

                    wos1 = float.Parse(dt.Rows[i]["Wo"].ToString());
                    if (wos1 != 0)
                    {
                        wos1 += 1;
                        if (wos1 > 0)
                        {
                            wos = 1;
                        }
                    }

                    wosamt1 = float.Parse(dt.Rows[i]["woamt"].ToString());
                    if (wosamt1 != 0)
                    {
                        wosamt1 += 1;
                        if (wosamt1 > 0)
                        {
                            wosamt = 1;
                        }
                    }

                    nhs1 = float.Parse(dt.Rows[i]["nhs"].ToString());
                    if (nhs1 != 0)
                    {
                        nhs1 += 1;
                        if (nhs1 > 0)
                        {
                            nhs = 1;
                        }
                    }
                    nhsamt1 = float.Parse(dt.Rows[i]["nhsamt"].ToString());
                    if (nhsamt1 != 0)
                    {
                        nhsamt1 += 1;
                        if (nhsamt1 > 0)
                        {
                            nhsamt = 1;
                        }
                    }

                    pfonot1 = float.Parse(dt.Rows[i]["PFONOT"].ToString());
                    if (pfonot1 != 0)
                    {
                        pfonot1 += 1;
                        if (pfonot1 > 0)
                        {
                            pfonot = 0;
                        }
                    }

                    esionot1 = float.Parse(dt.Rows[i]["ESIONOT"].ToString());
                    if (esionot1 != 0)
                    {
                        esionot1 += 1;
                        if (esionot1 > 0)
                        {
                            esionot = 0;
                        }
                    }

                    Pf1 = float.Parse(dt.Rows[i]["PFTotal"].ToString());
                    if (Pf1 != 0)
                    {
                        Pf1 += 1;
                        if (Pf1 > 0)
                        {
                            Pf = 1;
                        }
                    }
                    Esi1 = float.Parse(dt.Rows[i]["ESITotal"].ToString());
                    if (Esi1 != 0)
                    {
                        Esi1 += 1;
                        if (Esi1 > 0)
                        {
                            Esi = 1;
                        }
                    }


                }

                #endregion

                int sno = 1;
                int empid = 1;
                int empname = 1;
                int design = 1;
                int bankacno = 1;

                int tableCells = dts + srate + basic + da + hra + cca + conveyance + washallowance + otherallowance + leavewages +
                                gratuity + bonus + nfhs + rc + cs + gross + incentivs + pfonduties + esionduties + proftax +
                                salAdvDed + uniformDed + otherDed + canteenAdv + penalty + totalDeductions + netpay + sno + wos + wosamt + nhs + nhsamt +
                                empid + empname + design + ots + otamt + pfonot + esionot + Pf + Esi;




                #region variables for total

                float totalDuties = 0;
                float totalsrate = 0;
                float totalBasic = 0;
                float totalDA = 0;
                float totalHRA = 0;
                float totalCCA = 0;
                float totalConveyance = 0;
                float totalWA = 0;
                float totalOA = 0;
                float totalLw = 0;
                float totalGratuity = 0;
                float totalbonus = 0;
                float totalNfhs = 0;
                float totalRc = 0;
                float totalCs = 0;
                float totalGross = 0;
                float totalIncentivs = 0;
                float totalPFondts = 0;
                float totalESIondts = 0;
                float totalProfTax = 0;
                float totalSalAdv = 0;
                float totalUniforDed = 0;
                float totalOtherdedn = 0;
                float totalCanteenAdv = 0;
                float totalPenalty = 0;
                float totalDed = 0;
                float totalNetpay = 0;

                float totalots = 0;
                float totalotamt = 0;
                float totalwos = 0;
                float totalwosamt = 0;
                float totalnhs = 0;
                float totalnhsamt = 0;
                float totalpfonots = 0;
                float totalesionots = 0;
                float totalpf = 0;
                float totalesi = 0;


                #endregion

                #region variables for  Grand  total


                float GrandtotalDuties = 0;
                float GrandtotalSrate = 0;
                float GrandtotalBasic = 0;
                float GrandtotalDA = 0;
                float GrandtotalHRA = 0;
                float GrandtotalCCA = 0;
                float GrandtotalConveyance = 0;
                float GrandtotalWA = 0;
                float GrandtotalOA = 0;
                float GrandtotalLw = 0;
                float GrandtotalGratuity = 0;
                float Grandtotalbonus = 0;
                float GrandtotalNfhs = 0;
                float GrandtotalRc = 0;
                float GrandtotalCs = 0;
                float GrandtotalGross = 0;
                float GrandtotalIncentivs = 0;
                float GrandtotalPFondts = 0;
                float GrandtotalESIondts = 0;
                float GrandtotalProfTax = 0;
                float GrandtotalSalAdv = 0;
                float GrandtotalUniforDed = 0;
                float GrandtotalOtherdedn = 0;
                float GrandtotalCanteenAdv = 0;
                float GrandtotalPenalty = 0;
                float GrandtotalDed = 0;
                float GrandtotalNetpay = 0;

                float Grandtotalots = 0;
                float Grandtotalotamt = 0;
                float Grandtotalwos = 0;
                float Grandtotalwosamt = 0;
                float Grandtotalnhs = 0;
                float Grandtotalnhsamt = 0;
                float Grandtotalpfonots = 0;
                float Grandtotalesionots = 0;
                float Grandtotalpf = 0;
                float Grandtotalesi = 0;

                #endregion

                int nextpagerecordscount = 0;
                int targetpagerecors = 10;
                int secondpagerecords = targetpagerecors + 3;
                bool nextpagehasPages = false;
                int j = 0;
                PdfPTable SecondtablecheckbyFooter = null;
                PdfPTable SecondtableFooter = null;
                PdfPTable SecondtableGrandtotalFooter = null;
                for (int nextpagei = 0; nextpagei < dt.Rows.Count; nextpagei++)
                {
                    nextpagehasPages = true;


                    #region Titles of Document
                    PdfPTable Maintable = new PdfPTable(27);
                    if (tableCells > 20)
                    {
                        Maintable.TotalWidth = 980f;
                    }
                    else
                    {
                        Maintable.TotalWidth = 850f;
                    }
                    Maintable.LockedWidth = true;
                    float[] width = new float[] { 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f, 2f };


                    Maintable.SetWidths(width);
                    uint FONT_SIZE = 8;
                    string Fontstyle = "Verdana";

                    //Company Name & vage act details

                    PdfPCell cellemp = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cellemp.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    cellemp.Colspan = 27;
                    cellemp.Border = 0;



                    #endregion


                    #region Sub Headings

                    PdfPCell companyName = new PdfPCell(new Phrase(cmpname, FontFactory.GetFont("Arial Black", 20, Font.BOLD, BaseColor.BLACK)));
                    companyName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    companyName.Colspan = 27;
                    companyName.Border = 0;// 15;
                    Maintable.AddCell(companyName);

                    PdfPCell paySheet = new PdfPCell(new Phrase("BILL", FontFactory.GetFont(Fontstyle, 10, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                    paySheet.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    paySheet.Colspan = 27;
                    paySheet.Border = 0;// 15;
                    Maintable.AddCell(paySheet);

                    PdfPCell CClient = new PdfPCell(new Phrase("Client ID :   " + ddlclientid.SelectedValue, FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CClient.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClient.Colspan = 10;
                    CClient.Border = 0;// 15;
                    Maintable.AddCell(CClient);




                    PdfPCell CPayMonth = new PdfPCell(new Phrase("For the month of :   " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CPayMonth.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CPayMonth.Colspan = 10;
                    CPayMonth.Border = 0;// 15;
                    Maintable.AddCell(CPayMonth);


                    PdfPCell CClientName = new PdfPCell(new Phrase("Client Name :   " + ddlCname.SelectedItem + " ", FontFactory.GetFont(Fontstyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CClientName.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    CClientName.Colspan = 7;
                    CClientName.Border = 0;// 15;
                    Maintable.AddCell(CClientName);

                    Maintable.AddCell(cellemp);
                    //document.Add(Maintable);

                    if (titleofdocumentindex == 0)
                    {
                        document.Add(Maintable);
                        titleofdocumentindex = 1;
                    }

                    #endregion


                    #region Table Headings

                    PdfPTable SecondtableHeadings = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtableHeadings.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtableHeadings.TotalWidth = 850f;
                    }
                    SecondtableHeadings.LockedWidth = true;
                    float[] SecondHeadingsWidth = new float[] { };



                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
                    }

                    if (tableCells == 7)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondHeadingsWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion

                    SecondtableHeadings.SetWidths(SecondHeadingsWidth);

                    //Cell Headings
                    //1
                    PdfPCell sNo = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    sNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                                                 //sNo.Colspan = 1;
                    sNo.Border = 15;// 15;
                    SecondtableHeadings.AddCell(sNo);

                    //2
                    PdfPCell CEmpId = new PdfPCell(new Phrase("Emp Id", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpId.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpId.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpId);

                    //3
                    PdfPCell CEmpName = new PdfPCell(new Phrase("Emp Name", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CEmpName.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CEmpName.Border = 15;// 15;
                    SecondtableHeadings.AddCell(CEmpName);

                    //4
                    PdfPCell CDesgn = new PdfPCell(new Phrase("Desgn", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    CDesgn.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    CDesgn.Border = 15;
                    SecondtableHeadings.AddCell(CDesgn);

                    //5
                    if (dts != 0)
                    {
                        PdfPCell CDuties = new PdfPCell(new Phrase("Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CDuties.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CDuties.Border = 15;
                        SecondtableHeadings.AddCell(CDuties);
                    }

                    //6
                    if (ots != 0)
                    {
                        PdfPCell Cots = new PdfPCell(new Phrase("OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Cots.Border = 15;
                        SecondtableHeadings.AddCell(Cots);
                    }

                    if (wos != 0)
                    {
                        PdfPCell CWos = new PdfPCell(new Phrase("WOs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CWos.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CWos.Border = 15;
                        SecondtableHeadings.AddCell(CWos);
                    }

                    //8
                    if (nhs != 0)
                    {
                        PdfPCell CNHs = new PdfPCell(new Phrase("NHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNHs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNHs.Border = 15;
                        SecondtableHeadings.AddCell(CNHs);
                    }

                    //6A
                    if (srate != 0)
                    {
                        PdfPCell Cots = new PdfPCell(new Phrase("S. Rate", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cots.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Cots.Border = 15;
                        SecondtableHeadings.AddCell(Cots);
                    }


                    //7
                    if (basic != 0)
                    {
                        PdfPCell CBasic = new PdfPCell(new Phrase("Basic", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CBasic.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CBasic.Border = 15;
                        SecondtableHeadings.AddCell(CBasic);
                    }

                    //8
                    if (da != 0)
                    {
                        PdfPCell CDa = new PdfPCell(new Phrase("DA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CDa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CDa.Border = 15;
                        SecondtableHeadings.AddCell(CDa);
                    }

                    //9
                    if (hra != 0)
                    {
                        PdfPCell CHRa = new PdfPCell(new Phrase("HRA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CHRa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CHRa.Border = 15;
                        SecondtableHeadings.AddCell(CHRa);
                    }

                    //10
                    if (cca != 0)
                    {
                        PdfPCell CCca = new PdfPCell(new Phrase("CCA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CCca.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CCca.Border = 15;
                        SecondtableHeadings.AddCell(CCca);
                    }

                    //11
                    if (conveyance != 0)
                    {
                        PdfPCell Cconveyance = new PdfPCell(new Phrase("Conv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cconveyance.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Cconveyance.Border = 15;
                        SecondtableHeadings.AddCell(Cconveyance);
                    }

                    //12
                    if (washallowance != 0)
                    {
                        PdfPCell Cwa = new PdfPCell(new Phrase("WA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Cwa.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        Cwa.Border = 15;
                        SecondtableHeadings.AddCell(Cwa);
                    }

                    //13
                    if (otherallowance != 0)
                    {
                        PdfPCell COa = new PdfPCell(new Phrase("OA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        COa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        COa.Border = 15;
                        SecondtableHeadings.AddCell(COa);
                    }

                    //14
                    if (leavewages != 0)
                    {
                        PdfPCell CLa = new PdfPCell(new Phrase("LA", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CLa.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CLa.Border = 15;
                        SecondtableHeadings.AddCell(CLa);
                    }

                    //15
                    if (gratuity != 0)
                    {
                        PdfPCell CGratuity = new PdfPCell(new Phrase("Gratuity", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CGratuity.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CGratuity.Border = 15;
                        SecondtableHeadings.AddCell(CGratuity);
                    }

                    //16
                    if (bonus != 0)
                    {
                        PdfPCell CBonus = new PdfPCell(new Phrase("Bonus", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CBonus.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CBonus.Border = 15;
                        SecondtableHeadings.AddCell(CBonus);
                    }




                    //17
                    if (nfhs != 0)
                    {
                        PdfPCell CNfhs = new PdfPCell(new Phrase("NFHs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNfhs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNfhs.Border = 15;
                        SecondtableHeadings.AddCell(CNfhs);
                    }

                    //18
                    if (rc != 0)
                    {
                        PdfPCell CRc = new PdfPCell(new Phrase("R.C", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CRc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CRc.Border = 15;
                        SecondtableHeadings.AddCell(CRc);
                    }

                    //19
                    if (cs != 0)
                    {
                        PdfPCell CCs = new PdfPCell(new Phrase("C.S", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CCs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CCs.Border = 15;
                        SecondtableHeadings.AddCell(CCs);
                    }



                    //20
                    if (gross != 0)
                    {
                        PdfPCell CGross = new PdfPCell(new Phrase("Gross", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CGross.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CGross.Border = 15;
                        SecondtableHeadings.AddCell(CGross);
                    }

                    //21
                    if (otamt != 0)
                    {
                        PdfPCell COtamt = new PdfPCell(new Phrase("OT Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        COtamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        COtamt.Border = 15;
                        SecondtableHeadings.AddCell(COtamt);
                    }

                    if (wosamt != 0)
                    {
                        PdfPCell CWoamt = new PdfPCell(new Phrase("WO Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CWoamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CWoamt.Border = 15;
                        SecondtableHeadings.AddCell(CWoamt);
                    }

                    //26
                    if (nhsamt != 0)
                    {
                        PdfPCell CNHsamt = new PdfPCell(new Phrase("NHs Amt", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNHsamt.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNHsamt.Border = 15;
                        SecondtableHeadings.AddCell(CNHsamt);
                    }


                    //22
                    if (incentivs != 0)
                    {
                        PdfPCell CIncentivs = new PdfPCell(new Phrase("Incentivs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CIncentivs.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CIncentivs.Border = 15;
                        SecondtableHeadings.AddCell(CIncentivs);
                    }



                    //23
                    if (pfonduties != 0)
                    {
                        PdfPCell CPFondts = new PdfPCell(new Phrase("PF on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPFondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPFondts.Border = 15;
                        SecondtableHeadings.AddCell(CPFondts);
                    }

                    //24
                    if (esionduties != 0)
                    {
                        PdfPCell CESIondts = new PdfPCell(new Phrase("ESI on Dts", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CESIondts.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CESIondts.Border = 15;
                        SecondtableHeadings.AddCell(CESIondts);
                    }

                    //25
                    if (pfonot != 0)
                    {
                        PdfPCell CPFonot = new PdfPCell(new Phrase("PF on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPFonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPFonot.Border = 15;
                        SecondtableHeadings.AddCell(CPFonot);
                    }

                    //26
                    if (esionot != 0)
                    {
                        PdfPCell CESIonot = new PdfPCell(new Phrase("ESI on OTs", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CESIonot.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CESIonot.Border = 15;
                        SecondtableHeadings.AddCell(CESIonot);
                    }

                    //27
                    if (Pf != 0)
                    {
                        PdfPCell CPF = new PdfPCell(new Phrase("PF", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPF.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPF.Border = 15;
                        SecondtableHeadings.AddCell(CPF);
                    }

                    //28
                    if (Esi != 0)
                    {
                        PdfPCell CESI = new PdfPCell(new Phrase("ESI", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CESI.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CESI.Border = 15;
                        SecondtableHeadings.AddCell(CESI);
                    }


                    //29
                    if (proftax != 0)
                    {
                        PdfPCell CPT = new PdfPCell(new Phrase("PT", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPT.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPT.Border = 15;
                        SecondtableHeadings.AddCell(CPT);
                    }

                    //30
                    if (salAdvDed != 0)
                    {
                        PdfPCell CSalAdv = new PdfPCell(new Phrase("Sal Adv", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CSalAdv.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CSalAdv.Border = 15;
                        SecondtableHeadings.AddCell(CSalAdv);
                    }

                    //31
                    if (uniformDed != 0)
                    {
                        PdfPCell CUnifDed = new PdfPCell(new Phrase("Unif. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CUnifDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CUnifDed.Border = 15;
                        SecondtableHeadings.AddCell(CUnifDed);
                    }

                    //32
                    if (otherDed != 0)
                    {
                        PdfPCell COtherDed = new PdfPCell(new Phrase("Other Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        COtherDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        COtherDed.Border = 15;
                        SecondtableHeadings.AddCell(COtherDed);
                    }

                    //33
                    if (canteenAdv != 0)
                    {
                        PdfPCell Ccanteended = new PdfPCell(new Phrase("Mess. Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Ccanteended.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        Ccanteended.Border = 15;
                        SecondtableHeadings.AddCell(Ccanteended);
                    }



                    //34
                    if (penalty != 0)
                    {
                        PdfPCell CPenalty = new PdfPCell(new Phrase("Penalty", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CPenalty.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CPenalty.Border = 15;
                        SecondtableHeadings.AddCell(CPenalty);
                    }

                    //35
                    if (totalDeductions != 0)
                    {
                        PdfPCell CTotDed = new PdfPCell(new Phrase("Tot Ded", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CTotDed.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CTotDed.Border = 15;
                        SecondtableHeadings.AddCell(CTotDed);
                    }

                    //36
                    if (netpay != 0)
                    {
                        PdfPCell CNetPay = new PdfPCell(new Phrase("Net Pay", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        CNetPay.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                        CNetPay.Border = 15;
                        SecondtableHeadings.AddCell(CNetPay);
                    }

                    //37



                    #endregion


                    #region Table Data

                    PdfPTable Secondtable = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        Secondtable.TotalWidth = 1000f;
                    }
                    else
                    {
                        Secondtable.TotalWidth = 850f;
                    }
                    Secondtable.LockedWidth = true;
                    float[] SecondWidth = new float[] { };

                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
                    }

                    if (tableCells == 7)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion


                    Secondtable.SetWidths(SecondWidth);




                    int rowCount = 0;
                    int pageCount = 0;
                    int i = nextpagei;

                    // for (int i = 0, j = 0; i < dt.Rows.Count; i++)
                    {
                        float ForconvertOt = 0;
                        forConvert = 0;
                        if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                            forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());

                        //if (forConvert > 0)
                        {

                            if (nextpagerecordscount == 0)
                            {
                                document.Add(SecondtableHeadings);
                            }

                            nextpagerecordscount++;

                            //1
                            PdfPCell CSNo = new PdfPCell(new Phrase((++j).ToString() + "\n \n", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CSNo.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                            CSNo.Border = 15;
                            Secondtable.AddCell(CSNo);

                            //2
                            PdfPCell CEmpId1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpId"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpId1.Border = 15;
                            Secondtable.AddCell(CEmpId1);

                            //3
                            PdfPCell CEmpName1 = new PdfPCell(new Phrase(dt.Rows[i]["EmpName"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpName1.Border = 15;
                            Secondtable.AddCell(CEmpName1);

                            //4
                            PdfPCell CEmpDesgn = new PdfPCell(new Phrase(dt.Rows[i]["Design"].ToString(), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                            CEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            CEmpDesgn.Border = 15;
                            Secondtable.AddCell(CEmpDesgn);

                            //5
                            if (dts != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["NoOfDuties"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["NoOfDuties"].ToString());
                                totalDuties += forConvert;
                                GrandtotalDuties += forConvert;

                                PdfPCell CNoOfDuties = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNoOfDuties.Border = 15;
                                Secondtable.AddCell(CNoOfDuties);
                            }

                            //6
                            if (ots != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Duties"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["Duties"].ToString());
                                totalots += forConvert;
                                Grandtotalots += forConvert;

                                PdfPCell COts = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                COts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                COts.Border = 15;
                                Secondtable.AddCell(COts);
                            }

                            if (wos != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["wo"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["wo"].ToString());
                                totalwos += forConvert;
                                Grandtotalwos += forConvert;

                                PdfPCell Cwos = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cwos.Border = 15;
                                Secondtable.AddCell(Cwos);
                            }

                            //8
                            if (nhs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["nhs"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["nhs"].ToString());
                                totalnhs += forConvert;
                                Grandtotalnhs += forConvert;

                                PdfPCell CNhs = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNhs.Border = 15;
                                Secondtable.AddCell(CNhs);
                            }

                            //6A
                            if (srate != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Salrate"].ToString().Trim().Length > 0)
                                    forConvert = Convert.ToSingle(dt.Rows[i]["Salrate"].ToString());
                                totalsrate += forConvert;
                                GrandtotalSrate += forConvert;

                                PdfPCell CSalrate = new PdfPCell(new Phrase(forConvert.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CSalrate.Border = 15;
                                Secondtable.AddCell(CSalrate);
                            }


                            //7
                            if (basic != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Basic"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Basic"].ToString()));
                                totalBasic += forConvert;
                                GrandtotalBasic += forConvert;
                                PdfPCell CBasic1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CBasic1.Border = 15;
                                Secondtable.AddCell(CBasic1);
                            }

                            //8
                            if (da != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["DA"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["DA"].ToString()));
                                totalDA += forConvert;
                                GrandtotalDA += forConvert;

                                PdfPCell CDa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CDa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CDa1.Border = 15;
                                Secondtable.AddCell(CDa1);
                            }

                            //9
                            if (hra != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["HRA"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["HRA"].ToString()));
                                totalHRA += forConvert;
                                GrandtotalHRA += forConvert;

                                PdfPCell CHRA1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CHRA1.Border = 15;
                                Secondtable.AddCell(CHRA1);
                            }

                            //10
                            if (cca != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["cca"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cca"].ToString()));
                                totalCCA += forConvert;

                                GrandtotalCCA += forConvert;

                                PdfPCell Ccca = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Ccca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Ccca.Border = 15;
                                Secondtable.AddCell(Ccca);
                            }

                            //11
                            if (conveyance != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Conveyance"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Conveyance"].ToString()));
                                totalConveyance += forConvert;
                                GrandtotalConveyance += forConvert;

                                PdfPCell CConveyance = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CConveyance.Border = 15;
                                Secondtable.AddCell(CConveyance);
                            }


                            //12
                            if (washallowance != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["washallowance"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["washallowance"].ToString()));
                                totalWA += forConvert;
                                GrandtotalWA += forConvert;

                                PdfPCell CWa = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CWa.Border = 15;
                                Secondtable.AddCell(CWa);
                            }

                            //13
                            if (otherallowance != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["OtherAllowance"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherAllowance"].ToString()));
                                totalOA += forConvert;
                                GrandtotalOA += forConvert;
                                PdfPCell COA = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                COA.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                COA.Border = 15;
                                Secondtable.AddCell(COA);
                            }

                            //14
                            if (leavewages != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Leavewages"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Leavewages"].ToString()));
                                totalLw += forConvert;
                                GrandtotalLw += forConvert;
                                PdfPCell CLa1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CLa1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CLa1.Border = 15;
                                Secondtable.AddCell(CLa1);
                            }
                            //15
                            if (gratuity != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Gratuity"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gratuity"].ToString()));
                                totalGratuity += forConvert;
                                GrandtotalGratuity += forConvert;
                                PdfPCell CGratuity1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CGratuity1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CGratuity1.Border = 15;
                                Secondtable.AddCell(CGratuity1);
                            }

                            //16
                            if (bonus != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["bonus"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["bonus"].ToString()));
                                totalbonus += forConvert;

                                Grandtotalbonus += forConvert;
                                PdfPCell Cbonus = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cbonus.Border = 15;
                                Secondtable.AddCell(Cbonus);
                            }



                            //17
                            if (nfhs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Nfhs"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Nfhs"].ToString()));
                                totalNfhs += forConvert;
                                GrandtotalNfhs += forConvert;
                                PdfPCell CNfhs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNfhs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNfhs1.Border = 15;
                                Secondtable.AddCell(CNfhs1);
                            }

                            //18
                            if (rc != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["RC"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["RC"].ToString()));
                                totalRc += forConvert;
                                GrandtotalRc += forConvert;
                                PdfPCell CRc1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CRc1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CRc1.Border = 15;
                                Secondtable.AddCell(CRc1);
                            }

                            //19
                            if (cs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["cs"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["cs"].ToString()));
                                totalCs += forConvert;
                                GrandtotalCs += forConvert;
                                PdfPCell CCs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CCs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CCs1.Border = 15;
                                Secondtable.AddCell(CCs1);
                            }


                            //20
                            if (gross != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Gross"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Gross"].ToString()));
                                totalGross += forConvert;
                                GrandtotalGross += forConvert;

                                PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CGross1.Border = 15;
                                Secondtable.AddCell(CGross1);
                            }

                            //21
                            if (otamt != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Amount"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Amount"].ToString()));
                                totalotamt += forConvert;
                                Grandtotalotamt += forConvert;

                                PdfPCell CGross1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CGross1.Border = 15;
                                Secondtable.AddCell(CGross1);
                            }

                            if (wosamt != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["woamt"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["woamt"].ToString()));
                                totalwosamt += forConvert;

                                Grandtotalwosamt += forConvert;

                                PdfPCell Cwosamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cwosamt.Border = 15;
                                Secondtable.AddCell(Cwosamt);
                            }



                            //26
                            if (nhsamt != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["nhsamt"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["nhsamt"].ToString()));
                                totalnhsamt += forConvert;

                                Grandtotalnhsamt += forConvert;

                                PdfPCell Cnhsamt = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                Cnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                Cnhsamt.Border = 15;
                                Secondtable.AddCell(Cnhsamt);
                            }


                            //22
                            if (incentivs != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Incentivs"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Incentivs"].ToString()));
                                totalIncentivs += forConvert;
                                GrandtotalIncentivs += forConvert;
                                PdfPCell CIncentivs1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CIncentivs1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CIncentivs1.Border = 15;
                                Secondtable.AddCell(CIncentivs1);
                            }

                            //23
                            if (pfonduties != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Pfonduties"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Pfonduties"].ToString()));
                                totalPFondts += forConvert;
                                GrandtotalPFondts += forConvert;

                                PdfPCell CPF1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPF1.Border = 15;
                                Secondtable.AddCell(CPF1);
                            }

                            //24
                            if (esionduties != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Esionduties"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Esionduties"].ToString()));
                                totalESIondts += forConvert;

                                GrandtotalESIondts += forConvert;

                                PdfPCell CESI1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CESI1.Border = 15;
                                Secondtable.AddCell(CESI1);
                            }

                            //25
                            if (pfonot != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["PFONOT"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFONOT"].ToString()));
                                totalpfonots += forConvert;
                                Grandtotalpfonots += forConvert;

                                PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPFonots.Border = 15;
                                Secondtable.AddCell(CPFonots);
                            }

                            //26
                            if (esionot != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["ESIONOT"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESIONOT"].ToString()));
                                totalesionots += forConvert;

                                Grandtotalesionots += forConvert;

                                PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CESIonots.Border = 15;
                                Secondtable.AddCell(CESIonots);
                            }

                            //27
                            if (Pf != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["PFTotal"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["PFTotal"].ToString()));
                                totalpf += forConvert;
                                Grandtotalpf += forConvert;

                                PdfPCell CPFonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPFonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPFonots.Border = 15;
                                Secondtable.AddCell(CPFonots);
                            }

                            //28
                            if (Esi != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["ESITotal"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ESITotal"].ToString()));
                                totalesi += forConvert;

                                Grandtotalesi += forConvert;

                                PdfPCell CESIonots = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CESIonots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CESIonots.Border = 15;
                                Secondtable.AddCell(CESIonots);
                            }

                            //29
                            if (proftax != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["ProfTax"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["ProfTax"].ToString()));
                                totalProfTax += forConvert;
                                GrandtotalProfTax += forConvert;

                                PdfPCell CProTax1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CProTax1.Border = 15;
                                Secondtable.AddCell(CProTax1);
                            }

                            //30
                            if (salAdvDed != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["SalAdvDed"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["SalAdvDed"].ToString()));
                                totalSalAdv += forConvert;
                                GrandtotalSalAdv += forConvert;

                                PdfPCell CSalAdv1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CSalAdv1.Border = 15;
                                Secondtable.AddCell(CSalAdv1);
                            }

                            //31
                            if (uniformDed != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["UniformDed"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["UniformDed"].ToString()));
                                totalUniforDed += forConvert;
                                GrandtotalUniforDed += forConvert;

                                PdfPCell CUnifDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CUnifDed1.Border = 15;
                                Secondtable.AddCell(CUnifDed1);
                            }

                            //32
                            if (otherDed != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["OtherDed"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["OtherDed"].ToString()));
                                totalOtherdedn += forConvert;
                                GrandtotalOtherdedn += forConvert;

                                PdfPCell COtherDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                COtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                COtherDed1.Border = 15;
                                Secondtable.AddCell(COtherDed1);
                            }

                            //33
                            if (canteenAdv != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["CanteenAdv"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["CanteenAdv"].ToString()));
                                totalCanteenAdv += forConvert;
                                GrandtotalCanteenAdv += forConvert;

                                PdfPCell CCanteended = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CCanteended.Border = 15;
                                Secondtable.AddCell(CCanteended);
                            }



                            //34
                            if (penalty != 0)
                            {
                                if (dt.Rows[i]["Penalty"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Penalty"].ToString()));
                                totalPenalty += forConvert;
                                GrandtotalPenalty += forConvert;

                                PdfPCell CPenalty1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CPenalty1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CPenalty1.Border = 15;
                                Secondtable.AddCell(CPenalty1);
                            }


                            //35
                            if (totalDeductions != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["Totaldeduct"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["Totaldeduct"].ToString()));
                                totalDed += forConvert;
                                GrandtotalDed += forConvert;

                                PdfPCell CTotDed1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CTotDed1.Border = 15;
                                Secondtable.AddCell(CTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                            }

                            //36
                            if (netpay != 0)
                            {
                                forConvert = 0;
                                if (dt.Rows[i]["NetAmount"].ToString().Trim().Length > 0)
                                    forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["NetAmount"].ToString()));
                                if (forConvert <= 0)
                                {
                                    forConvert = 0;
                                }
                                totalNetpay += forConvert;
                                GrandtotalNetpay += forConvert;
                                PdfPCell CNetPay1 = new PdfPCell(new Phrase(forConvert.ToString("0"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                                CNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                CNetPay1.Border = 15;
                                Secondtable.AddCell(CNetPay1);
                            }

                            forConvert = 0;
                            if (dt.Rows[i]["pfempr"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["pfempr"].ToString()));
                            Grandpfempr += forConvert;


                            forConvert = 0;
                            if (dt.Rows[i]["esiempr"].ToString().Trim().Length > 0)
                                forConvert = (float)Math.Round(Convert.ToSingle(dt.Rows[i]["esiempr"].ToString()));
                            Grandesiempr += forConvert;

                        }


                    }
                    #endregion

                    #region Table Total values

                    SecondtableFooter = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtableFooter.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtableFooter.TotalWidth = 850f;
                    }
                    SecondtableFooter.LockedWidth = true;
                    float[] SecondFooterWidth = new float[] { };

                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 2f };
                    }

                    if (tableCells == 7)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion

                    SecondtableFooter.SetWidths(SecondFooterWidth);

                    //1
                    PdfPCell FCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCSNo.Border = 15;
                    SecondtableFooter.AddCell(FCSNo);
                    //2
                    PdfPCell FCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpId1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpId1);
                    //3
                    PdfPCell FCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    FCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpName1.Border = 15;
                    SecondtableFooter.AddCell(FCEmpName1);
                    //4
                    PdfPCell FCEmpDesgn = new PdfPCell(new Phrase(" Total : ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FCEmpDesgn.Border = 15;
                    FCEmpDesgn.Colspan = 0;
                    SecondtableFooter.AddCell(FCEmpDesgn);

                    //5
                    if (dts != 0)
                    {
                        PdfPCell FCNoOfDuties = new PdfPCell(new Phrase(totalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCNoOfDuties.Border = 15;
                        SecondtableFooter.AddCell(FCNoOfDuties);
                    }

                    //6
                    if (ots != 0)
                    {
                        PdfPCell FCots = new PdfPCell(new Phrase(totalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCots.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCots.Border = 15;
                        SecondtableFooter.AddCell(FCots);
                    }

                    if (wos != 0)
                    {
                        PdfPCell FCwos = new PdfPCell(new Phrase(totalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCwos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCwos.Border = 15;
                        SecondtableFooter.AddCell(FCwos);
                    }

                    //8
                    if (nhs != 0)
                    {
                        PdfPCell FCnhs = new PdfPCell(new Phrase(totalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCnhs.Border = 15;
                        SecondtableFooter.AddCell(FCnhs);
                    }

                    //6A
                    if (srate != 0)
                    {
                        PdfPCell FCSalrate = new PdfPCell(new Phrase(totalsrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCSalrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCSalrate.Border = 15;
                        SecondtableFooter.AddCell(FCSalrate);
                    }

                    //7
                    if (basic != 0)
                    {
                        PdfPCell FCBasic1 = new PdfPCell(new Phrase(totalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCBasic1.Border = 15;
                        SecondtableFooter.AddCell(FCBasic1);
                    }


                    //8
                    if (da != 0)
                    {
                        PdfPCell FDa = new PdfPCell(new Phrase(totalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FDa.Border = 15;
                        SecondtableFooter.AddCell(FDa);
                    }


                    //9
                    if (hra != 0)
                    {

                        PdfPCell FCHRA1 = new PdfPCell(new Phrase(totalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCHRA1.Border = 15;
                        SecondtableFooter.AddCell(FCHRA1);
                    }

                    //10
                    if (cca != 0)
                    {
                        PdfPCell FCcca = new PdfPCell(new Phrase(totalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCcca.Border = 15;
                        SecondtableFooter.AddCell(FCcca);
                    }

                    //11
                    if (conveyance != 0)
                    {
                        PdfPCell FCConveyance = new PdfPCell(new Phrase(totalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCConveyance.Border = 15;
                        SecondtableFooter.AddCell(FCConveyance);
                    }


                    //12
                    if (washallowance != 0)
                    {
                        PdfPCell FCWa = new PdfPCell(new Phrase(totalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCWa.Border = 15;
                        SecondtableFooter.AddCell(FCWa);
                    }

                    //13
                    if (otherallowance != 0)
                    {
                        PdfPCell FCOa = new PdfPCell(new Phrase(totalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCOa.Border = 15;
                        SecondtableFooter.AddCell(FCOa);
                    }


                    //14
                    if (leavewages != 0)
                    {
                        PdfPCell FLa = new PdfPCell(new Phrase(totalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FLa.Border = 15;
                        SecondtableFooter.AddCell(FLa);
                    }

                    //15
                    if (gratuity != 0)
                    {
                        PdfPCell FGratuity = new PdfPCell(new Phrase(totalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FGratuity.Border = 15;
                        SecondtableFooter.AddCell(FGratuity);
                    }

                    //16
                    if (bonus != 0)
                    {
                        PdfPCell Fbonus = new PdfPCell(new Phrase(totalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        Fbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        Fbonus.Border = 15;
                        SecondtableFooter.AddCell(Fbonus);
                    }

                    //17
                    if (nfhs != 0)
                    {
                        PdfPCell FNfhs = new PdfPCell(new Phrase(totalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FNfhs.Border = 15;
                        SecondtableFooter.AddCell(FNfhs);
                    }

                    //18
                    if (rc != 0)
                    {
                        PdfPCell FRc = new PdfPCell(new Phrase(totalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FRc.Border = 15;
                        SecondtableFooter.AddCell(FRc);
                    }

                    //19
                    if (cs != 0)
                    {
                        PdfPCell FCs = new PdfPCell(new Phrase(totalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCs.Border = 15;
                        SecondtableFooter.AddCell(FCs);
                    }


                    //20
                    if (gross != 0)
                    {
                        PdfPCell FCGross1 = new PdfPCell(new Phrase(totalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCGross1.Border = 15;
                        SecondtableFooter.AddCell(FCGross1);
                    }

                    //21
                    if (otamt != 0)
                    {
                        PdfPCell FCotamt = new PdfPCell(new Phrase(totalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCotamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCotamt.Border = 15;
                        SecondtableFooter.AddCell(FCotamt);
                    }

                    if (wosamt != 0)
                    {
                        PdfPCell FCEwosamt = new PdfPCell(new Phrase(totalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCEwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCEwosamt.Border = 15;
                        SecondtableFooter.AddCell(FCEwosamt);
                    }



                    //26
                    if (nhsamt != 0)
                    {
                        PdfPCell FCnhsamt = new PdfPCell(new Phrase(totalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCnhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCnhsamt.Border = 15;
                        SecondtableFooter.AddCell(FCnhsamt);
                    }
                    //22
                    if (incentivs != 0)
                    {
                        PdfPCell FIncentivs = new PdfPCell(new Phrase(totalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FIncentivs.Border = 15;
                        SecondtableFooter.AddCell(FIncentivs);
                    }


                    //23
                    if (pfonduties != 0)
                    {
                        PdfPCell FCPF1 = new PdfPCell(new Phrase(totalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCPF1.Border = 15;
                        SecondtableFooter.AddCell(FCPF1);
                    }

                    //24
                    if (esionduties != 0)
                    {
                        PdfPCell FCESI1 = new PdfPCell(new Phrase(totalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCESI1.Border = 15;
                        SecondtableFooter.AddCell(FCESI1);
                    }


                    //25
                    if (pfonot != 0)
                    {
                        PdfPCell FCPFonot = new PdfPCell(new Phrase(totalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCPFonot.Border = 15;
                        SecondtableFooter.AddCell(FCPFonot);
                    }

                    //26
                    if (esionot != 0)
                    {
                        PdfPCell FCESIonot = new PdfPCell(new Phrase(totalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCESIonot.Border = 15;
                        SecondtableFooter.AddCell(FCESIonot);
                    }

                    //27
                    if (Pf != 0)
                    {
                        PdfPCell FCPF = new PdfPCell(new Phrase(totalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCPF.Border = 15;
                        SecondtableFooter.AddCell(FCPF);
                    }

                    //28
                    if (Esi != 0)
                    {
                        PdfPCell FCES = new PdfPCell(new Phrase(totalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCES.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCES.Border = 15;
                        SecondtableFooter.AddCell(FCES);
                    }

                    //29
                    if (proftax != 0)
                    {
                        PdfPCell FCProTax1 = new PdfPCell(new Phrase(totalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCProTax1.Border = 15;
                        SecondtableFooter.AddCell(FCProTax1);
                    }

                    //30
                    if (salAdvDed != 0)
                    {
                        PdfPCell FCSalAdv1 = new PdfPCell(new Phrase(totalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCSalAdv1.Border = 15;
                        SecondtableFooter.AddCell(FCSalAdv1);
                    }

                    //31
                    if (uniformDed != 0)
                    {
                        PdfPCell FCUnifDed1 = new PdfPCell(new Phrase(totalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCUnifDed1.Border = 15;
                        SecondtableFooter.AddCell(FCUnifDed1);
                    }

                    //32
                    if (otherDed != 0)
                    {
                        PdfPCell FCOtherDed1 = new PdfPCell(new Phrase(totalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCOtherDed1.Border = 15;
                        SecondtableFooter.AddCell(FCOtherDed1);
                    }

                    //33
                    if (canteenAdv != 0)
                    {
                        PdfPCell FCCanteended = new PdfPCell(new Phrase(totalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCCanteended.Border = 15;
                        SecondtableFooter.AddCell(FCCanteended);
                    }


                    //34
                    if (penalty != 0)
                    {
                        PdfPCell FPenalty = new PdfPCell(new Phrase(totalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FPenalty.Border = 15;
                        SecondtableFooter.AddCell(FPenalty);
                    }


                    //35
                    if (totalDeductions != 0)
                    {
                        PdfPCell FCTotDed1 = new PdfPCell(new Phrase(totalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCTotDed1.Border = 15;
                        SecondtableFooter.AddCell(FCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                    }

                    //36
                    if (netpay != 0)
                    {
                        PdfPCell FCNetPay1 = new PdfPCell(new Phrase(totalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        FCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        FCNetPay1.Border = 15;
                        //FCNetPay1.Colspan = 2;
                        SecondtableFooter.AddCell(FCNetPay1);
                    }



                    #endregion

                    SecondtableGrandtotalFooter = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtableGrandtotalFooter.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtableGrandtotalFooter.TotalWidth = 850f;
                    }
                    SecondtableGrandtotalFooter.LockedWidth = true;
                    float[] SecondGrandtotalFooterWidth = new float[] { };
                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 5f };
                    }

                    if (tableCells == 7)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondGrandtotalFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion
                    SecondtableGrandtotalFooter.SetWidths(SecondGrandtotalFooterWidth);

                    SecondtablecheckbyFooter = new PdfPTable(tableCells);
                    if (tableCells > 20)
                    {
                        SecondtablecheckbyFooter.TotalWidth = 1000f;
                    }
                    else
                    {
                        SecondtablecheckbyFooter.TotalWidth = 850f;
                    }
                    SecondtablecheckbyFooter.LockedWidth = true;
                    float[] SecondcheckbyFooterWidth = new float[] { };

                    #region Table Cells
                    if (tableCells == 37)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 36)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 35)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 34)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 33)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 32)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 5f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 31)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 30)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 29)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 28)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 27)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 26)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 25)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 24)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 23)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 22)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 21)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 20)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 19)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 18)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 17)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 16)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 15)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 14)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 13)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 12)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 11)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 10)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 1.5f, 2f };
                    }
                    if (tableCells == 9)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 1.5f, 2f };
                    }
                    if (tableCells == 8)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f, 2f };
                    }

                    if (tableCells == 7)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 1.5f, 2f };
                    }

                    if (tableCells == 6)
                    {
                        SecondcheckbyFooterWidth = new float[] { 1.5f, 2f, 6f, 3f, 1.5f, 2f };
                    }
                    #endregion

                    SecondtablecheckbyFooter.SetWidths(SecondcheckbyFooterWidth);

                    #region Table   Grand   Total  Footer

                    //1
                    PdfPCell GFCSNo = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCSNo.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCSNo.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCSNo);

                    //2
                    PdfPCell GFCEmpId1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpId1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpId1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpId1);

                    //3
                    PdfPCell GFCEmpName1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                    GFCEmpName1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpName1.Border = 15;
                    SecondtablecheckbyFooter.AddCell(GFCEmpName1);

                    //4
                    PdfPCell GFCEmpDesgn = new PdfPCell(new Phrase("Grand  Total: ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    GFCEmpDesgn.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    GFCEmpDesgn.Border = 15;
                    //FCEmpDesgn.Colspan = 4;
                    SecondtablecheckbyFooter.AddCell(GFCEmpDesgn);

                    //5
                    if (dts != 0)
                    {
                        PdfPCell GFCNoOfDuties = new PdfPCell(new Phrase(GrandtotalDuties.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCNoOfDuties.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCNoOfDuties.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCNoOfDuties);
                    }

                    //6
                    if (ots != 0)
                    {
                        PdfPCell GFCOts = new PdfPCell(new Phrase(Grandtotalots.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOts.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOts.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOts);
                    }

                    if (wos != 0)
                    {
                        PdfPCell GFCWos = new PdfPCell(new Phrase(Grandtotalwos.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCWos.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCWos.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCWos);
                    }

                    //8
                    if (nhs != 0)
                    {
                        PdfPCell GFCnhs = new PdfPCell(new Phrase(Grandtotalnhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCnhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCnhs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCnhs);
                    }
                    //6A
                    if (srate != 0)
                    {
                        PdfPCell GFCsrate = new PdfPCell(new Phrase(GrandtotalSrate.ToString("0.00"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCsrate.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCsrate.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCsrate);
                    }


                    //7
                    if (basic != 0)
                    {
                        PdfPCell GFCBasic1 = new PdfPCell(new Phrase(GrandtotalBasic.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCBasic1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCBasic1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCBasic1);
                    }


                    //8
                    if (da != 0)
                    {
                        PdfPCell GFDa = new PdfPCell(new Phrase(GrandtotalDA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFDa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFDa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFDa);
                    }


                    //9
                    if (hra != 0)
                    {
                        PdfPCell GFCHRA1 = new PdfPCell(new Phrase(GrandtotalHRA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCHRA1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCHRA1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCHRA1);
                    }

                    //10
                    if (cca != 0)
                    {
                        PdfPCell GFCcca = new PdfPCell(new Phrase(GrandtotalCCA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCcca.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCcca.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCcca);
                    }

                    //11
                    if (conveyance != 0)
                    {
                        PdfPCell GFCConveyance = new PdfPCell(new Phrase(GrandtotalConveyance.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCConveyance.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCConveyance.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCConveyance);
                    }


                    //12
                    if (washallowance != 0)
                    {
                        PdfPCell GFCWa = new PdfPCell(new Phrase(GrandtotalWA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCWa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCWa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCWa);
                    }

                    //13
                    if (otherallowance != 0)
                    {
                        PdfPCell GFCOa = new PdfPCell(new Phrase(GrandtotalOA.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOa);
                    }

                    //14
                    if (leavewages != 0)
                    {
                        PdfPCell GFLa = new PdfPCell(new Phrase(GrandtotalLw.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFLa.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFLa.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFLa);
                    }

                    //15
                    if (gratuity != 0)
                    {
                        PdfPCell GFGratuity = new PdfPCell(new Phrase(GrandtotalGratuity.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFGratuity.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFGratuity.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFGratuity);
                    }

                    //16
                    if (bonus != 0)
                    {
                        PdfPCell GFbonus = new PdfPCell(new Phrase(Grandtotalbonus.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFbonus.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFbonus.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFbonus);
                    }


                    //17
                    if (nfhs != 0)
                    {
                        PdfPCell GFNfhs = new PdfPCell(new Phrase(GrandtotalNfhs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFNfhs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFNfhs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFNfhs);
                    }

                    //18
                    if (rc != 0)
                    {
                        PdfPCell GFRc = new PdfPCell(new Phrase(GrandtotalRc.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFRc.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFRc.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFRc);
                    }

                    //19
                    if (cs != 0)
                    {
                        PdfPCell GFCs = new PdfPCell(new Phrase(GrandtotalCs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCs);
                    }


                    //20
                    if (gross != 0)
                    {
                        PdfPCell GFCGross1 = new PdfPCell(new Phrase(GrandtotalGross.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCGross1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCGross1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCGross1);
                    }

                    //21
                    if (otamt != 0)
                    {
                        PdfPCell GFCOtamt = new PdfPCell(new Phrase(Grandtotalotamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOtamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOtamt.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOtamt);
                    }

                    if (wosamt != 0)
                    {
                        PdfPCell GFCwosamt = new PdfPCell(new Phrase(Grandtotalwosamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCwosamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCwosamt.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCwosamt);
                    }



                    //26
                    if (nhsamt != 0)
                    {
                        PdfPCell GFCNhsamt = new PdfPCell(new Phrase(Grandtotalnhsamt.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCNhsamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCNhsamt.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCNhsamt);
                    }

                    //22
                    if (incentivs != 0)
                    {
                        PdfPCell GFIncentivs = new PdfPCell(new Phrase(GrandtotalIncentivs.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFIncentivs.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFIncentivs.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFIncentivs);
                    }



                    //23
                    if (pfonduties != 0)
                    {
                        PdfPCell GFCPF1 = new PdfPCell(new Phrase(GrandtotalPFondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCPF1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCPF1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCPF1);
                    }

                    //24
                    if (esionduties != 0)
                    {
                        PdfPCell GFCESI1 = new PdfPCell(new Phrase(GrandtotalESIondts.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCESI1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCESI1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCESI1);
                    }

                    //25
                    if (pfonot != 0)
                    {
                        PdfPCell GFCPFonot = new PdfPCell(new Phrase(Grandtotalpfonots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCPFonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCPFonot.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCPFonot);
                    }

                    //26
                    if (esionot != 0)
                    {
                        PdfPCell GFCESIonot = new PdfPCell(new Phrase(Grandtotalesionots.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCESIonot.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCESIonot.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCESIonot);
                    }

                    //27
                    if (Pf != 0)
                    {
                        PdfPCell GFCPF = new PdfPCell(new Phrase(Grandtotalpf.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCPF.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCPF.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCPF);
                    }

                    //28
                    if (Esi != 0)
                    {
                        PdfPCell GFCESI = new PdfPCell(new Phrase(Grandtotalesi.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCESI.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCESI.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCESI);
                    }


                    //29
                    if (proftax != 0)
                    {
                        PdfPCell GFCProTax1 = new PdfPCell(new Phrase(GrandtotalProfTax.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCProTax1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCProTax1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCProTax1);
                    }

                    //30
                    if (salAdvDed != 0)
                    {
                        PdfPCell GFCSalAdv1 = new PdfPCell(new Phrase(GrandtotalSalAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCSalAdv1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCSalAdv1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCSalAdv1);
                    }

                    //31
                    if (uniformDed != 0)
                    {
                        PdfPCell GFCUnifDed1 = new PdfPCell(new Phrase(GrandtotalUniforDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCUnifDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCUnifDed1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCUnifDed1);
                    }

                    //32
                    if (otherDed != 0)
                    {
                        PdfPCell GFCOtherDed1 = new PdfPCell(new Phrase(GrandtotalOtherdedn.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCOtherDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCOtherDed1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCOtherDed1);
                    }


                    //33
                    if (canteenAdv != 0)
                    {
                        PdfPCell GFCCanteended = new PdfPCell(new Phrase(GrandtotalCanteenAdv.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCCanteended.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCCanteended.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCCanteended);
                    }

                    //34
                    if (penalty != 0)
                    {
                        PdfPCell GFPenalty = new PdfPCell(new Phrase(GrandtotalPenalty.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFPenalty.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFPenalty.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFPenalty);
                    }

                    //35
                    if (totalDeductions != 0)
                    {
                        PdfPCell GFCTotDed1 = new PdfPCell(new Phrase(GrandtotalDed.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCTotDed1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCTotDed1.Border = 15;
                        SecondtablecheckbyFooter.AddCell(GFCTotDed1);//OtherDed,Eps.Gross,Eps.Deductions,Eps.ActualAmount
                    }

                    //36
                    if (netpay != 0)
                    {
                        PdfPCell GFCNetPay1 = new PdfPCell(new Phrase(GrandtotalNetpay.ToString("#,#"), FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.BOLD, BaseColor.BLACK)));
                        GFCNetPay1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                        GFCNetPay1.Border = 15;
                        //FCNetPay1.Colspan = 2;
                        SecondtablecheckbyFooter.AddCell(GFCNetPay1);
                    }


                    #endregion


                    #region   Footer Headings
                    //1
                    PdfPCell FHCheckedbybr1 = new PdfPCell(new Phrase("", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedbybr1.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHCheckedbybr1.Border = 0;
                    FHCheckedbybr1.Rowspan = 0;
                    FHCheckedbybr1.Colspan = tableCells;
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    //2
                    PdfPCell FHApprovedbr2 = new PdfPCell(new Phrase("  ", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedbr2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    FHApprovedbr2.Border = 0;
                    FHApprovedbr2.Colspan = tableCells;

                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);
                    SecondtablecheckbyFooter.AddCell(FHCheckedbybr1);
                    SecondtablecheckbyFooter.AddCell(FHApprovedbr2);


                    //1
                    PdfPCell FHCheckedby = new PdfPCell(new Phrase("Checked By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHCheckedby.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    FHCheckedby.Border = 0;
                    FHCheckedby.Colspan = tableCells;
                    SecondtablecheckbyFooter.AddCell(FHCheckedby);
                    //2
                    PdfPCell FHApprovedBy = new PdfPCell(new Phrase("Gross  Approved By", FontFactory.GetFont(Fontstyle, FONT_SIZE, Font.NORMAL, BaseColor.BLACK)));
                    FHApprovedBy.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    FHApprovedBy.Border = 0;
                    FHApprovedBy.PaddingTop = -5;
                    FHApprovedBy.Colspan = tableCells;
                    SecondtablecheckbyFooter.AddCell(FHApprovedBy);



                    #endregion

                    document.Add(Secondtable);

                    if (nextpagerecordscount == targetpagerecors)
                    {
                        targetpagerecors = secondpagerecords;
                        document.Add(SecondtableFooter);
                        document.NewPage();
                        nextpagerecordscount = 0;
                        #region  Zero variables

                        totalNetpay = 0;
                        totalDuties = 0;
                        totalsrate = 0;
                        totalBasic = 0;
                        totalDA = 0;
                        totalHRA = 0;
                        totalCCA = 0;
                        totalConveyance = 0;
                        totalWA = 0;
                        totalOA = 0;
                        totalGross = 0;
                        totalPFondts = 0;
                        totalESIondts = 0;
                        totalProfTax = 0;
                        totalDed = 0;
                        totalSalAdv = 0;
                        totalUniforDed = 0;
                        totalCanteenAdv = 0;
                        totalOtherdedn = 0;
                        totalbonus = 0;
                        totalLw = 0;
                        totalGratuity = 0;
                        totalNfhs = 0;
                        totalRc = 0;
                        totalCs = 0;
                        totalIncentivs = 0;
                        totalPenalty = 0;

                        totalots = 0;
                        totalotamt = 0;
                        totalpfonots = 0;
                        totalesionots = 0;
                        totalpf = 0;
                        totalesi = 0;

                        #endregion
                    }
                }

                if (nextpagerecordscount >= 0)
                {
                    //document.Add(SecondtableFooter);
                    document.Add(SecondtableGrandtotalFooter);
                    document.Add(SecondtablecheckbyFooter);
                }


                document.SetPageSize(PageSize.A4);

                document.NewPage();

                Font boldFont = FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK);

                string SqlQryForTaxes = "select * from  Tbloptions ";
                DataTable DtTaxes = config.ExecuteReaderWithQueryAsync(SqlQryForTaxes).Result;
                string SCPersent = "";
                if (DtTaxes.Rows.Count > 0)
                {
                    SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                }
                else
                {
                    lblResult.Text = "There Is No Tax Values For Generating Bills ";
                    return;
                }


                #region data from unibill

                string SelectBillNo = "Select convert(varchar(10),BillDt,103) as DtBill,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                DataTable DtBilling = SqlHelper.Instance.GetTableByQuery(SelectBillNo);
                float servicetx = 0; string Billno = ""; string BillDate = "";
                if (DtBilling.Rows.Count > 0)
                {
                    servicetx = Convert.ToSingle(DtBilling.Rows[0]["ServiceTax"].ToString());
                    Billno = DtBilling.Rows[0]["BillNo"].ToString();
                    BillDate = DtBilling.Rows[0]["DtBill"].ToString();
                }

                #endregion data from unibill

                PdfPTable tablelogo = new PdfPTable(2);
                tablelogo.TotalWidth = 500f;
                tablelogo.LockedWidth = true;
                float[] widtlogo = new float[] { 2f, 2f };
                tablelogo.SetWidths(widtlogo);

                PdfPCell celll = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                celll.Border = 0;
                celll.Colspan = 2;
                tablelogo.AddCell(celll);
                tablelogo.AddCell(celll);
                tablelogo.AddCell(celll);
                tablelogo.AddCell(celll);



                PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 14, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                CInvoice.HorizontalAlignment = 1;
                CInvoice.Border = 0;
                CInvoice.Colspan = 2;
                tablelogo.AddCell(CInvoice);

                tablelogo.AddCell(celll);


                document.Add(tablelogo);





                string selectclientaddress = "select * from clients where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                DataTable dtclientaddress = SqlHelper.Instance.GetTableByQuery(selectclientaddress);



                PdfPTable address = new PdfPTable(2);
                address.TotalWidth = 500f;
                address.LockedWidth = true;
                float[] addreslogo = new float[] { 2f, 2f };
                address.SetWidths(addreslogo);

                PdfPTable tempTable1 = new PdfPTable(1);
                tempTable1.TotalWidth = 250f;
                tempTable1.LockedWidth = true;
                float[] tempWidth1 = new float[] { 1f };
                tempTable1.SetWidths(tempWidth1);




                PdfPCell cell11 = new PdfPCell(new Paragraph("To,", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                cell11.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cell11.Border = 0;
                tempTable1.AddCell(cell11);
                string addressData = "";

                addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientaddrhno = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientaddrhno.Border = 0;
                    tempTable1.AddCell(clientaddrhno);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientstreet.Border = 0;
                    tempTable1.AddCell(clientstreet);
                }


                addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientstreet.Border = 0;
                    tempTable1.AddCell(clientstreet);
                }


                addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientcolony.Colspan = 2;
                    clientcolony.Border = 0;
                    tempTable1.AddCell(clientcolony);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientcity.Colspan = 2;
                    clientcity.Border = 0;
                    tempTable1.AddCell(clientcity);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clientstate.Colspan = 2;
                    clientstate.Border = 0;
                    tempTable1.AddCell(clientstate);
                }
                addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                if (addressData.Trim().Length > 0)
                {
                    PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    clietnpin.Colspan = 2;
                    clietnpin.Border = 0;
                    tempTable1.AddCell(clietnpin);
                }
                PdfPCell childTable1 = new PdfPCell(tempTable1);
                childTable1.Border = 0;
                childTable1.HorizontalAlignment = 0;
                address.AddCell(childTable1);

                PdfPTable tempTable2 = new PdfPTable(1);
                tempTable2.TotalWidth = 250f;
                tempTable2.LockedWidth = true;
                float[] tempWidth2 = new float[] { 1f };
                tempTable2.SetWidths(tempWidth2);

                //Blank Field for Space
                PdfPCell cell12 = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                cell12.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell12.Border = 0;
                tempTable2.AddCell(cell12);

                PdfPCell cell13 = new PdfPCell(new Paragraph("Invoice No : " + Billno, FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cell13.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell13.Border = 0;
                tempTable2.AddCell(cell13);

                PdfPCell cell14 = new PdfPCell(new Paragraph("Date : " + BillDate, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cell14.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell14.Border = 0;
                tempTable2.AddCell(cell14);

                //PdfPCell cell15 = new PdfPCell(new Paragraph("REF NO : " + pono, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                //cell15.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                //cell15.Border = 0;
                //tempTable2.AddCell(cell15);

                PdfPCell cell16 = new PdfPCell(new Paragraph("For the Month : " + GetMonthName() + " - " + GetMonthOfYear(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cell16.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cell16.Border = 0;
                tempTable2.AddCell(cell16);

                PdfPCell childTable2 = new PdfPCell(tempTable2);
                childTable2.Border = 0;
                childTable2.HorizontalAlignment = 0;
                address.AddCell(childTable2);
                address.AddCell(celll);


                document.Add(address);


                PdfPTable tabled = new PdfPTable(3);
                tabled.TotalWidth = 500f;//432f;
                tabled.LockedWidth = true;
                float[] widthd = new float[] { 6f, 1.5f, 2f };
                tabled.SetWidths(widthd);


                string SqlQuryForServiCharge = "select ContractId,servicecharge,ServiceChargeType,Description,IncludeST,ServiceTax75 from contracts where " +
                       " clientid ='" + ddlclientid.SelectedValue + "'";
                DataTable DtServicecharge = SqlHelper.Instance.GetTableByQuery(SqlQuryForServiCharge);
                string strdescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                float SChrgValue = 0;

                if (DtServicecharge.Rows.Count > 0)
                {
                    SChrgValue = Convert.ToSingle(DtServicecharge.Rows[0]["servicecharge"].ToString());
                    strdescription = DtServicecharge.Rows[0]["Description"].ToString();

                }

                string fromdt = ""; string todate = ""; float pfwages = 0; float esiwages = 0; float Samt = 0; float TSchrg = 0; float ttotal = 0;


                if (dt.Rows.Count > 0)
                {
                    pfwages = Convert.ToSingle(dt.Rows[0]["pfwages"].ToString());
                    esiwages = Convert.ToSingle(dt.Rows[0]["esiwages"].ToString());

                }

                fromdt = txtfromdate.Text;
                todate = txttodate.Text;


                PdfPCell cellunitname = new PdfPCell(new Phrase("Unit Name : " + ddlCname.SelectedItem, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellunitname.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellunitname.Colspan = 1;
                cellunitname.Border = 0;
                cellunitname.PaddingTop = 8;
                cellunitname.PaddingBottom = 15;
                tabled.AddCell(cellunitname);



                PdfPCell cellbilldt = new PdfPCell(new Phrase("Bill From : " + fromdt + " to " + todate, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellbilldt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellbilldt.Colspan = 2;
                cellbilldt.Border = 0;
                cellbilldt.PaddingTop = 8;
                cellbilldt.PaddingBottom = 15;
                tabled.AddCell(cellbilldt);


                PdfPCell celldesc = new PdfPCell(new Phrase("DESCRIPTION ", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                celldesc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                celldesc.Colspan = 0;
                celldesc.PaddingTop = 8;
                celldesc.PaddingBottom = 8;
                tabled.AddCell(celldesc);

                PdfPCell celldesc2 = new PdfPCell(new Phrase(" ", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                celldesc2.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                celldesc2.Colspan = 0;
                celldesc2.PaddingTop = 8;
                celldesc2.PaddingBottom = 8;
                tabled.AddCell(celldesc2);


                PdfPCell cellamtdesc = new PdfPCell(new Phrase("AMOUNT", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellamtdesc.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                cellamtdesc.Colspan = 0;
                cellamtdesc.PaddingBottom = 8;
                cellamtdesc.PaddingTop = 8;
                tabled.AddCell(cellamtdesc);

                string Fromdate = txtfromdate.Text;
                string Todate = txttodate.Text;


                PdfPCell celldescription = new PdfPCell(new Phrase(strdescription, FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                celldescription.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                celldescription.Colspan = 0;
                celldescription.PaddingBottom = 8;
                celldescription.PaddingTop = 8;
                tabled.AddCell(celldescription);

                PdfPCell cellonfield = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                cellonfield.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellonfield.Colspan = 0;
                cellonfield.PaddingBottom = 8;
                cellonfield.PaddingTop = 8;
                tabled.AddCell(cellonfield);

                Samt = GrandtotalGross + Grandtotalotamt;

                PdfPCell cellamtvalue = new PdfPCell(new Phrase(Samt.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellamtvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellamtvalue.Colspan = 0;
                cellamtvalue.PaddingBottom = 8;
                cellamtvalue.PaddingTop = 8;
                tabled.AddCell(cellamtvalue);

                if (Grandpfempr > 0)
                {
                    PdfPCell cellpf = new PdfPCell(new Phrase("Provident Fund @ 13.36 % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellpf.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellpf.Colspan = 0;
                    cellpf.PaddingBottom = 8;
                    cellpf.PaddingTop = 8;
                    tabled.AddCell(cellpf);


                    PdfPCell cellpfon = new PdfPCell(new Phrase(pfwages.ToString("#"), FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellpfon.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellpfon.Colspan = 0;
                    cellpfon.PaddingBottom = 8;
                    cellpfon.PaddingTop = 8;
                    tabled.AddCell(cellpfon);

                    PdfPCell cellpfvalue = new PdfPCell(new Phrase(Grandpfempr.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellpfvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellpfvalue.Colspan = 0;
                    cellpfvalue.PaddingTop = 8;
                    cellpfvalue.PaddingBottom = 8;
                    tabled.AddCell(cellpfvalue);

                }

                if (Grandesiempr > 0)
                {
                    PdfPCell cellesi = new PdfPCell(new Phrase("E.S.I @ 4.75 % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellesi.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellesi.Colspan = 0;
                    cellesi.PaddingBottom = 8;
                    cellesi.PaddingTop = 8;
                    tabled.AddCell(cellesi);

                    PdfPCell cellesion = new PdfPCell(new Phrase(esiwages.ToString("#"), FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellesion.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellesion.Colspan = 0;
                    cellesion.PaddingBottom = 8;
                    cellesion.PaddingTop = 8;
                    tabled.AddCell(cellesion);

                    PdfPCell cellesivalue = new PdfPCell(new Phrase(Grandesiempr.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellesivalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellesivalue.Colspan = 0;
                    cellesivalue.PaddingTop = 8;
                    cellesivalue.PaddingBottom = 8;
                    tabled.AddCell(cellesivalue);

                }

                TSchrg = Samt * SChrgValue / 100;
                ttotal = TSchrg + Samt;

                if (GrandtotalCs > 0)
                {
                    PdfPCell cellScharges = new PdfPCell(new Phrase("Service Charges @ " + SChrgValue + " % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellScharges.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellScharges.Colspan = 2;
                    cellScharges.PaddingBottom = 8;
                    cellScharges.PaddingTop = 8;
                    tabled.AddCell(cellScharges);


                    PdfPCell cellSchargevalue = new PdfPCell(new Phrase(TSchrg.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellSchargevalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellSchargevalue.Colspan = 0;
                    cellSchargevalue.PaddingTop = 8;
                    cellSchargevalue.PaddingBottom = 8;
                    tabled.AddCell(cellSchargevalue);

                }

                PdfPCell cellSTotal = new PdfPCell(new Phrase("SUB TOTAL ", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellSTotal.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellSTotal.Colspan = 2;
                cellSTotal.PaddingBottom = 8;
                cellSTotal.PaddingTop = 8;
                tabled.AddCell(cellSTotal);



                float STotal = 0;

                STotal = TSchrg + Grandpfempr + Samt + Grandesiempr;

                PdfPCell cellSTotalvalue = new PdfPCell(new Phrase(STotal.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellSTotalvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellSTotalvalue.Colspan = 0;
                cellSTotalvalue.PaddingTop = 8;
                cellSTotalvalue.PaddingBottom = 8;
                tabled.AddCell(cellSTotalvalue);
                float STax = 0;

                if (servicetx > 0)
                {
                    PdfPCell cellservtax = new PdfPCell(new Phrase("Service Tax @ " + SCPersent + " % ", FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellservtax.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellservtax.Colspan = 0;
                    cellservtax.PaddingBottom = 8;
                    cellservtax.PaddingTop = 8;
                    tabled.AddCell(cellservtax);

                    PdfPCell cellservtaxon = new PdfPCell(new Phrase(ttotal.ToString("#"), FontFactory.GetFont(FontStyle, 11, Font.NORMAL, BaseColor.BLACK)));
                    cellservtaxon.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellservtaxon.Colspan = 0;
                    cellservtaxon.PaddingBottom = 8;
                    cellservtaxon.PaddingTop = 8;
                    tabled.AddCell(cellservtaxon);



                    STax = (ttotal * servicetx / 100);

                    PdfPCell cellservtaxvalue = new PdfPCell(new Phrase(STax.ToString("#,##"), FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                    cellservtaxvalue.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                    cellservtaxvalue.Colspan = 0;
                    cellservtaxvalue.PaddingTop = 8;
                    cellservtaxvalue.PaddingBottom = 8;
                    tabled.AddCell(cellservtaxvalue);

                }



                float GrTotal = 0;
                GrTotal = STax + STotal;

                PdfPCell cellcgtotal = new PdfPCell(new Phrase("GRAND TOTAL", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellcgtotal.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellcgtotal.PaddingTop = 8;
                cellcgtotal.PaddingBottom = 8;
                cellcgtotal.Colspan = 2;
                tabled.AddCell(cellcgtotal);



                PdfPCell cellcamt = new PdfPCell(new Phrase(GrTotal.ToString("#,##") + ".00", FontFactory.GetFont(FontStyle, 11, Font.BOLD, BaseColor.BLACK)));
                cellcamt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellcamt.PaddingTop = 8;
                cellcamt.PaddingBottom = 8;
                cellcamt.Colspan = 0;
                tabled.AddCell(cellcamt);

                string gtotal = NumberToEnglish.Instance.changeNumericToWords(GrTotal.ToString("#"));

                PdfPCell cellamtinwords = new PdfPCell(new Phrase("(Rupees " + gtotal.Trim() + " Only)", FontFactory.GetFont(FontStyle, 11, Font.BOLDITALIC, BaseColor.BLACK)));
                cellamtinwords.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellamtinwords.Colspan = 3;
                cellamtinwords.PaddingTop = 8;
                cellamtinwords.PaddingBottom = 8;
                tabled.AddCell(cellamtinwords);




                if (Servicetax.Trim().Length > 0)
                {
                    PdfPCell cellc6 = new PdfPCell(new Phrase("SERVICE TAX NO: " + Servicetax, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cellc6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellc6.Colspan = 7;
                    cellc6.BorderWidthBottom = 0;
                    cellc6.BorderWidthLeft = .5f;
                    cellc6.BorderWidthTop = .5f;
                    cellc6.BorderWidthRight = .5f;
                    //cellc6.Border = 0;
                    tabled.AddCell(cellc6);
                }



                if (PANNO.Trim().Length > 0)
                {
                    PdfPCell cellc7 = new PdfPCell(new Phrase("PAN NO: " + PANNO, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cellc7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cellc7.Colspan = 7;
                    cellc7.BorderWidthBottom = .5f;
                    cellc7.BorderWidthLeft = .5f;
                    cellc7.BorderWidthTop = .5f;
                    cellc7.BorderWidthRight = .5f;
                    //cellc7.Border = 0;
                    tabled.AddCell(cellc7);
                }
                if (PFNo.Trim().Length > 0)
                {
                    PdfPCell Pfno = new PdfPCell(new Phrase("EPF NO: " + PFNo, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    Pfno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Pfno.Colspan = 7;
                    Pfno.BorderWidthBottom = .5f;
                    Pfno.BorderWidthLeft = .5f;
                    Pfno.BorderWidthTop = 0;
                    Pfno.BorderWidthRight = .5f;
                    //Pfno.Border = 0;
                    tabled.AddCell(Pfno);
                }

                if (Esino.Trim().Length > 0)
                {
                    PdfPCell ESino = new PdfPCell(new Phrase("ESIC NO: " + Esino, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    ESino.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    ESino.Colspan = 7;
                    ESino.BorderWidthBottom = .5f;
                    ESino.BorderWidthLeft = .5f;
                    ESino.BorderWidthTop = 0;
                    ESino.BorderWidthRight = .5f;
                    //ESino.Border = 0;
                    tabled.AddCell(ESino);
                }

                if (PTno.Trim().Length > 0)
                {
                    PdfPCell Ptno = new PdfPCell(new Phrase("P Tax No: " + PTno, FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    Ptno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    Ptno.Colspan = 7;
                    Ptno.BorderWidthBottom = .5f;
                    Ptno.BorderWidthLeft = .5f;
                    Ptno.BorderWidthTop = 0;
                    Ptno.BorderWidthRight = .5f;
                    //Ptno.Border = 0;
                    tabled.AddCell(Ptno);
                }

                PdfPCell cellspace = new PdfPCell(new Paragraph(" ", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                cellspace.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellspace.Border = 0;
                cellspace.Colspan = 3;
                tabled.AddCell(cellspace);
                //tabled.AddCell(cellspace);

                PdfPCell note = new PdfPCell(new Phrase("Terms & Conditions:", FontFactory.GetFont(FontStyle, 9, Font.BOLD | Font.UNDERLINE, BaseColor.BLACK)));
                note.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note.Colspan = 3;
                note.Border = 0;
                tabled.AddCell(note);

                PdfPCell note1 = new PdfPCell(new Phrase("1. Bill will be treated as correct, if no error reported within 3 days from the date of submission.", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note1.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                note1.Colspan = 3;
                note1.Border = 0;
                tabled.AddCell(note1);

                PdfPCell note2 = new PdfPCell(new Phrase("2. Bill should be cleared with in a week time from the date of submission. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note2.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note2.Colspan = 3;
                note2.Border = 0;
                tabled.AddCell(note2);

                PdfPCell note3 = new PdfPCell(new Phrase("3. Payment should be made along with payment advice. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note3.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note3.Colspan = 3;
                note3.Border = 0;
                tabled.AddCell(note3);

                PdfPCell note4 = new PdfPCell(new Phrase("4. Bill shall not be deducted without prior acceptance in writing. ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note4.Colspan = 3;
                note4.Border = 0;
                tabled.AddCell(note4);

                PdfPCell note5 = new PdfPCell(new Phrase("5. Payment shall be made through crossed cheque in favour of " + cmpname + " Payable at Hyderabad.", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note5.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note5.Colspan = 3;
                note5.Border = 0;
                tabled.AddCell(note5);

                PdfPCell note6 = new PdfPCell(new Phrase("6. Delayed payments will attract interest 24% per annum.  ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note6.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note6.Colspan = 3;
                note6.Border = 0;
                tabled.AddCell(note6);

                PdfPCell note7 = new PdfPCell(new Phrase("7. Bill received with supported documents.  ", FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                note7.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                note7.Colspan = 3;
                note7.Border = 0;
                tabled.AddCell(note7);

                PdfPCell cellc41 = new PdfPCell(new Phrase("For " + cmpname, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellc41.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                cellc41.Colspan = 3;
                cellc41.Border = 0;
                cellc41.PaddingTop = 10;
                tabled.AddCell(cellc41);

                PdfPCell cellc4 = new PdfPCell(new Phrase("   Receiver's signature with stamp                                                                                  Authorized Signatory", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                cellc4.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                cellc4.Colspan = 3;
                cellc4.Border = 0;
                cellc4.PaddingTop = 30;
                tabled.AddCell(cellc4);



                document.Add(tabled);

                document.Close();
                if (nextpagehasPages)
                {
                    string filename = ddlCname.SelectedItem.Text + " " + "Bill-Invoice.pdf";
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=" + filename);
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }
            }

        }

        protected void btninvoicenew_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);

                    document.Open();

                    #region
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    string emailid = "";
                    string website = "";
                    string phoneno = "";
                    string faxno = "";
                    string PANNO = "";
                    string notes = "";
                    string PFNo = "";
                    string Esino = "";
                    string Servicetax = "";
                    string ServiceText = "";
                    float dutiestotal = 0;
                    //string Category = "";
                    string SACCode = "";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                        //CINNO = compInfo.Rows[0]["CINNO"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        emailid = compInfo.Rows[0]["Emailid"].ToString();
                        website = compInfo.Rows[0]["Website"].ToString();
                        phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                        notes = compInfo.Rows[0]["Notes"].ToString();
                        faxno = compInfo.Rows[0]["Faxno"].ToString();
                        //Category = compInfo.Rows[0]["Category"].ToString();
                        SACCode = compInfo.Rows[0]["Faxno"].ToString();

                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }


                    DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    // for both "1/1/2000" or "25/1/2000" formats
                    string billdt = dtn.ToString("MM/dd/yyyy");



                    string CGSTAlias = "";
                    string SGSTAlias = "";
                    string IGSTAlias = "";
                    string Cess1Alias = "";
                    string Cess2Alias = "";
                    string OurGSTINAlias = "";
                    string GSTINAlias = "";

                    var SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,OurGSTINAlias,GSTINAlias   from TblOptions where '" + billdt + "' between fromdate and todate ";
                    DataTable DtTaxes = config.ExecuteReaderWithQueryAsync(SqlQryForTaxes).Result;

                    string SCPersent = "";
                    if (DtTaxes.Rows.Count > 0)
                    {
                        SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                        CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                        SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                        IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                        Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                        Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();
                        OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                    }
                    else
                    {
                        lblResult.Text = "There Is No Tax Values For Generating Bills ";
                        return;
                    }

                    var ContractID = "";

                    var bBillDates = 0;
                    var Gendays = 0;
                    var G_Sdays = 0;
                    float WorkingDays = 0;
                    var Wkdays = "";

                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();
                        bBillDates = int.Parse(DTContractID.Rows[0]["BillDates"].ToString());
                    }
                    #endregion

                    //

                    string SqlQuryForServiCharge = "select ContractId,servicecharge, convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,billdates from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteReaderWithQueryAsync(SqlQuryForServiCharge).Result;
                    string Typeofwork = "";
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string ContractStartDate = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    string POContent = "";
                    string billdates = "0";
                    // string ServiceTaxCategory = "";
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                        POContent = DtServicecharge.Rows[0]["pono"].ToString();
                        Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                        billdates = DtServicecharge.Rows[0]["billdates"].ToString();
                        // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                    }

                    #endregion

                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/billlogo.png");

                    #region For header

                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(70f);
                        gif2.SetAbsolutePosition(34f, 735f);
                        //document.Add(new Paragraph(" "));
                        document.Add(gif2);
                    }


                    #region for companyinfo

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 560f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);

                    PdfPCell CCompName = new PdfPCell(new Paragraph(companyName, FontFactory.GetFont(FontStyle, 14, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 1;
                    CCompName.BorderWidthBottom = 0;
                    CCompName.BorderWidthTop = 1.5f;
                    CCompName.BorderWidthRight = 1.5f;
                    CCompName.BorderWidthLeft = 1.5f;
                    CCompName.Colspan = 2;
                    CCompName.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompName);

                    PdfPCell CCompAddress = new PdfPCell(new Paragraph(companyAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.BorderWidthBottom = 0;
                    CCompAddress.BorderWidthTop = 0f;
                    CCompAddress.BorderWidthRight = 1.5f;
                    CCompAddress.BorderWidthLeft = 1.5f;
                    CCompAddress.Colspan = 2;
                    //CCompAddress.PaddingLeft = 50;
                    //CCompAddress.FixedHeight = 70;
                    CCompAddress.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompAddress);

                    PdfPCell CCompPhone = new PdfPCell(new Paragraph("Tel: " + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CCompPhone.HorizontalAlignment = 1;
                    CCompPhone.BorderWidthBottom = 0;
                    CCompPhone.BorderWidthTop = 0f;
                    CCompPhone.PaddingLeft = 180f;
                    CCompPhone.BorderWidthRight = 0f;
                    CCompPhone.BorderWidthLeft = 1.5f;
                    CCompPhone.Colspan = 1;
                    //CCompPhone.PaddingLeft = 50;
                    //CCompAddress.FixedHeight = 70;
                    CCompPhone.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompPhone);

                    PdfPCell CCompFax = new PdfPCell(new Paragraph(" Fax: " + faxno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CCompFax.HorizontalAlignment = 1;
                    CCompFax.BorderWidthBottom = 0;
                    CCompFax.BorderWidthTop = 0f;
                    CCompFax.BorderWidthRight = 1.5f;
                    CCompFax.BorderWidthLeft = 0f;
                    CCompFax.PaddingLeft = -200f;
                    //CCompFax.PaddingTop = 2f;
                    CCompFax.Colspan = 1;
                    //CCompFax.PaddingLeft = 50;
                    //CCompAddress.FixedHeight = 70;
                    CCompFax.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompFax);


                    PdfPCell Celemail = new PdfPCell(new Paragraph("Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Celemail.BorderWidthBottom = 1.5f;
                    Celemail.BorderWidthTop = 0f;
                    Celemail.PaddingBottom = 5f;
                    //Celemail.PaddingTop = 5f;
                    Celemail.BorderWidthRight = 1.5f;
                    Celemail.BorderWidthLeft = 1.5f;
                    Celemail.Colspan = 2;
                    //Celemail.FixedHeight = 20;
                    tablelogo.AddCell(Celemail);




                    //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph("\n", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right

                    celll.Colspan = 2;
                    //tablelogo.AddCell(celll);

                    // tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 16, Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.BorderWidthBottom = 1.5f;
                    CInvoice.BorderWidthTop = 0;
                    CInvoice.FixedHeight = 25;
                    CInvoice.BorderWidthRight = 1.5f;
                    CInvoice.BorderWidthLeft = 1.5f;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);
                    #endregion

                    PdfPTable address = new PdfPTable(5);
                    address.TotalWidth = 560f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f, 2f, 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(3);
                    tempTable1.TotalWidth = 336f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 2f, 2f, 2f };
                    tempTable1.SetWidths(tempWidth1);

                    #region

                    string selectclientaddress = "select *,s.state as Statename,s.GSTStateCode,gst.gstno from clients c  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteReaderWithQueryAsync(selectclientaddress).Result;
                    string OurGSTIN = "";
                    string GSTIN = "";
                    string StateCode = "0";
                    string State = "";

                    if (dtclientaddress.Rows.Count > 0)
                    {
                        OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                        StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                        GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                        State = dtclientaddress.Rows[0]["Statename"].ToString();
                    }
                    string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate ";
                    DataTable Bdt = config.ExecuteReaderWithQueryAsync(BQry).Result;


                    string SelectBillNo = "Select RIGHT(billno,5) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;
                    string BillNo = "";
                    string DisplayBillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float sbcess = 0;
                    float kkcess = 0;
                    float servicetaxprc = 0;
                    float sbcessprc = 0;
                    float kkcessprc = 0;
                    #region for GST on 21-6-2017 by sharada

                    float CGST = 0;
                    float SGST = 0;
                    float IGST = 0;
                    float Cess1 = 0;
                    float Cess2 = 0;
                    float CGSTPrc = 0;
                    float SGSTPrc = 0;
                    float IGSTPrc = 0;
                    float Cess1Prc = 0;
                    float Cess2Prc = 0;

                    #endregion for GST on 21-6-2017 by sharada
                    float cessprc = 0;
                    float shecessprc = 0;
                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                        {
                            RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                        {
                            sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                        {
                            kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                        }
                        #region for GST as on 21-6-2017 by sharada

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                        {
                            CGST = float.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                        {
                            SGST = float.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                        {
                            IGST = float.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                        {
                            Cess1 = float.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                        {
                            Cess2 = float.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                        {
                            CGSTPrc = float.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                        {
                            SGSTPrc = float.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                        {
                            IGSTPrc = float.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                        {
                            Cess1Prc = float.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                        {
                            Cess2Prc = float.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                        }

                        #endregion for GST as on 21-6-2017 by sharada
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTaxPrc"].ToString()) == false)
                        {
                            servicetaxprc = float.Parse(DtBilling.Rows[0]["ServiceTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessTaxPrc"].ToString()) == false)
                        {
                            sbcessprc = float.Parse(DtBilling.Rows[0]["SBCessTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessTaxPrc"].ToString()) == false)
                        {
                            kkcessprc = float.Parse(DtBilling.Rows[0]["KKCessTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESSPer"].ToString()) == false)
                        {
                            cessprc = float.Parse(DtBilling.Rows[0]["CESSPer"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECessPer"].ToString()) == false)
                        {
                            shecessprc = float.Parse(DtBilling.Rows[0]["SHECessPer"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                        {
                            machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                        {
                            materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                        {
                            maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                        {
                            extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                        {
                            extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                        {
                            discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                        {
                            discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                        }

                        machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                        materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                        maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                        extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                        extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                        discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                        discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                            if (strExtradatacheck == "True")
                            {
                                Extradatacheck = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                        {
                            strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                            if (strExtrastcheck == "True")
                            {
                                ExtraDataSTcheck = true;
                            }
                        }



                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                            if (strSTMachinary == "True")
                            {
                                STMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                            if (strSTMaterial == "True")
                            {
                                STMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                            if (strSTMaintenance == "True")
                            {
                                STMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                            if (strSTExtraone == "True")
                            {
                                STExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                            if (strSTExtratwo == "True")
                            {
                                STExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                            if (strSCMachinary == "True")
                            {
                                SCMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                            if (strSCMaterial == "True")
                            {
                                SCMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                            if (strSCMaintenance == "True")
                            {
                                SCMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                            if (strSCExtraone == "True")
                            {
                                SCExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                            if (strSCExtratwo == "True")
                            {
                                SCExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                            if (strSTDiscountone == "True")
                            {
                                STDiscountone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                            if (strSTDiscounttwo == "True")
                            {
                                STDiscounttwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                        {
                            ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                        {
                            ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                        {
                            staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                        }

                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();


                    PdfPCell mress = new PdfPCell(new Paragraph("Customer's Details:", FontFactory.GetFont(FontStyle, 10, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    mress.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    mress.BorderWidthBottom = 0;
                    mress.BorderWidthTop = 0;
                    mress.Colspan = 3;
                    mress.BorderWidthLeft = 1.5f;
                    mress.BorderWidthRight = 0.5f;
                    tempTable1.AddCell(mress);

                    string addressData = "";

                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno.BorderWidthBottom = 0;
                        clientaddrhno.BorderWidthTop = 0;
                        clientaddrhno.BorderWidthLeft = 1.5f;
                        clientaddrhno.BorderWidthRight = 0.5f;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.Colspan = 3;
                        clientstreet.BorderWidthLeft = 1.5f;
                        clientstreet.BorderWidthRight = 0.5f;
                        //clientstreet.PaddingLeft = 20;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.Colspan = 3;

                        clientstreet.BorderWidthLeft = 1.5f;
                        clientstreet.BorderWidthRight = 0.5f;
                        // clientstreet.PaddingLeft = 20;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 3;
                        clientcolony.BorderWidthBottom = 0;
                        clientcolony.BorderWidthTop = 0;
                        clientcolony.BorderWidthLeft = 1.5f;
                        clientcolony.BorderWidthRight = 0.5f;
                        //clientcolony.PaddingLeft = 20;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 3;
                        clientcity.BorderWidthBottom = 0;
                        clientcity.BorderWidthTop = 0;
                        clientcity.BorderWidthLeft = 1.5f;
                        clientcity.BorderWidthRight = 0.5f;
                        //  clientcity.PaddingLeft = 20;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 3;
                        clientstate.BorderWidthBottom = 0;
                        clientstate.BorderWidthTop = 0;
                        clientstate.BorderWidthLeft = 1.5f;
                        clientstate.BorderWidthRight = 0.5f;
                        // clientstate.PaddingLeft = 20;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 3;
                        clietnpin.BorderWidthBottom = 0;
                        clietnpin.BorderWidthTop = 0;
                        clietnpin.BorderWidthLeft = 1.5f;
                        clietnpin.BorderWidthRight = 0.5f;
                        // clientstate.PaddingLeft = 20;
                        tempTable1.AddCell(clietnpin);
                    }
                    if (Bdt.Rows.Count > 0)
                    {

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(GSTINAlias + ":  " + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 1.5f;
                            clietnpin.BorderWidthRight = 0.5f;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }
                    }
                    if (State.Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph("State: " + State, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 3;
                        clietnpin.BorderWidthBottom = 0;
                        clietnpin.BorderWidthTop = 0;
                        clietnpin.BorderWidthLeft = 1.5f;
                        clietnpin.BorderWidthRight = 0.5f;
                        //  clietnpin.PaddingLeft = 20;
                        tempTable1.AddCell(clietnpin);
                    }
                    if (StateCode.Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code:  " + StateCode, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 3;
                        clietnpin.BorderWidthBottom = 0;
                        clietnpin.BorderWidthTop = 0;
                        clietnpin.BorderWidthLeft = 1.5f;
                        clietnpin.BorderWidthRight = 0.5f;
                        //  clietnpin.PaddingLeft = 20;
                        tempTable1.AddCell(clietnpin);
                    }


                    #endregion

                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.Colspan = 3;
                    // childTable1.FixedHeight = 100;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(2);
                    tempTable2.TotalWidth = 224f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f, 1f };
                    tempTable2.SetWidths(tempWidth2);



                    var phrase = new Phrase();
                    phrase.Add(new Chunk("Bill No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell13 = new PdfPCell();
                    cell13.AddElement(phrase);
                    cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13.BorderWidthBottom = 0;
                    cell13.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13.Colspan = 1;
                    cell13.BorderWidthLeft = 0.5f;
                    cell13.BorderWidthRight = 0f;
                    cell13.PaddingTop = -5;
                    tempTable2.AddCell(cell13);

                    var phrase10 = new Phrase();
                    phrase10.Add(new Chunk(": " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell13v = new PdfPCell();
                    cell13v.AddElement(phrase10);
                    cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13v.BorderWidthBottom = 0;
                    cell13v.PaddingLeft = -50;
                    cell13v.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13v.Colspan = 1;
                    cell13v.BorderWidthLeft = 0;
                    cell13v.BorderWidthRight = 1.5f;
                    cell13v.PaddingTop = -5;
                    tempTable2.AddCell(cell13v);

                    var phrase11 = new Phrase();
                    phrase11.Add(new Chunk("Date", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell131 = new PdfPCell();
                    cell131.AddElement(phrase11);
                    cell131.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell131.BorderWidthBottom = 0;
                    cell131.BorderWidthTop = 0;
                    // cell131.FixedHeight = 35;
                    cell131.Colspan = 1;
                    cell131.BorderWidthLeft = 0.5f;
                    cell131.BorderWidthRight = 0f;
                    cell131.PaddingTop = -5;
                    tempTable2.AddCell(cell131);

                    var phrase11v = new Phrase();
                    phrase11v.Add(new Chunk(": " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell131v = new PdfPCell();
                    cell131v.AddElement(phrase11v);
                    cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell131v.BorderWidthBottom = 0;
                    cell131v.BorderWidthTop = 0;
                    // cell131.FixedHeight = 35;
                    cell131v.PaddingLeft = -50;
                    cell131v.Colspan = 1;
                    cell131v.BorderWidthLeft = 0;
                    cell131v.BorderWidthRight = 1.5f;
                    cell131v.PaddingTop = -5;
                    tempTable2.AddCell(cell131v);

                    var phrase12 = new Phrase();
                    phrase12.Add(new Chunk("PAN No.", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell1311 = new PdfPCell();
                    cell1311.AddElement(phrase12);
                    cell1311.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell1311.BorderWidthBottom = 0;
                    cell1311.BorderWidthTop = 0;
                    //cell1311.FixedHeight = 35;
                    cell1311.Colspan = 1;
                    cell1311.BorderWidthLeft = 0.5f;
                    cell1311.BorderWidthRight = 0f;
                    cell1311.PaddingTop = -5;
                    tempTable2.AddCell(cell1311);

                    var phrase12v = new Phrase();
                    phrase12v.Add(new Chunk(": " + PANNO, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell1311v = new PdfPCell();
                    cell1311v.AddElement(phrase12v);
                    cell1311v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell1311v.BorderWidthBottom = 0;
                    cell1311v.BorderWidthTop = 0;
                    cell1311v.PaddingLeft = -50f;
                    //cell1311v.FixedHeight = 35;
                    cell1311v.Colspan = 1;
                    cell1311v.BorderWidthLeft = 0;
                    cell1311v.BorderWidthRight = 1.5f;
                    cell1311v.PaddingTop = -5;
                    tempTable2.AddCell(cell1311v);

                    if (dtn < DateTime.ParseExact("01/07/2017", "dd/MM/yyyy", CultureInfo.InvariantCulture))
                    {
                        if (Servicetax.Trim().Length > 0)
                        {
                            var phrase22 = new Phrase();
                            phrase22.Add(new Chunk("S Tax No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell16 = new PdfPCell();
                            cell16.AddElement(phrase22);
                            cell16.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell16.BorderWidthBottom = 0;
                            cell16.BorderWidthTop = 0f;
                            cell16.Colspan = 1;
                            cell16.BorderWidthLeft = 0.5f;
                            cell16.BorderWidthRight = 0f;
                            cell16.PaddingTop = -5;
                            tempTable2.AddCell(cell16);

                            var phrase22v = new Phrase();
                            phrase22v.Add(new Chunk(": " + Servicetax, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell16v = new PdfPCell();
                            cell16v.AddElement(phrase22v);
                            cell16v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell16v.BorderWidthBottom = 0;
                            cell16v.BorderWidthTop = 0f;
                            cell16v.PaddingLeft = -50f;
                            cell16v.Colspan = 1;
                            cell16v.BorderWidthLeft = 0;
                            cell16v.BorderWidthRight = 1.5f;
                            cell16v.PaddingTop = -5;
                            tempTable2.AddCell(cell16v);
                        }
                    }
                    if (Bdt.Rows.Count > 0)
                    {
                        if (OurGSTIN.Length > 0)
                        {

                            var phrase21v = new Phrase();
                            phrase21v.Add(new Chunk(OurGSTINAlias, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell16v = new PdfPCell();
                            cell16v.AddElement(phrase21v);
                            cell16v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell16v.BorderWidthBottom = 0;
                            cell16v.BorderWidthTop = 0f;
                            cell16v.Colspan = 1;
                            cell16v.BorderWidthLeft = 0.5f;
                            cell16v.BorderWidthRight = 0;
                            cell16v.PaddingTop = -5;
                            tempTable2.AddCell(cell16v);

                            var phrase21vv = new Phrase();
                            phrase21vv.Add(new Chunk(": " + OurGSTIN, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell16vv = new PdfPCell();
                            cell16vv.AddElement(phrase21vv);
                            cell16vv.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell16vv.BorderWidthBottom = 0;
                            cell16vv.BorderWidthTop = 0f;
                            cell16vv.Colspan = 1;
                            cell16vv.BorderWidthLeft = 0;
                            cell16vv.BorderWidthRight = 1.5f;
                            cell16vv.PaddingLeft = -50f;
                            cell16vv.PaddingTop = -5;
                            tempTable2.AddCell(cell16vv);
                        }
                    }

                    if (SACCode.Trim().Length > 0)
                    {
                        var phrase222 = new Phrase();
                        phrase222.Add(new Chunk("SAC Code", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell17 = new PdfPCell();
                        cell17.AddElement(phrase222);
                        cell17.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell17.BorderWidthBottom = 0;
                        cell17.BorderWidthTop = 0f;
                        cell17.Colspan = 1;
                        cell17.BorderWidthLeft = 0.5f;
                        cell17.BorderWidthRight = 0f;
                        cell17.PaddingTop = -5;
                        tempTable2.AddCell(cell17);

                        var phrasev222 = new Phrase();
                        phrasev222.Add(new Chunk(": " + SACCode, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell17v = new PdfPCell();
                        cell17v.AddElement(phrasev222);
                        cell17v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell17v.BorderWidthBottom = 0;
                        cell17v.BorderWidthTop = 0f;
                        cell17v.PaddingLeft = -50f;
                        cell17v.Colspan = 1;
                        cell17v.BorderWidthLeft = 0;
                        cell17v.BorderWidthRight = 1.5f;
                        cell17v.PaddingTop = -5;
                        tempTable2.AddCell(cell17v);
                    }
                    string Fromdate = txtfromdate.Text;
                    string Todate = txttodate.Text;
                    if (billdates != "0")
                    {
                        var phrase2 = new Phrase();
                        phrase2.Add(new Chunk("Bill Period  ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell14 = new PdfPCell();
                        cell14.AddElement(phrase2);
                        cell14.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell14.BorderWidthBottom = 0;
                        cell14.BorderWidthTop = 0f;
                        cell14.Colspan = 1;
                        cell14.BorderWidthLeft = 0.5f;
                        cell14.BorderWidthRight = 0f;
                        cell14.PaddingTop = -5;
                        tempTable2.AddCell(cell14);

                        var phrase2v = new Phrase();
                        phrase2v.Add(new Chunk(": " + Fromdate + "  to  " +
                            Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell14v = new PdfPCell();
                        cell14v.AddElement(phrase2v);
                        cell14v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell14v.BorderWidthBottom = 0;
                        cell14v.BorderWidthTop = 0f;
                        cell14v.PaddingLeft = -50f;
                        cell14v.Colspan = 1;
                        cell14v.BorderWidthLeft = 0;
                        cell14v.BorderWidthRight = 1.5f;
                        cell14v.PaddingTop = -5;
                        tempTable2.AddCell(cell14v);
                    }

                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.Colspan = 2;
                    //childTable2.FixedHeight = 100;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    // address.AddCell(celll);


                    document.Add(address);




                    PdfPTable address1 = new PdfPTable(1);
                    address1.TotalWidth = 560f;
                    address1.LockedWidth = true;
                    float[] addreslogo1 = new float[] { 2f };
                    address1.SetWidths(addreslogo1);


                    PdfPCell cellser = new PdfPCell(new Phrase("Sub: -We are presenting our bill for the Security Services provided at your establishment for the month of " + GetMonthName() + " " + GetMonthOfYear() + ".Kindly release the payment at the earliest ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellser.HorizontalAlignment = 0;
                    cellser.BorderWidthBottom = 0.5f;
                    cellser.BorderWidthLeft = 1.5f;
                    cellser.BorderWidthTop = 0.5f;
                    cellser.BorderWidthRight = 1.5f;
                    cellser.FixedHeight = 25;
                    address1.AddCell(cellser);

                    document.Add(address1);
                    #endregion

                    #region

                    int colCount = 6;

                    PdfPTable table = new PdfPTable(colCount);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = 1;
                    float[] colWidths = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    table.SetWidths(colWidths);
                    PdfPCell cell;
                    string cellText;

                    #region for gridview
                    //create the header row
                    for (int colIndex = 0; colIndex < 6; colIndex++)
                    {
                        //set the column width

                        if (colIndex == 0)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 1.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 1)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase("Description", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                        if (colIndex == 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase("No. of Emps ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 3)
                        {

                            cell = new PdfPCell(new Phrase("No.of Dts/Hrs", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 4)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[3].Text);
                            //create a new cell with header text
                            //cellText = "UOM";
                            //set the background color for the header cell
                            cell = new PdfPCell(new Phrase("Pay Rate", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }


                        if (colIndex == 5)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = "Amount ";
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 1.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                    }
                    float totaldts = 0;
                    ////export rows from GridView to table
                    for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                    {
                        if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                        //gvClientBilling.RowStyle.BorderColor = System.Drawing.Color.Gray;
                        {
                            Label lblamount = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                            if (lblamount != null)
                            {
                                string strAmount = lblamount.Text;
                                float amount = 0;
                                if (strAmount.Length > 0)
                                    amount = Convert.ToSingle(strAmount);
                                if (amount >= 0)
                                {
                                    for (int j = 0; j < 6; j++)
                                    {
                                        if (j == 0)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText + "\n\n", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.Colspan = 1;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthLeft = 1.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.MinimumHeight = 14;
                                            cell.HorizontalAlignment = 1;
                                            table.AddCell(cell);
                                        }

                                        //fetch the column value of the current row
                                        if (j == 1)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label1.Text + "'";


                                            DataTable dt = config.ExecuteReaderWithQueryAsync(summaryQry).Result;
                                            cellText = label1.Text;
                                            if (dt.Rows.Count > 0)
                                            {
                                                if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                    cellText += " (" + dt.Rows[0]["summary"].ToString() + ")";
                                            }

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 0;
                                            cell.Colspan = 1;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.BorderWidthTop = 0;
                                            table.AddCell(cell);
                                        }


                                        if (j == 2)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.Colspan = 1;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.BorderWidthTop = 0;
                                            table.AddCell(cell);
                                        }
                                        if (j == 3)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthBottom = 0;
                                            cell.Colspan = 1;
                                            table.AddCell(cell);
                                            if (cellText == "")
                                            {
                                                cellText = "0";
                                            }
                                            totaldts += Convert.ToSingle(cellText);
                                        }

                                        if (j == 4)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                            Label label2 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                               "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label2.Text + "'";

                                            //Duty Hrs removed for KL on 27/05/2015
                                            DataTable dt = config.ExecuteReaderWithQueryAsync(dutyhrsQry).Result;
                                            cellText = label1.Text;

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            //cell.Colspan = 2;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.Colspan = 1;
                                            table.AddCell(cell);
                                        }
                                        //paragraph.Alignment = Element.ALIGN_CENTER
                                        if (j == 5)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            cell.Colspan = 1;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = 1.5f;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            table.AddCell(cell);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region for space
                    PdfPCell Cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty.HorizontalAlignment = 2;
                    Cellempty.Colspan = 1;
                    Cellempty.BorderWidthTop = 0;
                    Cellempty.BorderWidthRight = 0.5f;
                    Cellempty.BorderWidthLeft = 1.5f;
                    Cellempty.BorderWidthBottom = 0;
                    Cellempty.MinimumHeight = 14;
                    PdfPCell Cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty1.HorizontalAlignment = 2;
                    Cellempty1.Colspan = 1;
                    Cellempty1.BorderWidthTop = 0;
                    Cellempty1.BorderWidthRight = 0.5f;
                    Cellempty1.BorderWidthLeft = 0.5f;
                    Cellempty1.BorderWidthBottom = 0;
                    Cellempty1.MinimumHeight = 14;

                    PdfPCell Cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty2.HorizontalAlignment = 2;
                    Cellempty2.Colspan = 1;
                    Cellempty2.BorderWidthTop = 0;
                    Cellempty2.BorderWidthRight = 0.5f;
                    Cellempty2.BorderWidthLeft = 0.5f;
                    Cellempty2.BorderWidthBottom = 0;
                    Cellempty2.MinimumHeight = 14;

                    PdfPCell Cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty3.HorizontalAlignment = 2;
                    Cellempty3.Colspan = 1;
                    Cellempty3.BorderWidthTop = 0;
                    Cellempty3.BorderWidthRight = 0.5f;
                    Cellempty3.BorderWidthLeft = 0.5f;
                    Cellempty3.BorderWidthBottom = 0;
                    Cellempty3.MinimumHeight = 14;

                    PdfPCell Cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty4.HorizontalAlignment = 2;
                    Cellempty4.Colspan = 1;
                    Cellempty4.BorderWidthTop = 0;
                    Cellempty4.BorderWidthRight = 0.5f;
                    Cellempty4.BorderWidthLeft = 0.5f;
                    Cellempty4.BorderWidthBottom = 0;
                    Cellempty4.MinimumHeight = 14;

                    PdfPCell Cellempty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty5.HorizontalAlignment = 2;
                    Cellempty5.Colspan = 1;
                    Cellempty5.BorderWidthTop = 0;
                    Cellempty5.BorderWidthRight = 1.5f;
                    Cellempty5.BorderWidthLeft = 0.5f;
                    Cellempty5.BorderWidthBottom = 0;
                    Cellempty5.MinimumHeight = 14;

                    if (gvClientBilling.Rows.Count == 1)
                    {
                        #region For cell count

                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //17
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //18
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //19
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 2)
                    {
                        #region For cell count

                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //17
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //18
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);



                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 3)
                    {
                        #region For cell count
                        //1

                        //2
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //17
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 4)
                    {
                        #region For cell count
                        //1

                        //2
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //3
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 5)
                    {
                        #region For cell count
                        //1

                        //2
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //3
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //4
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 6)
                    {
                        #region For cell count
                        //1

                        //2
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //3
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //4
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 7)
                    {
                        #region For cell count
                        //1

                        //2
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //3
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //4
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //5
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 8)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 9)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 10)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 11)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 12)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 13)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 14)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 15)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 16)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 17)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 18)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 19)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }


                    #endregion


                    document.Add(table);

                    PdfContentByte content = writer.DirectContent;



                    PdfPTable address11 = new PdfPTable(colCount);
                    address11.TotalWidth = 560f;
                    address11.LockedWidth = true;
                    float[] addreslogo11 = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    address11.SetWidths(addreslogo11);

                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 1;
                    cell.MinimumHeight = 20;
                    address11.AddCell(cell);

                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase(totaldts.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase(totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);

                    PdfPTable tempTable11 = new PdfPTable(3);
                    tempTable11.TotalWidth = 323f;
                    tempTable11.LockedWidth = true;
                    float[] tempWidth21 = new float[] { 1.2f, 6.2f, 2f };//1.2f, 6.2f, 2f, 2.3f
                    tempTable11.SetWidths(tempWidth21);
                    // 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    #region
                    cell = new PdfPCell(new Phrase(" PLEASE NOTE : Payment Shall be made through RTGS only.", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  A/c.No 565101000063165", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    // cell.PaddingRight = 40;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  IFSC Code : CORP0000022", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  Bank : Corporation Bank,Bangalore City Branch,Gandhinagar", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);


                    #endregion

                    PdfPCell Chid = new PdfPCell(tempTable11);
                    Chid.Border = 0;
                    Chid.Colspan = 3;
                    Chid.HorizontalAlignment = 0;
                    address11.AddCell(Chid);

                    PdfPTable tempTable22 = new PdfPTable(3);
                    tempTable22.TotalWidth = 237f;
                    tempTable22.LockedWidth = true;
                    float[] tempWidth22 = new float[] { 2.2f, 2f, 2.7f }; ;//2.9f, 1.83f
                    tempTable22.SetWidths(tempWidth22);

                    #region
                    #region



                    if (machinarycost > 0)
                    {
                        if (STMachinary == true)
                        {
                            if (SCMachinary == true)
                            {


                                PdfPCell celldcst1001 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1001.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1001.Colspan = 2;
                                celldcst1001.BorderWidthBottom = 0;
                                celldcst1001.BorderWidthLeft = 0;
                                celldcst1001.BorderWidthRight = 0;
                                celldcst1001.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst1001);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == true)
                        {
                            if (SCMaterial == true)
                            {



                                PdfPCell celldcst101 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst101.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst101.Colspan = 2;
                                celldcst101.BorderWidthBottom = 0;
                                celldcst101.BorderWidthLeft = 0;
                                celldcst101.BorderWidthRight = 0;
                                celldcst101.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst101);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == true)
                        {
                            if (SCMaintenance == true)
                            {

                                PdfPCell celldcst102 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst102.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst102.Colspan = 2;
                                celldcst102.BorderWidthBottom = 0;
                                celldcst102.BorderWidthLeft = 0;
                                celldcst102.BorderWidthRight = 0;
                                celldcst102.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst102);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == true)
                        {
                            if (SCExtraone == true)
                            {


                                PdfPCell celldcst103 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst103.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst103.Colspan = 2;
                                celldcst103.BorderWidthBottom = 0;
                                celldcst103.BorderWidthLeft = 0;
                                celldcst103.BorderWidthRight = 0;
                                celldcst103.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst103);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == true)
                        {
                            if (SCExtratwo == true)
                            {


                                PdfPCell celldcst105 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst105.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst105.Colspan = 2;
                                celldcst105.BorderWidthBottom = 0;
                                celldcst105.BorderWidthLeft = 0;
                                celldcst105.BorderWidthRight = 0;
                                celldcst105.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst105);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    #region When Extra data is checked and STcheck is false and SCcheck is true

                    if (machinarycost > 0)
                    {
                        if (STMachinary == false)
                        {
                            if (SCMachinary == true)
                            {

                                PdfPCell celldcst106 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst106.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst106.Colspan = 2;
                                celldcst106.BorderWidthBottom = 0;
                                celldcst106.BorderWidthLeft = 1.5f;
                                celldcst106.BorderWidthRight = 0;
                                celldcst106.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst106);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == false)
                        {
                            if (SCMaterial == true)
                            {


                                PdfPCell celldcst107 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst107.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst107.Colspan = 2;
                                celldcst107.BorderWidthBottom = 0;
                                celldcst107.BorderWidthLeft = 0;
                                celldcst107.BorderWidthRight = 0;
                                celldcst107.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst107);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == false)
                        {
                            if (SCMaintenance == true)
                            {


                                PdfPCell celldcst108 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst108.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst108.Colspan = 2;
                                celldcst108.BorderWidthBottom = 0;
                                celldcst108.BorderWidthLeft = 0;
                                celldcst108.BorderWidthRight = 0;
                                celldcst108.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst108);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == false)
                        {
                            if (SCExtraone == true)
                            {


                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 2;
                                celldcst1.BorderWidthBottom = 0;
                                celldcst1.BorderWidthLeft = 0;
                                celldcst1.BorderWidthRight = 0;
                                celldcst1.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == false)
                        {
                            if (SCExtratwo == true)
                            {

                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 2;
                                celldcst1.BorderWidthBottom = 0;
                                celldcst1.BorderWidthLeft = 0;
                                celldcst1.BorderWidthRight = 0;
                                celldcst1.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }

                    #endregion



                    if (servicecharge > 0)//bSCType == true)
                    {
                        float scharge = servicecharge;
                        if (scharge > 0)
                        {
                            string SCharge = "";
                            if (bSCType == false)
                            {
                                SCharge = ServiceCharge + " %";
                            }
                            else
                            {
                                SCharge = ServiceCharge;
                            }

                            PdfPCell celldc2 = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc2.Colspan = 2;
                            celldc2.BorderWidthBottom = 0;
                            celldc2.BorderWidthLeft = 0;
                            celldc2.BorderWidthTop = 0;
                            celldc2.BorderWidthRight = .5f;
                            //celldc2.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldc2);

                            PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc4.BorderWidthBottom = 0;
                            celldc4.Colspan = 1;
                            celldc4.BorderWidthLeft = 0;
                            celldc4.BorderWidthTop = .5f;
                            celldc4.BorderWidthRight = .5f;
                            //celldc4.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldc4);
                        }
                    }

                    #endregion



                    #region When Extra data is checked and STcheck is true
                    if (Extradatacheck == true)
                    {
                        //float machineryCostwithst = 0;
                        //if (lblMachinerywithst.Text.Length > 0)
                        //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        //float materialcostwithst = 0;
                        //if (lblMaterialwithst.Text.Length > 0)
                        //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }


                        //float electricalcostwithst = 0;
                        //if (lblElectricalwithst.Text.Length > 0)
                        //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        //float extraamtwithst = 0;
                        //if (lblextraonewithst.Text.Length > 0)
                        //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == false)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        //float Extraamtwithst1 = 0;
                        //if (lblextratwowithst.Text.Length > 0)
                        //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }


                    }

                    #endregion

                    if (!bIncludeST)
                    {

                        string scpercent = "";
                        if (bST75 == true)
                        {
                            scpercent = "3";
                        }
                        else
                        {
                            scpercent = SCPersent;
                        }

                        if (servicetax > 0)
                        {

                            PdfPCell srvtax = new PdfPCell(new Phrase("Service Tax @ " + servicetaxprc + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            srvtax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            srvtax.Colspan = 2;
                            srvtax.BorderWidthBottom = 0;
                            srvtax.BorderWidthLeft = 0;
                            srvtax.BorderWidthTop = 0;
                            srvtax.BorderWidthRight = 0.5f;
                            // srvtax.SetLeading(0, 1.3f);
                            tempTable22.AddCell(srvtax);

                            PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0.5f;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(celldd4);

                        }

                        if (sbcess > 0)
                        {

                            string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + sbcessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = 0;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(celldd2);

                            PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.BorderWidthLeft = 0.5f;
                            celldd2.Colspan = 1;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(celldd4);

                        }



                        if (kkcess > 0)
                        {


                            string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                            PdfPCell Cellmtcesskk1 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + kkcessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            Cellmtcesskk1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellmtcesskk1.Colspan = 2;
                            Cellmtcesskk1.BorderWidthBottom = 0;
                            Cellmtcesskk1.BorderWidthLeft = 0;
                            Cellmtcesskk1.BorderWidthTop = 0;
                            Cellmtcesskk1.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(Cellmtcesskk1);

                            PdfPCell Cellmtcesskk2 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            Cellmtcesskk2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellmtcesskk2.BorderWidthBottom = 0;
                            Cellmtcesskk2.Colspan = 1;
                            Cellmtcesskk2.BorderWidthLeft = 0.5f;
                            Cellmtcesskk2.BorderWidthTop = 0;
                            Cellmtcesskk2.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(Cellmtcesskk2);

                        }
                        #region for GST as on 17-6-2017

                        if (CGST > 0)
                        {
                            PdfPCell CellCGST = new PdfPCell(new Phrase(CGSTAlias + " @ " + CGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = 2;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = 0;
                            CellCGST.BorderWidthTop = 0;
                            CellCGST.BorderWidthRight = 0.5f;
                            CellCGST.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCGST);

                            PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGSTAmt.BorderWidthBottom = 0;
                            CellCGSTAmt.BorderWidthLeft = 0.5f;
                            CellCGSTAmt.BorderWidthTop = 0;
                            CellCGSTAmt.BorderWidthRight = 1.5f;
                            CellCGSTAmt.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCGSTAmt);
                        }


                        if (SGST > 0)
                        {
                            PdfPCell CellSGST = new PdfPCell(new Phrase(SGSTAlias + " @ " + SGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellSGST.Colspan = 2;
                            CellSGST.BorderWidthBottom = 0;
                            CellSGST.BorderWidthLeft = 0f;
                            CellSGST.BorderWidthTop = 0;
                            CellSGST.BorderWidthRight = 0.5f;
                            CellSGST.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellSGST);

                            PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellSGSTAmt.BorderWidthBottom = 0;
                            CellSGSTAmt.BorderWidthLeft = 0.5f;
                            CellSGSTAmt.BorderWidthTop = 0;
                            CellSGSTAmt.BorderWidthRight = 1.5f;
                            CellSGSTAmt.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellSGSTAmt);

                        }

                        if (IGST > 0)
                        {
                            PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellIGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellIGST.Colspan = 2;
                            CellIGST.BorderWidthBottom = 0;
                            CellIGST.BorderWidthLeft = 0;
                            CellIGST.BorderWidthTop = 0;
                            CellIGST.BorderWidthRight = 0.5f;
                            CellIGST.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellIGST);

                            PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellIGSTAmt.BorderWidthBottom = 0;
                            CellIGSTAmt.BorderWidthLeft = 0.5f;
                            CellIGSTAmt.BorderWidthTop = 0;
                            CellIGSTAmt.BorderWidthRight = 1.5f;
                            CellIGSTAmt.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellIGSTAmt);

                        }

                        if (Cess1 > 0)
                        {
                            PdfPCell CellCess1 = new PdfPCell(new Phrase(Cess1Alias + " @ " + Cess1Prc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess1.Colspan = 2;
                            CellCess1.BorderWidthBottom = 0;
                            CellCess1.BorderWidthLeft = 0;
                            CellCess1.BorderWidthTop = 0;
                            CellCess1.BorderWidthRight = 0.5f;
                            CellCess1.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCess1);

                            PdfPCell CellCess1Amt = new PdfPCell(new Phrase(Cess1.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess1Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess1Amt.BorderWidthBottom = 0;
                            CellCess1Amt.BorderWidthLeft = 0.5f;
                            CellCess1Amt.BorderWidthTop = 0;
                            CellCess1Amt.BorderWidthRight = 1.5f;
                            CellCess1Amt.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCess1Amt);

                        }


                        if (Cess2 > 0)
                        {
                            PdfPCell CellCess2 = new PdfPCell(new Phrase(Cess2Alias + " @ " + Cess2Prc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess2.Colspan = 2;
                            CellCess2.BorderWidthBottom = 0;
                            CellCess2.BorderWidthLeft = 0;
                            CellCess2.BorderWidthTop = 0;
                            CellCess2.BorderWidthRight = 0.5f;
                            CellCess2.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCess2);

                            PdfPCell CellCess2Amt = new PdfPCell(new Phrase(Cess2.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess2Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess2Amt.BorderWidthBottom = 0;
                            CellCess2Amt.BorderWidthLeft = 0.5f;
                            CellCess2Amt.BorderWidthTop = 0;
                            CellCess2Amt.BorderWidthRight = 1.5f;
                            CellCess2Amt.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCess2Amt);

                        }

                        #endregion for GST 

                        if (cess > 0)
                        {

                            PdfPCell cessblnk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            cessblnk.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                            cessblnk.Colspan = 2;
                            cessblnk.BorderWidthBottom = 0.5f;
                            cessblnk.BorderWidthLeft = 0.5f;
                            cessblnk.BorderWidthTop = 0;
                            cessblnk.BorderWidthRight = 0f;
                            cessblnk.SetLeading(0, 1.3f);
                            tempTable22.AddCell(cessblnk);

                            string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("CESS @ " + CESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = 0.5f;
                            celldd2.BorderWidthLeft = 0.5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = 0f;
                            //celldd2.PaddingBottom = 5;
                            //celldd2.PaddingTop = 5;
                            tempTable22.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0.5f;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0.5f;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = 0.5f;
                            //celldd4.PaddingBottom = 5;
                            //celldd4.PaddingTop = 5;
                            tempTable22.AddCell(celldd4);

                        }

                        if (shecess > 0)
                        {

                            PdfPCell shecessblnk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            shecessblnk.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                            shecessblnk.Colspan = 2;
                            shecessblnk.BorderWidthBottom = 0.5f;
                            shecessblnk.BorderWidthLeft = 0.5f;
                            shecessblnk.BorderWidthTop = 0;
                            shecessblnk.BorderWidthRight = 0f;
                            shecessblnk.SetLeading(0, 1.3f);
                            tempTable22.AddCell(shecessblnk);


                            string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                            PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ " + SHECESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf2.Colspan = 2;
                            celldf2.BorderWidthBottom = 0.5f;
                            celldf2.BorderWidthLeft = 0.5f;
                            celldf2.BorderWidthTop = 0;
                            celldf2.BorderWidthRight = 0f;
                            //celldf2.PaddingBottom = 5;
                            //celldf2.PaddingTop = 5;
                            tempTable22.AddCell(celldf2);


                            PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf4.BorderWidthBottom = 0.5f;
                            celldf4.Colspan = 1;
                            celldf4.BorderWidthLeft = 0.5f;
                            celldf4.BorderWidthTop = 0;
                            celldf4.BorderWidthRight = 0.5f;
                            ////celldf4.PaddingBottom = 5;
                            //celldf4.PaddingTop = 5;
                            //celldf4.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldf4);
                        }
                    }

                    #region When Extradata check is false and STcheck is false



                    if (Extradatacheck == true)
                    {
                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == false)
                                {



                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0.5f;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0.5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;

                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == false)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0.5f;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0.5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }


                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == false)
                                {



                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;

                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = 1.5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 1.5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = 1.5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (discountone > 0)
                        {


                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.Colspan = 2;
                            celldMt1.BorderWidthBottom = 0;
                            celldMt1.BorderWidthLeft = 0;
                            celldMt1.BorderWidthTop = .5f;
                            celldMt1.BorderWidthRight = .5f;
                            // celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = 0;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.Colspan = 1;
                            celldMt3.BorderWidthTop = .5f;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldMt3);
                        }
                        if (discounttwo > 0)
                        {



                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.BorderWidthBottom = 0;
                            celldMt1.BorderWidthLeft = 0;
                            celldMt1.BorderWidthTop = 0;
                            celldMt1.BorderWidthRight = .5f;
                            //celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            celldMt1.Colspan = 2;
                            tempTable22.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = 0;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.Colspan = 1;
                            celldMt3.BorderWidthTop = 0;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldMt3);
                        }
                    }
                    #endregion
                    #endregion

                    PdfPCell Chids = new PdfPCell(tempTable22);
                    Chids.Border = 0;
                    Chids.Colspan = 3;
                    Chids.HorizontalAlignment = 0;
                    address11.AddCell(Chids);

                    document.Add(address11);
                    #region footer
                    PdfPTable addrssf = new PdfPTable(colCount);
                    addrssf.TotalWidth = 560f;
                    addrssf.LockedWidth = true;
                    float[] addr = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    addrssf.SetWidths(addr);


                    PdfPTable cellt = new PdfPTable(3);
                    cellt.TotalWidth = 323f;
                    cellt.LockedWidth = true;
                    float[] widthcell = new float[] { 1.2f, 6.2f, 2f };//1.2f, 6.2f, 2f, 2.3f
                    cellt.SetWidths(widthcell);
                    #region

                    cell = new PdfPCell(new Phrase(" Amount In Words: ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    cellt.AddCell(cell);

                    //string Amountinwords = NumberToEnglish.Instance.changeNumericToWords(Grandtotal.ToString());

                    #region Amount in words
                    string GTotal = Convert.ToDecimal(Grandtotal.ToString()).ToString("0.00");
                    string[] arr = GTotal.ToString().Split("."[0]);
                    string inwords = "";
                    string rupee = (arr[0]);
                    string paise = "";
                    string Amountinwords = "";
                    if (arr.Length == 2)
                    {
                        if (arr[1].Length > 0 && arr[1] != "00")
                        {
                            paise = (arr[1]);
                        }
                    }

                    if (paise != "0.00" && paise != "0" && paise != "")
                    {
                        int I = Int16.Parse(paise);
                        String p = NumberToEnglish.Instance.NumbersToWords(I, true);
                        paise = p;
                        rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), false);
                        inwords = " Rupees " + rupee + "" + paise + " Paise Only";

                    }
                    else
                    {
                        rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), true);
                        inwords = " Rupees " + rupee + " Only";
                    }



                    Amountinwords = inwords;
                    #endregion

                    cell = new PdfPCell(new Phrase("  " + Amountinwords.Trim() + "", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    cellt.AddCell(cell);
                    #endregion
                    PdfPCell Chid1 = new PdfPCell(cellt);
                    Chid1.Border = 0;
                    Chid1.Colspan = 3;
                    Chid1.HorizontalAlignment = 0;
                    addrssf.AddCell(Chid1);

                    PdfPTable celltf = new PdfPTable(3);
                    celltf.TotalWidth = 237f;
                    celltf.LockedWidth = true;
                    float[] Dfv = new float[] { 2.2f, 2f, 2.7f }; ;//2.9f, 1.83f
                    celltf.SetWidths(Dfv);

                    #region
                    cell = new PdfPCell(new Phrase("Grand  Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 2;
                    celltf.AddCell(cell);
                    cell = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    celltf.AddCell(cell);

                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 2;
                    // cell.MinimumHeight = 30;
                    celltf.AddCell(cell);
                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    celltf.AddCell(cell);

                    #endregion

                    PdfPCell Chid2 = new PdfPCell(celltf);
                    Chid2.Border = 0;
                    Chid2.Colspan = 3;
                    Chid2.HorizontalAlignment = 0;
                    addrssf.AddCell(Chid2);

                    document.Add(addrssf);

                    PdfPTable Addterms = new PdfPTable(colCount);
                    Addterms.TotalWidth = 560f;
                    Addterms.LockedWidth = true;
                    float[] widthrerms = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    Addterms.SetWidths(widthrerms);

                    PdfPTable Childterms = new PdfPTable(3);
                    Childterms.TotalWidth = 323f;
                    Childterms.LockedWidth = true;
                    float[] Celters = new float[] { 1.2f, 6.2f, 2f };
                    Childterms.SetWidths(Celters);

                    cell = new PdfPCell(new Phrase(" Payment Terms \n\n", FontFactory.GetFont(FontStyle, 9, Font.UNDERLINE | Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  1.  Payment to be made as per Agreement Terms.\n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  2.  An interest of 24% p.a.shall be levied from the due date onwards.\n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);

                    cell = new PdfPCell(new Phrase("  3.  All disputes Subjects to Bangalore Jurisdiction.\n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 1.5f;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);

                    PdfPCell Chid3 = new PdfPCell(Childterms);
                    Chid3.Border = 0;
                    Chid3.Colspan = 3;
                    Chid3.HorizontalAlignment = 0;
                    Addterms.AddCell(Chid3);

                    PdfPTable chilk = new PdfPTable(3);
                    chilk.TotalWidth = 237f;
                    chilk.LockedWidth = true;
                    float[] Celterss = new float[] { 2.2f, 2f, 2.7f };
                    chilk.SetWidths(Celterss);

                    cell = new PdfPCell(new Phrase("\nFor " + companyName, FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 3;
                    chilk.AddCell(cell);

                    cell = new PdfPCell(new Phrase("\n\n\n\nAuthorised Signatory", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 1.5f;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 3;
                    chilk.AddCell(cell);


                    PdfPCell Chid4 = new PdfPCell(chilk);
                    Chid4.Border = 0;
                    Chid4.Colspan = 3;
                    Chid4.HorizontalAlignment = 0;
                    Addterms.AddCell(Chid4);

                    document.Add(Addterms);

                    #endregion


                    #endregion

                    string filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";

                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }

                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        protected void btninvoicenew1_Click(object sender, EventArgs e)
        {
            int month = 0;
            month = GetMonthBasedOnSelectionDateorMonth();
            if (gvClientBilling.Rows.Count > 0)
            {
                try
                {
                    MemoryStream ms = new MemoryStream();
                    Document document = new Document(PageSize.A4);
                    Font NormalFont = FontFactory.GetFont("Arial", 12, Font.NORMAL, BaseColor.BLACK);
                    PdfWriter writer = PdfWriter.GetInstance(document, ms);

                    document.Open();

                    #region
                    BaseFont bf = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    string strQry = "Select * from CompanyInfo   where   ClientidPrefix='" + CmpIDPrefix + "'";
                    DataTable compInfo = config.ExecuteReaderWithQueryAsync(strQry).Result;
                    string companyName = "Your Company Name";
                    string companyAddress = "Your Company Address";
                    string companyaddressline = " ";
                    string emailid = "";
                    string website = "";
                    string phoneno = "";
                    string faxno = "";
                    string PANNO = "";
                    string notes = "";
                    string PFNo = "";
                    string Esino = "";
                    string Servicetax = "";
                    string ServiceText = "";
                    float dutiestotal = 0;
                    //string Category = "";

                    string SACCode = "";
                    if (compInfo.Rows.Count > 0)
                    {
                        companyName = compInfo.Rows[0]["CompanyName"].ToString();
                        companyAddress = compInfo.Rows[0]["Address"].ToString();
                        //companyAddress = companyAddress.Replace("\r\n", string.Empty);
                        companyaddressline = compInfo.Rows[0]["Addresslineone"].ToString();
                        //CINNO = compInfo.Rows[0]["CINNO"].ToString();
                        PANNO = compInfo.Rows[0]["Labourrule"].ToString();
                        PFNo = compInfo.Rows[0]["PFNo"].ToString();
                        Esino = compInfo.Rows[0]["ESINo"].ToString();
                        Servicetax = compInfo.Rows[0]["BillNotes"].ToString();
                        emailid = compInfo.Rows[0]["Emailid"].ToString();
                        website = compInfo.Rows[0]["Website"].ToString();
                        phoneno = compInfo.Rows[0]["Phoneno"].ToString();
                        notes = compInfo.Rows[0]["Notes"].ToString();
                        faxno = compInfo.Rows[0]["Faxno"].ToString();
                        //Category = compInfo.Rows[0]["Category"].ToString();
                        SACCode = compInfo.Rows[0]["SACCode"].ToString();

                    }


                    DateTime DtLastDay = DateTime.Now;
                    if (Chk_Month.Checked == false)
                    {
                        DtLastDay = Timings.Instance.GetLastDayForSelectedMonth(ddlmonth.SelectedIndex);
                    }
                    if (Chk_Month.Checked == true)
                    {
                        DtLastDay = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                    }

                    DateTime dtn = DateTime.ParseExact(txtbilldate.Text, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    // for both "1/1/2000" or "25/1/2000" formats
                    string billdt = dtn.ToString("MM/dd/yyyy");

                    string CGSTAlias = "";
                    string SGSTAlias = "";
                    string IGSTAlias = "";
                    string Cess1Alias = "";
                    string Cess2Alias = "";
                    string OurGSTINAlias = "";
                    string GSTINAlias = "";
                    var SqlQryForTaxes = @"select ServiceTaxSeparate,Cess,SHECess,SBCess,KKCess,CGST,SGST,IGST,cess1,cess2,CGSTAlias,SGSTAlias,IGSTAlias,cess1Alias,cess2Alias,GSTINAlias,OurGSTINAlias from TblOptions where '" + billdt + "' between fromdate and todate ";
                    DataTable DtTaxes = config.ExecuteReaderWithQueryAsync(SqlQryForTaxes).Result;


                    string SCPersent = "";
                    if (DtTaxes.Rows.Count > 0)
                    {
                        SCPersent = DtTaxes.Rows[0]["ServiceTaxSeparate"].ToString();
                        CGSTAlias = DtTaxes.Rows[0]["CGSTAlias"].ToString();
                        SGSTAlias = DtTaxes.Rows[0]["SGSTAlias"].ToString();
                        IGSTAlias = DtTaxes.Rows[0]["IGSTAlias"].ToString();
                        Cess1Alias = DtTaxes.Rows[0]["Cess1Alias"].ToString();
                        Cess2Alias = DtTaxes.Rows[0]["Cess2Alias"].ToString();

                        OurGSTINAlias = DtTaxes.Rows[0]["OurGSTINAlias"].ToString();
                        GSTINAlias = DtTaxes.Rows[0]["GSTINAlias"].ToString();
                    }
                    else
                    {
                        lblResult.Text = "There Is No Tax Values For Generating Bills ";
                        return;
                    }

                    var ContractID = "";

                    var bBillDates = 0;
                    var Gendays = 0;
                    var G_Sdays = 0;
                    float WorkingDays = 0;
                    var Wkdays = "";

                    #region  Begin Get Contract Id Based on The Last Day

                    Hashtable HtGetContractID = new Hashtable();
                    var SPNameForGetContractID = "GetContractIDBasedOnthMonth";
                    HtGetContractID.Add("@clientid", ddlclientid.SelectedValue);
                    HtGetContractID.Add("@LastDay", DtLastDay);
                    DataTable DTContractID = config.ExecuteAdaptorAsyncWithParams(SPNameForGetContractID, HtGetContractID).Result;

                    if (DTContractID.Rows.Count > 0)
                    {
                        ContractID = DTContractID.Rows[0]["contractid"].ToString();
                        bBillDates = int.Parse(DTContractID.Rows[0]["BillDates"].ToString());
                    }
                    #endregion

                    //

                    string SqlQuryForServiCharge = "select ContractId,servicecharge, convert(nvarchar(20), ContractStartDate, 103) as ContractStartDate,ServiceChargeType,Description,IncludeST,ServiceTax75,Pono,typeofwork,billdates from contracts where " +
                        " clientid ='" + ddlclientid.SelectedValue + "' and ContractId='" + ContractID + "'";
                    DataTable DtServicecharge = config.ExecuteReaderWithQueryAsync(SqlQuryForServiCharge).Result;
                    string Typeofwork = "";
                    string ServiceCharge = "0";
                    string strSCType = "";
                    string strDescription = "We are presenting our bill for the House Keeping Services Provided at your establishment. Kindly release the payment at the earliest";
                    bool bSCType = false;
                    string strIncludeST = "";
                    string ContractStartDate = "";
                    string strST75 = "";
                    bool bIncludeST = false;
                    bool bST75 = false;
                    string POContent = "";
                    string billdates = "0";
                    // string ServiceTaxCategory = "";
                    if (DtServicecharge.Rows.Count > 0)
                    {
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceCharge"].ToString()) == false)
                        {
                            ServiceCharge = DtServicecharge.Rows[0]["ServiceCharge"].ToString();
                        }
                        if (String.IsNullOrEmpty(DtServicecharge.Rows[0]["ServiceChargeType"].ToString()) == false)
                        {
                            strSCType = DtServicecharge.Rows[0]["ServiceChargeType"].ToString();
                        }
                        string tempDescription = DtServicecharge.Rows[0]["Description"].ToString();
                        if (tempDescription.Trim().Length > 0)
                        {
                            strDescription = tempDescription;
                        }
                        if (strSCType.Length > 0)
                        {
                            bSCType = Convert.ToBoolean(strSCType);
                        }
                        strIncludeST = DtServicecharge.Rows[0]["IncludeST"].ToString();
                        strST75 = DtServicecharge.Rows[0]["ServiceTax75"].ToString();
                        ContractStartDate = DtServicecharge.Rows[0]["ContractStartDate"].ToString();
                        if (strIncludeST == "True")
                        {
                            bIncludeST = true;
                        }
                        if (strST75 == "True")
                        {
                            bST75 = true;
                        }
                        POContent = DtServicecharge.Rows[0]["pono"].ToString();
                        Typeofwork = DtServicecharge.Rows[0]["typeofwork"].ToString();
                        billdates = DtServicecharge.Rows[0]["billdates"].ToString();
                        // ServiceTaxCategory = DtServicecharge.Rows[0]["ServiceTaxCategory"].ToString();
                    }

                    #endregion

                    document.AddTitle(companyName);
                    document.AddAuthor("DIYOS");
                    document.AddSubject("Invoice");
                    document.AddKeywords("Keyword1, keyword2, …");
                    string imagepath = Server.MapPath("~/assets/billlogo.png");


                    #region For header

                    if (File.Exists(imagepath))
                    {
                        iTextSharp.text.Image gif2 = iTextSharp.text.Image.GetInstance(imagepath);

                        gif2.Alignment = (iTextSharp.text.Image.ALIGN_LEFT | iTextSharp.text.Image.UNDERLYING);
                        // gif2.SpacingBefore = 50;
                        gif2.ScalePercent(70f);
                        gif2.SetAbsolutePosition(34f, 735f);
                        //document.Add(new Paragraph(" "));
                        document.Add(gif2);
                    }

                    #region

                    string selectclientaddress = "select sg.segname,c.*,s.state as Statename,s.GSTStateCode,gst.gstno,isnull(gst.BillPrefix,'') as BillPrefix,isnull(gst.GSTAddress, '') as GSTAddress from clients c inner join Segments sg on c.ClientSegment = sg.SegId  left join states s on s.stateid=c.state left join GSTMaster gst on gst.id=c.ourgstin where clientid= '" + ddlclientid.SelectedItem.ToString() + "'";
                    DataTable dtclientaddress = config.ExecuteReaderWithQueryAsync(selectclientaddress).Result;
                    string OurGSTIN = "";
                    string GSTIN = "";
                    string StateCode = "0";
                    string State = "";
                    string BillPrefix = "";
                    string GSTAddress = "";
                    if (dtclientaddress.Rows.Count > 0)
                    {
                        OurGSTIN = dtclientaddress.Rows[0]["gstno"].ToString();
                        StateCode = dtclientaddress.Rows[0]["GSTStateCode"].ToString();
                        GSTIN = dtclientaddress.Rows[0]["GSTIN"].ToString();
                        State = dtclientaddress.Rows[0]["Statename"].ToString();
                        BillPrefix = dtclientaddress.Rows[0]["BillPrefix"].ToString();
                        GSTAddress = dtclientaddress.Rows[0]["GSTAddress"].ToString();
                    }
                    string BQry = "select * from TblOptions  where '" + billdt + "' between fromdate and todate ";
                    DataTable Bdt = config.ExecuteReaderWithQueryAsync(BQry).Result;


                    string SelectBillNo = "Select RIGHT(billno,11) as DisplayBillNo,* from Unitbill where month='" + month + "' and unitid='" + ddlclientid.SelectedValue + "'";
                    DataTable DtBilling = config.ExecuteReaderWithQueryAsync(SelectBillNo).Result;
                    string BillNo = "";
                    string DisplayBillNo = "";
                    DateTime BillDate;
                    DateTime DueDate;

                    #region Variables for data Fields as on 11/03/2014 by venkat


                    float servicecharge = 0;
                    float servicetax = 0;
                    float cess = 0;
                    float sbcess = 0;
                    float kkcess = 0;
                    float servicetaxprc = 0;
                    float sbcessprc = 0;
                    float kkcessprc = 0;
                    #region for GST on 21-6-2017 by sharada

                    float CGST = 0;
                    float SGST = 0;
                    float IGST = 0;
                    float Cess1 = 0;
                    float Cess2 = 0;
                    float CGSTPrc = 0;
                    float SGSTPrc = 0;
                    float IGSTPrc = 0;
                    float Cess1Prc = 0;
                    float Cess2Prc = 0;

                    #endregion for GST on 21-6-2017 by sharada
                    float cessprc = 0;
                    float shecessprc = 0;
                    float shecess = 0;
                    float totalamount = 0;
                    float Grandtotal = 0;

                    float ServiceTax75 = 0;
                    float ServiceTax25 = 0;

                    float machinarycost = 0;
                    float materialcost = 0;
                    float maintenancecost = 0;
                    float extraonecost = 0;
                    float extratwocost = 0;
                    float discountone = 0;
                    float discounttwo = 0;

                    string machinarycosttitle = "";
                    string materialcosttitle = "";
                    string maintenancecosttitle = "";
                    string extraonecosttitle = "";
                    string extratwocosttitle = "";
                    string discountonetitle = "";
                    string discounttwotitle = "";

                    bool Extradatacheck = false;
                    bool ExtraDataSTcheck = false;

                    bool STMachinary = false;
                    bool STMaterial = false;
                    bool STMaintenance = false;
                    bool STExtraone = false;
                    bool STExtratwo = false;

                    bool SCMachinary = false;
                    bool SCMaterial = false;
                    bool SCMaintenance = false;
                    bool SCExtraone = false;
                    bool SCExtratwo = false;

                    bool STDiscountone = false;
                    bool STDiscounttwo = false;

                    string strExtradatacheck = "";
                    string strExtrastcheck = "";

                    string strSTMachinary = "";
                    string strSTMaterial = "";
                    string strSTMaintenance = "";
                    string strSTExtraone = "";
                    string strSTExtratwo = "";

                    string strSCMachinary = "";
                    string strSCMaterial = "";
                    string strSCMaintenance = "";
                    string strSCExtraone = "";
                    string strSCExtratwo = "";

                    string strSTDiscountone = "";
                    string strSTDiscounttwo = "";

                    float staxamtonservicecharge = 0;
                    float RelChrgAmt = 0;


                    #endregion

                    if (DtBilling.Rows.Count > 0)
                    {
                        BillNo = DtBilling.Rows[0]["billno"].ToString();
                        DisplayBillNo = DtBilling.Rows[0]["DisplayBillNo"].ToString();
                        BillDate = Convert.ToDateTime(DtBilling.Rows[0]["billdt"].ToString());
                        DueDate = Convert.ToDateTime(DtBilling.Rows[0]["duedt"].ToString());

                        #region Begin New code for values taken from database as on 11/03/2014 by venkat

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["dutiestotalamount"].ToString()) == false)
                        {
                            totalamount = float.Parse(DtBilling.Rows[0]["dutiestotalamount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["RelChrgAmt"].ToString()) == false)
                        {
                            RelChrgAmt = float.Parse(DtBilling.Rows[0]["RelChrgAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString()) == false)
                        {
                            servicecharge = float.Parse(DtBilling.Rows[0]["TotalServiceChargeAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax"].ToString()) == false)
                        {
                            servicetax = float.Parse(DtBilling.Rows[0]["ServiceTax"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessAmt"].ToString()) == false)
                        {
                            sbcess = float.Parse(DtBilling.Rows[0]["SBCessAmt"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessAmt"].ToString()) == false)
                        {
                            kkcess = float.Parse(DtBilling.Rows[0]["KKCessAmt"].ToString());
                        }
                        #region for GST as on 21-6-2017 by sharada

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTAmt"].ToString()) == false)
                        {
                            CGST = float.Parse(DtBilling.Rows[0]["CGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTAmt"].ToString()) == false)
                        {
                            SGST = float.Parse(DtBilling.Rows[0]["SGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTAmt"].ToString()) == false)
                        {
                            IGST = float.Parse(DtBilling.Rows[0]["IGSTAmt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Amt"].ToString()) == false)
                        {
                            Cess1 = float.Parse(DtBilling.Rows[0]["Cess1Amt"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Amt"].ToString()) == false)
                        {
                            Cess2 = float.Parse(DtBilling.Rows[0]["Cess2Amt"].ToString());
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CGSTPrc"].ToString()) == false)
                        {
                            CGSTPrc = float.Parse(DtBilling.Rows[0]["CGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SGSTPrc"].ToString()) == false)
                        {
                            SGSTPrc = float.Parse(DtBilling.Rows[0]["SGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["IGSTPrc"].ToString()) == false)
                        {
                            IGSTPrc = float.Parse(DtBilling.Rows[0]["IGSTPrc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess1Prc"].ToString()) == false)
                        {
                            Cess1Prc = float.Parse(DtBilling.Rows[0]["Cess1Prc"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Cess2Prc"].ToString()) == false)
                        {
                            Cess2Prc = float.Parse(DtBilling.Rows[0]["Cess2Prc"].ToString());
                        }

                        #endregion for GST as on 21-6-2017 by sharada
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESS"].ToString()) == false)
                        {
                            cess = float.Parse(DtBilling.Rows[0]["CESS"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECess"].ToString()) == false)
                        {
                            shecess = float.Parse(DtBilling.Rows[0]["SHECess"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTaxPrc"].ToString()) == false)
                        {
                            servicetaxprc = float.Parse(DtBilling.Rows[0]["ServiceTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SBCessTaxPrc"].ToString()) == false)
                        {
                            sbcessprc = float.Parse(DtBilling.Rows[0]["SBCessTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["KKCessTaxPrc"].ToString()) == false)
                        {
                            kkcessprc = float.Parse(DtBilling.Rows[0]["KKCessTaxPrc"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["CESSPer"].ToString()) == false)
                        {
                            cessprc = float.Parse(DtBilling.Rows[0]["CESSPer"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SHECessPer"].ToString()) == false)
                        {
                            shecessprc = float.Parse(DtBilling.Rows[0]["SHECessPer"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["GrandTotal"].ToString()) == false)
                        {
                            Grandtotal = float.Parse(DtBilling.Rows[0]["GrandTotal"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MachinaryCost"].ToString()) == false)
                        {
                            machinarycost = float.Parse(DtBilling.Rows[0]["MachinaryCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["MaterialCost"].ToString()) == false)
                        {
                            materialcost = float.Parse(DtBilling.Rows[0]["MaterialCost"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ElectricalChrg"].ToString()) == false)
                        {
                            maintenancecost = float.Parse(DtBilling.Rows[0]["ElectricalChrg"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtone"].ToString()) == false)
                        {
                            extraonecost = float.Parse(DtBilling.Rows[0]["ExtraAmtone"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraAmtTwo"].ToString()) == false)
                        {
                            extratwocost = float.Parse(DtBilling.Rows[0]["ExtraAmtTwo"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discount"].ToString()) == false)
                        {
                            discountone = float.Parse(DtBilling.Rows[0]["Discount"].ToString());
                        }
                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Discounttwo"].ToString()) == false)
                        {
                            discounttwo = float.Parse(DtBilling.Rows[0]["Discounttwo"].ToString());
                        }

                        machinarycosttitle = DtBilling.Rows[0]["Machinarycosttitle"].ToString();
                        materialcosttitle = DtBilling.Rows[0]["Materialcosttitle"].ToString();
                        maintenancecosttitle = DtBilling.Rows[0]["Maintanancecosttitle"].ToString();
                        extraonecosttitle = DtBilling.Rows[0]["Extraonetitle"].ToString();
                        extratwocosttitle = DtBilling.Rows[0]["Extratwotitle"].ToString();
                        discountonetitle = DtBilling.Rows[0]["Discountonetitle"].ToString();
                        discounttwotitle = DtBilling.Rows[0]["Discounttwotitle"].ToString();

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Extradatacheck"].ToString()) == false)
                        {
                            strExtradatacheck = DtBilling.Rows[0]["Extradatacheck"].ToString();
                            if (strExtradatacheck == "True")
                            {
                                Extradatacheck = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ExtraDataSTcheck"].ToString()) == false)
                        {
                            strExtrastcheck = DtBilling.Rows[0]["ExtraDataSTcheck"].ToString();
                            if (strExtrastcheck == "True")
                            {
                                ExtraDataSTcheck = true;
                            }
                        }



                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMachinary"].ToString()) == false)
                        {
                            strSTMachinary = DtBilling.Rows[0]["STMachinary"].ToString();
                            if (strSTMachinary == "True")
                            {
                                STMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaterial"].ToString()) == false)
                        {
                            strSTMaterial = DtBilling.Rows[0]["STMaterial"].ToString();
                            if (strSTMaterial == "True")
                            {
                                STMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STMaintenance"].ToString()) == false)
                        {
                            strSTMaintenance = DtBilling.Rows[0]["STMaintenance"].ToString();
                            if (strSTMaintenance == "True")
                            {
                                STMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtraone"].ToString()) == false)
                        {
                            strSTExtraone = DtBilling.Rows[0]["STExtraone"].ToString();
                            if (strSTExtraone == "True")
                            {
                                STExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STExtratwo"].ToString()) == false)
                        {
                            strSTExtratwo = DtBilling.Rows[0]["STExtratwo"].ToString();
                            if (strSTExtratwo == "True")
                            {
                                STExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMachinary"].ToString()) == false)
                        {
                            strSCMachinary = DtBilling.Rows[0]["SCMachinary"].ToString();
                            if (strSCMachinary == "True")
                            {
                                SCMachinary = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaterial"].ToString()) == false)
                        {
                            strSCMaterial = DtBilling.Rows[0]["SCMaterial"].ToString();
                            if (strSCMaterial == "True")
                            {
                                SCMaterial = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCMaintenance"].ToString()) == false)
                        {
                            strSCMaintenance = DtBilling.Rows[0]["SCMaintenance"].ToString();
                            if (strSCMaintenance == "True")
                            {
                                SCMaintenance = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtraone"].ToString()) == false)
                        {
                            strSCExtraone = DtBilling.Rows[0]["SCExtraone"].ToString();
                            if (strSCExtraone == "True")
                            {
                                SCExtraone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["SCExtratwo"].ToString()) == false)
                        {
                            strSCExtratwo = DtBilling.Rows[0]["SCExtratwo"].ToString();
                            if (strSCExtratwo == "True")
                            {
                                SCExtratwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscountone"].ToString()) == false)
                        {
                            strSTDiscountone = DtBilling.Rows[0]["STDiscountone"].ToString();
                            if (strSTDiscountone == "True")
                            {
                                STDiscountone = true;
                            }
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["STDiscounttwo"].ToString()) == false)
                        {
                            strSTDiscounttwo = DtBilling.Rows[0]["STDiscounttwo"].ToString();
                            if (strSTDiscounttwo == "True")
                            {
                                STDiscounttwo = true;
                            }
                        }


                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax75"].ToString()) == false)
                        {
                            ServiceTax75 = float.Parse(DtBilling.Rows[0]["ServiceTax75"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["ServiceTax25"].ToString()) == false)
                        {
                            ServiceTax25 = float.Parse(DtBilling.Rows[0]["ServiceTax25"].ToString());
                        }

                        if (String.IsNullOrEmpty(DtBilling.Rows[0]["Staxonservicecharge"].ToString()) == false)
                        {
                            staxamtonservicecharge = float.Parse(DtBilling.Rows[0]["Staxonservicecharge"].ToString());
                        }

                        #endregion
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Generate The Bill Once Again');", true);
                        return;
                    }
                    string Year = DateTime.Now.Year.ToString();

                    #endregion

                    #region for companyinfo

                    PdfPTable tablelogo = new PdfPTable(2);
                    tablelogo.TotalWidth = 560f;
                    tablelogo.LockedWidth = true;
                    float[] widtlogo = new float[] { 2f, 2f };
                    tablelogo.SetWidths(widtlogo);

                    PdfPCell CCompName = new PdfPCell(new Paragraph(companyName, FontFactory.GetFont(FontStyle, 14, Font.BOLD, BaseColor.BLACK)));
                    CCompName.HorizontalAlignment = 1;
                    CCompName.BorderWidthBottom = 0;
                    CCompName.BorderWidthTop = 1.5f;
                    CCompName.BorderWidthRight = 1.5f;
                    CCompName.BorderWidthLeft = 1.5f;
                    CCompName.Colspan = 2;
                    CCompName.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompName);

                    PdfPCell CCompAddress = new PdfPCell(new Paragraph(GSTAddress, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CCompAddress.HorizontalAlignment = 1;
                    CCompAddress.BorderWidthBottom = 0;
                    CCompAddress.BorderWidthTop = 0f;
                    CCompAddress.BorderWidthRight = 1.5f;
                    CCompAddress.BorderWidthLeft = 1.5f;
                    CCompAddress.Colspan = 2;
                    //CCompAddress.PaddingLeft = 50;
                    //CCompAddress.FixedHeight = 70;
                    CCompAddress.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompAddress);

                    PdfPCell CCompPhone = new PdfPCell(new Paragraph("Tel: " + phoneno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CCompPhone.HorizontalAlignment = 1;
                    CCompPhone.BorderWidthBottom = 0;
                    CCompPhone.BorderWidthTop = 0f;
                    CCompPhone.PaddingLeft = 180f;
                    CCompPhone.BorderWidthRight = 0f;
                    CCompPhone.BorderWidthLeft = 1.5f;
                    CCompPhone.Colspan = 1;
                    //CCompPhone.PaddingLeft = 50;
                    //CCompAddress.FixedHeight = 70;
                    CCompPhone.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompPhone);

                    PdfPCell CCompFax = new PdfPCell(new Paragraph(" Fax: " + faxno, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    CCompFax.HorizontalAlignment = 1;
                    CCompFax.BorderWidthBottom = 0;
                    CCompFax.BorderWidthTop = 0f;
                    CCompFax.BorderWidthRight = 1.5f;
                    CCompFax.BorderWidthLeft = 0f;
                    CCompFax.PaddingLeft = -200f;
                    //CCompFax.PaddingTop = 2f;
                    CCompFax.Colspan = 1;
                    //CCompFax.PaddingLeft = 50;
                    //CCompAddress.FixedHeight = 70;
                    CCompFax.SetLeading(0f, 1.3f);
                    tablelogo.AddCell(CCompFax);


                    PdfPCell Celemail = new PdfPCell(new Paragraph("Email :" + emailid, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Celemail.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
                    Celemail.BorderWidthBottom = 1.5f;
                    Celemail.BorderWidthTop = 0f;
                    Celemail.PaddingBottom = 5f;
                    //Celemail.PaddingTop = 5f;
                    Celemail.BorderWidthRight = 1.5f;
                    Celemail.BorderWidthLeft = 1.5f;
                    Celemail.Colspan = 2;
                    //Celemail.FixedHeight = 20;
                    tablelogo.AddCell(Celemail);




                    //For Space

                    PdfPCell celll = new PdfPCell(new Paragraph("\n", FontFactory.GetFont(FontStyle, 12, Font.NORMAL, BaseColor.BLACK)));
                    celll.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right

                    celll.Colspan = 2;
                    //tablelogo.AddCell(celll);

                    // tablelogo.AddCell(celll);

                    PdfPCell CInvoice = new PdfPCell(new Paragraph("TAX INVOICE", FontFactory.GetFont(FontStyle, 16, Font.BOLD, BaseColor.BLACK)));
                    CInvoice.HorizontalAlignment = 1;
                    CInvoice.BorderWidthBottom = 1.5f;
                    CInvoice.BorderWidthTop = 0;
                    CInvoice.FixedHeight = 25;
                    CInvoice.BorderWidthRight = 1.5f;
                    CInvoice.BorderWidthLeft = 1.5f;
                    CInvoice.Colspan = 2;
                    tablelogo.AddCell(CInvoice);

                    //tablelogo.AddCell(celll);

                    document.Add(tablelogo);
                    #endregion

                    PdfPTable address = new PdfPTable(5);
                    address.TotalWidth = 560f;
                    address.LockedWidth = true;
                    float[] addreslogo = new float[] { 2f, 2f, 2f, 2f, 2f };
                    address.SetWidths(addreslogo);

                    PdfPTable tempTable1 = new PdfPTable(3);
                    tempTable1.TotalWidth = 336f;
                    tempTable1.LockedWidth = true;
                    float[] tempWidth1 = new float[] { 2f, 2f, 2f };
                    tempTable1.SetWidths(tempWidth1);

                    PdfPCell mress = new PdfPCell(new Paragraph("Customer's Details:", FontFactory.GetFont(FontStyle, 10, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK)));
                    mress.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    mress.BorderWidthBottom = 0;
                    mress.BorderWidthTop = 0;
                    mress.Colspan = 3;
                    mress.BorderWidthLeft = 1.5f;
                    mress.BorderWidthRight = 0.5f;
                    tempTable1.AddCell(mress);

                    string addressData = "";

                    addressData = dtclientaddress.Rows[0]["ClientAddrHno"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientaddrhno = new PdfPCell(new Paragraph("M/s. " + addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientaddrhno.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientaddrhno.Colspan = 3;                                 //clientaddrhno.Colspan = 0;
                        clientaddrhno.BorderWidthBottom = 0;
                        clientaddrhno.BorderWidthTop = 0;
                        clientaddrhno.BorderWidthLeft = 1.5f;
                        clientaddrhno.BorderWidthRight = 0.5f;
                        //clientaddrhno.clientaddrhno = 20;
                        tempTable1.AddCell(clientaddrhno);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrStreet"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.Colspan = 3;
                        clientstreet.BorderWidthLeft = 1.5f;
                        clientstreet.BorderWidthRight = 0.5f;
                        //clientstreet.PaddingLeft = 20;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrArea"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstreet = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstreet.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstreet.BorderWidthBottom = 0;
                        clientstreet.BorderWidthTop = 0;
                        clientstreet.Colspan = 3;

                        clientstreet.BorderWidthLeft = 1.5f;
                        clientstreet.BorderWidthRight = 0.5f;
                        // clientstreet.PaddingLeft = 20;
                        tempTable1.AddCell(clientstreet);
                    }


                    addressData = dtclientaddress.Rows[0]["ClientAddrColony"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcolony = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientcolony.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcolony.Colspan = 3;
                        clientcolony.BorderWidthBottom = 0;
                        clientcolony.BorderWidthTop = 0;
                        clientcolony.BorderWidthLeft = 1.5f;
                        clientcolony.BorderWidthRight = 0.5f;
                        //clientcolony.PaddingLeft = 20;
                        tempTable1.AddCell(clientcolony);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrcity"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientcity = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientcity.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientcity.Colspan = 3;
                        clientcity.BorderWidthBottom = 0;
                        clientcity.BorderWidthTop = 0;
                        clientcity.BorderWidthLeft = 1.5f;
                        clientcity.BorderWidthRight = 0.5f;
                        //  clientcity.PaddingLeft = 20;
                        tempTable1.AddCell(clientcity);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrstate"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clientstate = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clientstate.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clientstate.Colspan = 3;
                        clientstate.BorderWidthBottom = 0;
                        clientstate.BorderWidthTop = 0;
                        clientstate.BorderWidthLeft = 1.5f;
                        clientstate.BorderWidthRight = 0.5f;
                        // clientstate.PaddingLeft = 20;
                        tempTable1.AddCell(clientstate);
                    }
                    addressData = dtclientaddress.Rows[0]["ClientAddrpin"].ToString();
                    if (addressData.Trim().Length > 0)
                    {
                        PdfPCell clietnpin = new PdfPCell(new Paragraph(addressData, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                        clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        clietnpin.Colspan = 3;
                        clietnpin.BorderWidthBottom = 0;
                        clietnpin.BorderWidthTop = 0;
                        clietnpin.BorderWidthLeft = 1.5f;
                        clietnpin.BorderWidthRight = 0.5f;
                        // clientstate.PaddingLeft = 20;
                        tempTable1.AddCell(clietnpin);
                    }



                    if (Bdt.Rows.Count > 0)
                    {

                        if (GSTIN.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph(GSTINAlias + ":  " + GSTIN, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 1.5f;
                            clietnpin.BorderWidthRight = 0.5f;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                        if (State.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State: " + State, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 1.5f;
                            clietnpin.BorderWidthRight = 0.5f;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }
                        if (StateCode.Length > 0)
                        {
                            PdfPCell clietnpin = new PdfPCell(new Paragraph("State Code:  " + StateCode, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            clietnpin.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            clietnpin.Colspan = 3;
                            clietnpin.BorderWidthBottom = 0;
                            clietnpin.BorderWidthTop = 0;
                            clietnpin.BorderWidthLeft = 1.5f;
                            clietnpin.BorderWidthRight = 0.5f;
                            //  clietnpin.PaddingLeft = 20;
                            tempTable1.AddCell(clietnpin);
                        }

                    }

                    PdfPCell childTable1 = new PdfPCell(tempTable1);
                    childTable1.Border = 0;
                    childTable1.Colspan = 3;
                    // childTable1.FixedHeight = 100;
                    childTable1.HorizontalAlignment = 0;
                    address.AddCell(childTable1);

                    PdfPTable tempTable2 = new PdfPTable(2);
                    tempTable2.TotalWidth = 224f;
                    tempTable2.LockedWidth = true;
                    float[] tempWidth2 = new float[] { 1f, 1f };
                    tempTable2.SetWidths(tempWidth2);



                    var phrase = new Phrase();
                    phrase.Add(new Chunk("Bill No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell13 = new PdfPCell();
                    cell13.AddElement(phrase);
                    cell13.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13.BorderWidthBottom = 0;
                    cell13.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13.Colspan = 1;
                    cell13.BorderWidthLeft = 0.5f;
                    cell13.BorderWidthRight = 0f;
                    cell13.PaddingTop = -5;
                    tempTable2.AddCell(cell13);

                    var phrase10 = new Phrase();
                    phrase10.Add(new Chunk(": " + BillNo, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell13v = new PdfPCell();
                    cell13v.AddElement(phrase10);
                    cell13v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell13v.BorderWidthBottom = 0;
                    cell13v.PaddingLeft = -50;
                    cell13v.BorderWidthTop = 0;
                    //cell13.FixedHeight = 35;
                    cell13v.Colspan = 1;
                    cell13v.BorderWidthLeft = 0;
                    cell13v.BorderWidthRight = 1.5f;
                    cell13v.PaddingTop = -5;
                    tempTable2.AddCell(cell13v);

                    var phrase11 = new Phrase();
                    phrase11.Add(new Chunk("Date", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell131 = new PdfPCell();
                    cell131.AddElement(phrase11);
                    cell131.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell131.BorderWidthBottom = 0;
                    cell131.BorderWidthTop = 0;
                    // cell131.FixedHeight = 35;
                    cell131.Colspan = 1;
                    cell131.BorderWidthLeft = 0.5f;
                    cell131.BorderWidthRight = 0f;
                    cell131.PaddingTop = -5;
                    tempTable2.AddCell(cell131);

                    var phrase11v = new Phrase();
                    phrase11v.Add(new Chunk(": " + BillDate.Day.ToString("00") + "/" + BillDate.ToString("MM") + "/" +
                        BillDate.Year, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell131v = new PdfPCell();
                    cell131v.AddElement(phrase11v);
                    cell131v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell131v.BorderWidthBottom = 0;
                    cell131v.BorderWidthTop = 0;
                    // cell131.FixedHeight = 35;
                    cell131v.PaddingLeft = -50;
                    cell131v.Colspan = 1;
                    cell131v.BorderWidthLeft = 0;
                    cell131v.BorderWidthRight = 1.5f;
                    cell131v.PaddingTop = -5;
                    tempTable2.AddCell(cell131v);

                    var phrase12 = new Phrase();
                    phrase12.Add(new Chunk("PAN No.", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell1311 = new PdfPCell();
                    cell1311.AddElement(phrase12);
                    cell1311.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell1311.BorderWidthBottom = 0;
                    cell1311.BorderWidthTop = 0;
                    //cell1311.FixedHeight = 35;
                    cell1311.Colspan = 1;
                    cell1311.BorderWidthLeft = 0.5f;
                    cell1311.BorderWidthRight = 0f;
                    cell1311.PaddingTop = -5;
                    tempTable2.AddCell(cell1311);

                    var phrase12v = new Phrase();
                    phrase12v.Add(new Chunk(": " + PANNO, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    PdfPCell cell1311v = new PdfPCell();
                    cell1311v.AddElement(phrase12v);
                    cell1311v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                    cell1311v.BorderWidthBottom = 0;
                    cell1311v.BorderWidthTop = 0;
                    cell1311v.PaddingLeft = -50f;
                    //cell1311v.FixedHeight = 35;
                    cell1311v.Colspan = 1;
                    cell1311v.BorderWidthLeft = 0;
                    cell1311v.BorderWidthRight = 1.5f;
                    cell1311v.PaddingTop = -5;
                    tempTable2.AddCell(cell1311v);

                    if (dtn < DateTime.ParseExact("01/07/2017", "dd/MM/yyyy", CultureInfo.InvariantCulture))
                    {
                        if (Servicetax.Trim().Length > 0)
                        {
                            var phrase2gg = new Phrase();
                            phrase2gg.Add(new Chunk("S Tax No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell115 = new PdfPCell();
                            cell115.AddElement(phrase2gg);
                            cell115.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell115.BorderWidthBottom = 0;
                            cell115.BorderWidthTop = 0f;
                            cell115.Colspan = 1;
                            cell115.BorderWidthLeft = 0.5f;
                            cell115.BorderWidthRight = 0f;
                            cell115.PaddingTop = -5;
                            tempTable2.AddCell(cell115);

                            var phrase2ggv = new Phrase();
                            phrase2ggv.Add(new Chunk(": " + Servicetax, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell15v = new PdfPCell();
                            cell15v.AddElement(phrase2ggv);
                            cell15v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell15v.BorderWidthBottom = 0;
                            cell15v.BorderWidthTop = 0f;
                            cell15v.PaddingLeft = -50f;
                            cell15v.Colspan = 1;
                            cell15v.BorderWidthLeft = 0;
                            cell15v.BorderWidthRight = 1.5f;
                            cell15v.PaddingTop = -5;
                            tempTable2.AddCell(cell15v);

                        }
                    }

                    if (Bdt.Rows.Count > 0)
                    {

                        if (OurGSTIN.Length > 0)
                        {

                            var phrase21v = new Phrase();
                            phrase21v.Add(new Chunk(OurGSTINAlias, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell16v = new PdfPCell();
                            cell16v.AddElement(phrase21v);
                            cell16v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell16v.BorderWidthBottom = 0;
                            cell16v.BorderWidthTop = 0f;
                            cell16v.Colspan = 1;
                            cell16v.BorderWidthLeft = 0.5f;
                            cell16v.BorderWidthRight = 0;
                            cell16v.PaddingTop = -5;
                            tempTable2.AddCell(cell16v);

                            var phrase21vv = new Phrase();
                            phrase21vv.Add(new Chunk(": " + OurGSTIN, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            PdfPCell cell16vv = new PdfPCell();
                            cell16vv.AddElement(phrase21vv);
                            cell16vv.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                            cell16vv.BorderWidthBottom = 0;
                            cell16vv.BorderWidthTop = 0f;
                            cell16vv.Colspan = 1;
                            cell16vv.BorderWidthLeft = 0;
                            cell16vv.BorderWidthRight = 1.5f;
                            cell16vv.PaddingLeft = -50f;
                            cell16vv.PaddingTop = -5;
                            tempTable2.AddCell(cell16vv);
                        }
                    }

                    if (SACCode.Trim().Length > 0)
                    {
                        var phrase222 = new Phrase();
                        phrase222.Add(new Chunk("SAC Code", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell117 = new PdfPCell();
                        cell117.AddElement(phrase222);
                        cell117.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell117.BorderWidthBottom = 0;
                        cell117.BorderWidthTop = 0f;
                        cell117.Colspan = 1;
                        cell117.BorderWidthLeft = 0.5f;
                        cell117.BorderWidthRight = 0f;
                        cell117.PaddingTop = -5;
                        tempTable2.AddCell(cell117);

                        var phrase222v = new Phrase();
                        phrase222v.Add(new Chunk(": " + SACCode, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell17v = new PdfPCell();
                        cell17v.AddElement(phrase222v);
                        cell17v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell17v.BorderWidthBottom = 0;
                        cell17v.BorderWidthTop = 0f;
                        cell17v.PaddingLeft = -50f;
                        cell17v.Colspan = 1;
                        cell17v.BorderWidthLeft = 0;
                        cell17v.BorderWidthRight = 1.5f;
                        cell17v.PaddingTop = -5;
                        tempTable2.AddCell(cell17v);

                    }
                    string Fromdate = txtfromdate.Text;
                    string Todate = txttodate.Text;

                    if (billdates != "0")
                    {
                        var phrase2 = new Phrase();
                        phrase2.Add(new Chunk("Bill Period  ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell14 = new PdfPCell();
                        cell14.AddElement(phrase2);
                        cell14.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell14.BorderWidthBottom = 0;
                        cell14.BorderWidthTop = 0f;
                        cell14.Colspan = 1;
                        cell14.BorderWidthLeft = 0.5f;
                        cell14.BorderWidthRight = 0f;
                        cell14.PaddingTop = -5;
                        tempTable2.AddCell(cell14);

                        var phrase2v = new Phrase();
                        phrase2v.Add(new Chunk(": " + Fromdate + "  to  " +
                            Todate + " ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                        PdfPCell cell14v = new PdfPCell();
                        cell14v.AddElement(phrase2v);
                        cell14v.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                        cell14v.BorderWidthBottom = 0;
                        cell14v.BorderWidthTop = 0f;
                        cell14v.PaddingLeft = -50f;
                        cell14v.Colspan = 1;
                        cell14v.BorderWidthLeft = 0;
                        cell14v.BorderWidthRight = 1.5f;
                        cell14v.PaddingTop = -5;
                        tempTable2.AddCell(cell14v);
                    }


                    PdfPCell childTable2 = new PdfPCell(tempTable2);
                    childTable2.Border = 0;
                    childTable2.Colspan = 2;
                    //childTable2.FixedHeight = 100;
                    childTable2.HorizontalAlignment = 0;
                    address.AddCell(childTable2);
                    // address.AddCell(celll);


                    document.Add(address);




                    PdfPTable address1 = new PdfPTable(1);
                    address1.TotalWidth = 560f;
                    address1.LockedWidth = true;
                    float[] addreslogo1 = new float[] { 2f };
                    address1.SetWidths(addreslogo1);


                    PdfPCell cellser = new PdfPCell(new Phrase("Sub: -We are presenting our bill for the Security Services provided at your establishment for the month of " + GetMonthName() + " " + GetMonthOfYear() + ".Kindly release the payment at the earliest ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cellser.HorizontalAlignment = 0;
                    cellser.BorderWidthBottom = 0.5f;
                    cellser.BorderWidthLeft = 1.5f;
                    cellser.BorderWidthTop = 0.5f;
                    cellser.BorderWidthRight = 1.5f;
                    cellser.FixedHeight = 25;
                    address1.AddCell(cellser);

                    document.Add(address1);
                    #endregion

                    #region

                    int colCount = 6;

                    PdfPTable table = new PdfPTable(colCount);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;
                    table.HorizontalAlignment = 1;
                    float[] colWidths = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    table.SetWidths(colWidths);
                    PdfPCell cell;
                    string cellText;

                    #region for gridview
                    //create the header row
                    for (int colIndex = 0; colIndex < 6; colIndex++)
                    {
                        //set the column width

                        if (colIndex == 0)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase("S.No", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 1.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 1)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase("Description", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                        if (colIndex == 2)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[colIndex].Text);
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase("No Of Days Per Month ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 3)
                        {

                            cell = new PdfPCell(new Phrase("No of shifts", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }
                        if (colIndex == 4)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = Server.HtmlDecode(gvClientBilling.HeaderRow.Cells[3].Text);
                            //create a new cell with header text
                            //cellText = "UOM";
                            //set the background color for the header cell
                            cell = new PdfPCell(new Phrase("Rate(Rs)", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 0.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }


                        if (colIndex == 5)
                        {
                            // colWidths[colIndex] = (int)gvClientBilling.Columns[colIndex].ItemStyle.Width.Value;
                            //fetch the header text
                            cellText = "Amount(Rs)";
                            //create a new cell with header text
                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            //set the background color for the header cell
                            cell.HorizontalAlignment = 1;
                            //cell.HorizontalAlignment = 1;
                            cell.BorderWidthBottom = 0.5f;
                            cell.BorderWidthLeft = 0.5f;
                            cell.BorderWidthTop = 0;
                            cell.BorderWidthRight = 1.5f;
                            //cell.BorderColor = BaseColor.LIGHT_GRAY;
                            table.AddCell(cell);
                        }

                    }
                    float totaldts = 0;
                    ////export rows from GridView to table
                    for (int rowIndex = 0; rowIndex < gvClientBilling.Rows.Count; rowIndex++)
                    {
                        if (gvClientBilling.Rows[rowIndex].RowType == DataControlRowType.DataRow)
                        //gvClientBilling.RowStyle.BorderColor = System.Drawing.Color.Gray;
                        {
                            Label lblamount = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                            if (lblamount != null)
                            {
                                string strAmount = lblamount.Text;
                                float amount = 0;
                                if (strAmount.Length > 0)
                                    amount = Convert.ToSingle(strAmount);
                                if (amount >= 0)
                                {
                                    for (int j = 0; j < 6; j++)
                                    {
                                        if (j == 0)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblSno"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText + "\n\n", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.Colspan = 1;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthLeft = 1.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.BorderWidthTop = 0;
                                            cell.MinimumHeight = 14;
                                            cell.HorizontalAlignment = 1;
                                            table.AddCell(cell);
                                        }

                                        //fetch the column value of the current row
                                        if (j == 1)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string summaryQry = "select c.summary from contractdetails c inner join designations d on c.designations = d.designid " +
                                                "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label1.Text + "'";


                                            DataTable dt = config.ExecuteReaderWithQueryAsync(summaryQry).Result;
                                            cellText = label1.Text;
                                            if (dt.Rows.Count > 0)
                                            {
                                                if (dt.Rows[0]["summary"].ToString().Trim().Length > 0)
                                                    cellText += " (" + dt.Rows[0]["summary"].ToString() + ")";
                                            }

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 0;
                                            cell.Colspan = 1;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.BorderWidthTop = 0;
                                            table.AddCell(cell);
                                        }


                                        if (j == 2)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblnoofemployees"));
                                            if (label1.Text == "0")
                                            {
                                                cellText = "";
                                            }
                                            else
                                            {
                                                cellText = label1.Text;
                                            }
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.Colspan = 1;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.BorderWidthTop = 0;
                                            table.AddCell(cell);
                                        }
                                        if (j == 3)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblNoOfDuties"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthBottom = 0;
                                            cell.Colspan = 1;
                                            table.AddCell(cell);
                                            if (cellText == "")
                                            {
                                                cellText = "0";
                                            }
                                            totaldts += Convert.ToSingle(cellText);
                                        }

                                        if (j == 4)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblpayrate"));
                                            Label label2 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lbldesgn"));

                                            string dutyhrsQry = "select c.dutyhrs from contractdetails c inner join designations d on c.designations = d.designid " +
                                               "  where c.clientid='" + ddlclientid.SelectedValue + "' and d.Design='" + label2.Text + "'";

                                            //Duty Hrs removed for KL on 27/05/2015
                                            DataTable dt = config.ExecuteReaderWithQueryAsync(dutyhrsQry).Result;
                                            cellText = label1.Text;

                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(cellText, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 1;
                                            //cell.Colspan = 2;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            cell.Colspan = 1;
                                            table.AddCell(cell);
                                        }
                                        //paragraph.Alignment = Element.ALIGN_CENTER
                                        if (j == 5)
                                        {
                                            Label label1 = (Label)(gvClientBilling.Rows[rowIndex].FindControl("lblAmount"));
                                            cellText = label1.Text;
                                            //create a new cell with column value
                                            cell = new PdfPCell(new Phrase(float.Parse(cellText).ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                            cell.HorizontalAlignment = 2;
                                            cell.Colspan = 1;
                                            cell.BorderWidthTop = 0;
                                            cell.BorderWidthRight = 1.5f;
                                            cell.BorderWidthLeft = 0.5f;
                                            cell.BorderWidthBottom = 0;
                                            table.AddCell(cell);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region for space
                    PdfPCell Cellempty = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty.HorizontalAlignment = 2;
                    Cellempty.Colspan = 1;
                    Cellempty.BorderWidthTop = 0;
                    Cellempty.BorderWidthRight = 0.5f;
                    Cellempty.BorderWidthLeft = 1.5f;
                    Cellempty.BorderWidthBottom = 0;
                    Cellempty.MinimumHeight = 14;
                    PdfPCell Cellempty1 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty1.HorizontalAlignment = 2;
                    Cellempty1.Colspan = 1;
                    Cellempty1.BorderWidthTop = 0;
                    Cellempty1.BorderWidthRight = 0.5f;
                    Cellempty1.BorderWidthLeft = 0.5f;
                    Cellempty1.BorderWidthBottom = 0;
                    Cellempty1.MinimumHeight = 14;

                    PdfPCell Cellempty2 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty2.HorizontalAlignment = 2;
                    Cellempty2.Colspan = 1;
                    Cellempty2.BorderWidthTop = 0;
                    Cellempty2.BorderWidthRight = 0.5f;
                    Cellempty2.BorderWidthLeft = 0.5f;
                    Cellempty2.BorderWidthBottom = 0;
                    Cellempty2.MinimumHeight = 14;

                    PdfPCell Cellempty3 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty3.HorizontalAlignment = 2;
                    Cellempty3.Colspan = 1;
                    Cellempty3.BorderWidthTop = 0;
                    Cellempty3.BorderWidthRight = 0.5f;
                    Cellempty3.BorderWidthLeft = 0.5f;
                    Cellempty3.BorderWidthBottom = 0;
                    Cellempty3.MinimumHeight = 14;

                    PdfPCell Cellempty4 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty4.HorizontalAlignment = 2;
                    Cellempty4.Colspan = 1;
                    Cellempty4.BorderWidthTop = 0;
                    Cellempty4.BorderWidthRight = 0.5f;
                    Cellempty4.BorderWidthLeft = 0.5f;
                    Cellempty4.BorderWidthBottom = 0;
                    Cellempty4.MinimumHeight = 14;

                    PdfPCell Cellempty5 = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    Cellempty5.HorizontalAlignment = 2;
                    Cellempty5.Colspan = 1;
                    Cellempty5.BorderWidthTop = 0;
                    Cellempty5.BorderWidthRight = 1.5f;
                    Cellempty5.BorderWidthLeft = 0.5f;
                    Cellempty5.BorderWidthBottom = 0;
                    Cellempty5.MinimumHeight = 14;

                    if (gvClientBilling.Rows.Count == 1)
                    {
                        #region For cell count

                        //1


                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //17
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //18
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //19
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 2)
                    {
                        #region For cell count

                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //17
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //18
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);



                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 3)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //17
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 4)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //16
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 5)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //15
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 6)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //14
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 7)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //13
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 8)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //12
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 9)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //11
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 10)
                    {
                        #region For cell count
                        //1
                        //table.AddCell(Cellempty);
                        //table.AddCell(Cellempty1);
                        //table.AddCell(Cellempty2);
                        //table.AddCell(Cellempty3);
                        //table.AddCell(Cellempty4);
                        //table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //10
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 11)
                    {
                        #region For cell count
                        //1

                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //9
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 12)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //8
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 13)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //7
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 14)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //6
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 15)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //5
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 16)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //4
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 17)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //3
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 18)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);
                        //2
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);


                        #endregion
                    }
                    if (gvClientBilling.Rows.Count == 19)
                    {
                        #region For cell count
                        //1
                        table.AddCell(Cellempty);
                        table.AddCell(Cellempty1);
                        table.AddCell(Cellempty2);
                        table.AddCell(Cellempty3);
                        table.AddCell(Cellempty4);
                        table.AddCell(Cellempty5);

                        #endregion
                    }


                    #endregion


                    document.Add(table);

                    PdfContentByte content = writer.DirectContent;
                    //  string Fromdate = txtfromdate.Text;
                    //string Todate = txttodate.Text;

                    PdfPTable address11 = new PdfPTable(colCount);
                    address11.TotalWidth = 560f;
                    address11.LockedWidth = true;
                    float[] addreslogo11 = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    address11.SetWidths(addreslogo11);

                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 1;
                    cell.MinimumHeight = 20;
                    address11.AddCell(cell);

                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase(totaldts.ToString(), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);
                    cell = new PdfPCell(new Phrase(totalamount.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0.5f;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    address11.AddCell(cell);

                    PdfPTable tempTable11 = new PdfPTable(3);
                    tempTable11.TotalWidth = 323f;
                    tempTable11.LockedWidth = true;
                    float[] tempWidth21 = new float[] { 1.2f, 6.2f, 2f };//1.2f, 6.2f, 2f, 2.3f
                    tempTable11.SetWidths(tempWidth21);
                    // 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    #region
                    cell = new PdfPCell(new Phrase(" PLEASE NOTE : Payment Shall be made through RTGS only.", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  A/c.No 002201301150003", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    // cell.PaddingRight = 40;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  IFSC Code : CORP0000022", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  Bank : Corporation Bank,Bangalore City Branch,Gandhinagar", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 4;
                    tempTable11.AddCell(cell);


                    #endregion

                    PdfPCell Chid = new PdfPCell(tempTable11);
                    Chid.Border = 0;
                    Chid.Colspan = 3;
                    Chid.HorizontalAlignment = 0;
                    address11.AddCell(Chid);

                    PdfPTable tempTable22 = new PdfPTable(3);
                    tempTable22.TotalWidth = 237f;
                    tempTable22.LockedWidth = true;
                    float[] tempWidth22 = new float[] { 2.2f, 2f, 2.7f }; ;//2.9f, 1.83f
                    tempTable22.SetWidths(tempWidth22);

                    #region
                    #region



                    #region



                    if (machinarycost > 0)
                    {
                        if (STMachinary == true)
                        {
                            if (SCMachinary == true)
                            {


                                PdfPCell celldcst1001 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1001.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst1001.Colspan = 2;
                                celldcst1001.BorderWidthBottom = 0;
                                celldcst1001.BorderWidthLeft = 0;
                                celldcst1001.BorderWidthRight = 0;
                                celldcst1001.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst1001);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == true)
                        {
                            if (SCMaterial == true)
                            {



                                PdfPCell celldcst101 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst101.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst101.Colspan = 2;
                                celldcst101.BorderWidthBottom = 0;
                                celldcst101.BorderWidthLeft = 0;
                                celldcst101.BorderWidthRight = 0;
                                celldcst101.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst101);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == true)
                        {
                            if (SCMaintenance == true)
                            {

                                PdfPCell celldcst102 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst102.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst102.Colspan = 2;
                                celldcst102.BorderWidthBottom = 0;
                                celldcst102.BorderWidthLeft = 0;
                                celldcst102.BorderWidthRight = 0;
                                celldcst102.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst102);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == true)
                        {
                            if (SCExtraone == true)
                            {


                                PdfPCell celldcst103 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst103.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst103.Colspan = 2;
                                celldcst103.BorderWidthBottom = 0;
                                celldcst103.BorderWidthLeft = 0;
                                celldcst103.BorderWidthRight = 0;
                                celldcst103.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst103);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == true)
                        {
                            if (SCExtratwo == true)
                            {


                                PdfPCell celldcst105 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst105.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst105.Colspan = 2;
                                celldcst105.BorderWidthBottom = 0;
                                celldcst105.BorderWidthLeft = 0;
                                celldcst105.BorderWidthRight = 0;
                                celldcst105.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst105);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    #region When Extra data is checked and STcheck is false and SCcheck is true

                    if (machinarycost > 0)
                    {
                        if (STMachinary == false)
                        {
                            if (SCMachinary == true)
                            {

                                PdfPCell celldcst106 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst106.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                celldcst106.Colspan = 2;
                                celldcst106.BorderWidthBottom = 0;
                                celldcst106.BorderWidthLeft = 1.5f;
                                celldcst106.BorderWidthRight = 0;
                                celldcst106.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst106);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }

                        // bool SCMachinary = false;
                        //bool SCMaterial = false;
                        // bool SCMaintenance = false;
                        //bool SCExtraone = false;
                        //bool SCExtratwo = false;


                    }
                    if (materialcost > 0)
                    {
                        if (STMaterial == false)
                        {
                            if (SCMaterial == true)
                            {


                                PdfPCell celldcst107 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst107.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst107.Colspan = 2;
                                celldcst107.BorderWidthBottom = 0;
                                celldcst107.BorderWidthLeft = 0;
                                celldcst107.BorderWidthRight = 0;
                                celldcst107.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst107);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.Colspan = 1;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (maintenancecost > 0)
                    {
                        if (STMaintenance == false)
                        {
                            if (SCMaintenance == true)
                            {


                                PdfPCell celldcst108 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst108.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst108.Colspan = 2;
                                celldcst108.BorderWidthBottom = 0;
                                celldcst108.BorderWidthLeft = 0;
                                celldcst108.BorderWidthRight = 0;
                                celldcst108.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst108);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }

                    if (extraonecost > 0)
                    {
                        if (STExtraone == false)
                        {
                            if (SCExtraone == true)
                            {


                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 2;
                                celldcst1.BorderWidthBottom = 0;
                                celldcst1.BorderWidthLeft = 0;
                                celldcst1.BorderWidthRight = 0;
                                celldcst1.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }
                    if (extratwocost > 0)
                    {
                        if (STExtratwo == false)
                        {
                            if (SCExtratwo == true)
                            {

                                PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst1.Colspan = 2;
                                celldcst1.BorderWidthBottom = 0;
                                celldcst1.BorderWidthLeft = 0;
                                celldcst1.BorderWidthRight = 0;
                                celldcst1.BorderWidthTop = 0;
                                tempTable22.AddCell(celldcst1);

                                PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                celldcst2.BorderWidthBottom = 0;
                                celldcst2.BorderWidthLeft = 0;
                                celldcst2.BorderWidthTop = .5f;
                                celldcst2.BorderWidthRight = .5f;
                                // celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                tempTable22.AddCell(celldcst2);
                            }
                        }
                    }

                    #endregion



                    if (servicecharge > 0)//bSCType == true)
                    {
                        float scharge = servicecharge;
                        if (scharge > 0)
                        {
                            string SCharge = "";
                            if (bSCType == false)
                            {
                                SCharge = ServiceCharge + " %";
                            }
                            else
                            {
                                SCharge = ServiceCharge;
                            }

                            PdfPCell celldc2 = new PdfPCell(new Phrase("Service Charges @ " + SCharge, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc2.Colspan = 2;
                            celldc2.BorderWidthBottom = 0;
                            celldc2.BorderWidthLeft = 0;
                            celldc2.BorderWidthTop = 0;
                            celldc2.BorderWidthRight = .5f;
                            //celldc2.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldc2);

                            PdfPCell celldc4 = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldc4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldc4.BorderWidthBottom = 0;
                            celldc4.Colspan = 1;
                            celldc4.BorderWidthLeft = 0;
                            celldc4.BorderWidthTop = .5f;
                            celldc4.BorderWidthRight = .5f;
                            //celldc4.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldc4);
                        }
                    }

                    #endregion



                    #region When Extra data is checked and STcheck is true
                    if (Extradatacheck == true)
                    {
                        //float machineryCostwithst = 0;
                        //if (lblMachinerywithst.Text.Length > 0)
                        //    machineryCostwithst = Convert.ToSingle(lblMachinerywithst.Text);

                        if (machinarycost > 0)
                        {
                            if (STMachinary == true)
                            {
                                if (SCMachinary == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        //float materialcostwithst = 0;
                        //if (lblMaterialwithst.Text.Length > 0)
                        //    materialcostwithst = Convert.ToSingle(lblMaterialwithst.Text);
                        if (materialcost > 0)
                        {
                            if (STMaterial == true)
                            {
                                if (SCMaterial == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }


                        //float electricalcostwithst = 0;
                        //if (lblElectricalwithst.Text.Length > 0)
                        //    electricalcostwithst = Convert.ToSingle(lblElectricalwithst.Text);
                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == true)
                            {
                                if (SCMaintenance == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        //float extraamtwithst = 0;
                        //if (lblextraonewithst.Text.Length > 0)
                        //    extraamtwithst = Convert.ToSingle(lblextraonewithst.Text);
                        if (extraonecost > 0)
                        {
                            if (STExtraone == true)
                            {
                                if (SCExtraone == false)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        //float Extraamtwithst1 = 0;
                        //if (lblextratwowithst.Text.Length > 0)
                        //    Extraamtwithst1 = Convert.ToSingle(lblextratwowithst.Text);
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == true)
                            {
                                if (SCExtratwo == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 0; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }


                    }

                    #endregion




                    if (servicecharge > 0)//bSCType == true)
                    {
                        float scharge = servicecharge;
                        if (scharge > 0)
                        {
                            string SCharge = "";
                            if (bSCType == false)
                            {
                                SCharge = ServiceCharge + " %";
                            }
                            else
                            {
                                SCharge = ServiceCharge;
                            }


                            PdfPCell servicechr = new PdfPCell(new Phrase("Service Charges @ " + SCharge + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            servicechr.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                            servicechr.Colspan = 1;
                            servicechr.BorderWidthBottom = 0;
                            servicechr.BorderWidthLeft = 0;
                            servicechr.BorderWidthTop = 0;
                            servicechr.BorderWidthRight = 0.5f;
                            servicechr.SetLeading(0, 1.3f);
                            tempTable22.AddCell(servicechr);

                            PdfPCell srvvalue = new PdfPCell(new Phrase(servicecharge.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            srvvalue.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                            srvvalue.Colspan = 1;
                            srvvalue.BorderWidthBottom = 0;
                            srvvalue.BorderWidthLeft = 0;
                            srvvalue.BorderWidthTop = 0;
                            srvvalue.BorderWidthRight = 0;
                            srvvalue.SetLeading(0, 1.3f);
                            tempTable22.AddCell(srvvalue);

                        }
                    }

                    #endregion

                    if (!bIncludeST)
                    {

                        string scpercent = "";
                        if (bST75 == true)
                        {
                            scpercent = "3";
                        }
                        else
                        {
                            scpercent = SCPersent;
                        }

                        if (servicetax > 0)
                        {

                            PdfPCell srvtax = new PdfPCell(new Phrase("Service Tax @ " + servicetaxprc + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            srvtax.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            srvtax.Colspan = 2;
                            srvtax.BorderWidthBottom = 0;
                            srvtax.BorderWidthLeft = 0;
                            srvtax.BorderWidthTop = 0;
                            srvtax.BorderWidthRight = 0.5f;
                            // srvtax.SetLeading(0, 1.3f);
                            tempTable22.AddCell(srvtax);

                            PdfPCell celldd4 = new PdfPCell(new Phrase(servicetax.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0.5f;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(celldd4);

                        }

                        if (sbcess > 0)
                        {

                            string SBCESSPresent = DtTaxes.Rows[0]["SBCess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("Swachh Bharat Cess @ " + sbcessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = 0;
                            celldd2.BorderWidthLeft = 0;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(sbcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0;
                            celldd4.BorderWidthLeft = 0.5f;
                            celldd2.Colspan = 1;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(celldd4);

                        }



                        if (kkcess > 0)
                        {


                            string KKCESSPresent = DtTaxes.Rows[0]["KKCess"].ToString();
                            PdfPCell Cellmtcesskk1 = new PdfPCell(new Phrase("Krishi Kalyan Cess @ " + kkcessprc + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            Cellmtcesskk1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellmtcesskk1.Colspan = 2;
                            Cellmtcesskk1.BorderWidthBottom = 0;
                            Cellmtcesskk1.BorderWidthLeft = 0;
                            Cellmtcesskk1.BorderWidthTop = 0;
                            Cellmtcesskk1.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(Cellmtcesskk1);

                            PdfPCell Cellmtcesskk2 = new PdfPCell(new Phrase(kkcess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            Cellmtcesskk2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            Cellmtcesskk2.BorderWidthBottom = 0;
                            Cellmtcesskk2.Colspan = 1;
                            Cellmtcesskk2.BorderWidthLeft = 0.5f;
                            Cellmtcesskk2.BorderWidthTop = 0;
                            Cellmtcesskk2.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(Cellmtcesskk2);

                        }
                        #region for GST as on 17-6-2017

                        if (CGST > 0)
                        {


                            PdfPCell CellCGST = new PdfPCell(new Phrase(CGSTAlias + " @ " + CGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGST.Colspan = 2;
                            CellCGST.BorderWidthBottom = 0;
                            CellCGST.BorderWidthLeft = 0;
                            CellCGST.BorderWidthTop = 0;
                            CellCGST.BorderWidthRight = .5f;
                            // CellCGST.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCGST);

                            PdfPCell CellCGSTAmt = new PdfPCell(new Phrase(CGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCGSTAmt.BorderWidthBottom = 0;
                            CellCGSTAmt.BorderWidthLeft = 0.5f;
                            CellCGSTAmt.BorderWidthTop = 0;
                            CellCGSTAmt.BorderWidthRight = 1.5f;
                            // CellCGSTAmt.BorderColor = BaseColor.GRAY;
                            tempTable22.AddCell(CellCGSTAmt);

                        }


                        if (SGST > 0)
                        {



                            PdfPCell CellSGST = new PdfPCell(new Phrase(SGSTAlias + " @ " + SGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellSGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellSGST.Colspan = 2;
                            CellSGST.BorderWidthBottom = 0;
                            CellSGST.BorderWidthLeft = 0f;
                            CellSGST.BorderWidthTop = 0;
                            CellSGST.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(CellSGST);

                            PdfPCell CellSGSTAmt = new PdfPCell(new Phrase(SGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellSGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellSGSTAmt.BorderWidthBottom = 0;
                            CellSGSTAmt.BorderWidthLeft = 0.5f;
                            CellSGSTAmt.BorderWidthTop = 0;
                            CellSGSTAmt.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(CellSGSTAmt);

                        }

                        if (IGST > 0)
                        {

                            PdfPCell CellIGST = new PdfPCell(new Phrase(IGSTAlias + " @ " + IGSTPrc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellIGST.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellIGST.Colspan = 2;
                            CellIGST.BorderWidthBottom = 0;
                            CellIGST.BorderWidthLeft = 0;
                            CellIGST.BorderWidthTop = 0;
                            CellIGST.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(CellIGST);

                            PdfPCell CellIGSTAmt = new PdfPCell(new Phrase(IGST.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellIGSTAmt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellIGSTAmt.BorderWidthBottom = 0;
                            CellIGSTAmt.BorderWidthLeft = 0.5f;
                            CellIGSTAmt.BorderWidthTop = 0;
                            CellIGSTAmt.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(CellIGSTAmt);

                        }

                        if (Cess1 > 0)
                        {

                            PdfPCell CellCess1 = new PdfPCell(new Phrase(Cess1Alias + " @ " + Cess1Prc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess1.Colspan = 2;
                            CellCess1.BorderWidthBottom = 0;
                            CellCess1.BorderWidthLeft = 0f;
                            CellCess1.BorderWidthTop = 0;
                            CellCess1.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(CellCess1);

                            PdfPCell CellCess1Amt = new PdfPCell(new Phrase(Cess1.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess1Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess1Amt.BorderWidthBottom = 0;
                            CellCess1Amt.BorderWidthLeft = 0.5f;
                            CellCess1Amt.BorderWidthTop = 0;
                            CellCess1Amt.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(CellCess1Amt);

                        }


                        if (Cess2 > 0)
                        {

                            PdfPCell CellCess2 = new PdfPCell(new Phrase(Cess2Alias + " @ " + Cess2Prc + "%", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess2.Colspan = 2;
                            CellCess2.BorderWidthBottom = 0;
                            CellCess2.BorderWidthLeft = 0f;
                            CellCess2.BorderWidthTop = 0;
                            CellCess2.BorderWidthRight = 0.5f;
                            tempTable22.AddCell(CellCess2);

                            PdfPCell CellCess2Amt = new PdfPCell(new Phrase(Cess2.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            CellCess2Amt.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            CellCess2Amt.BorderWidthBottom = 0;
                            CellCess2Amt.BorderWidthLeft = 0.5f;
                            CellCess2Amt.BorderWidthTop = 0;
                            CellCess2Amt.BorderWidthRight = 1.5f;
                            tempTable22.AddCell(CellCess2Amt);

                        }

                        #endregion for GST

                        if (cess > 0)
                        {

                            PdfPCell cessblnk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            cessblnk.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                            cessblnk.Colspan = 2;
                            cessblnk.BorderWidthBottom = 0.5f;
                            cessblnk.BorderWidthLeft = 0.5f;
                            cessblnk.BorderWidthTop = 0;
                            cessblnk.BorderWidthRight = 0f;
                            cessblnk.SetLeading(0, 1.3f);
                            tempTable22.AddCell(cessblnk);

                            string CESSPresent = DtTaxes.Rows[0]["Cess"].ToString();
                            PdfPCell celldd2 = new PdfPCell(new Phrase("CESS @ " + CESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldd2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd2.Colspan = 2;
                            celldd2.BorderWidthBottom = 0.5f;
                            celldd2.BorderWidthLeft = 0.5f;
                            celldd2.BorderWidthTop = 0;
                            celldd2.BorderWidthRight = 0f;
                            //celldd2.PaddingBottom = 5;
                            //celldd2.PaddingTop = 5;
                            tempTable22.AddCell(celldd2);


                            PdfPCell celldd4 = new PdfPCell(new Phrase(cess.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldd4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldd4.BorderWidthBottom = 0.5f;
                            celldd4.Colspan = 1;
                            celldd4.BorderWidthLeft = 0.5f;
                            celldd4.BorderWidthTop = 0;
                            celldd4.BorderWidthRight = 0.5f;
                            //celldd4.PaddingBottom = 5;
                            //celldd4.PaddingTop = 5;
                            tempTable22.AddCell(celldd4);

                        }

                        if (shecess > 0)
                        {

                            PdfPCell shecessblnk = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            shecessblnk.HorizontalAlignment = Element.ALIGN_JUSTIFIED; //0=Left, 1=Centre, 2=Right
                            shecessblnk.Colspan = 2;
                            shecessblnk.BorderWidthBottom = 0.5f;
                            shecessblnk.BorderWidthLeft = 0.5f;
                            shecessblnk.BorderWidthTop = 0;
                            shecessblnk.BorderWidthRight = 0f;
                            shecessblnk.SetLeading(0, 1.3f);
                            tempTable22.AddCell(shecessblnk);


                            string SHECESSPresent = DtTaxes.Rows[0]["shecess"].ToString();
                            PdfPCell celldf2 = new PdfPCell(new Phrase("S&H Ed.CESS @ " + SHECESSPresent + "%", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                            celldf2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf2.Colspan = 2;
                            celldf2.BorderWidthBottom = 0.5f;
                            celldf2.BorderWidthLeft = 0.5f;
                            celldf2.BorderWidthTop = 0;
                            celldf2.BorderWidthRight = 0f;
                            //celldf2.PaddingBottom = 5;
                            //celldf2.PaddingTop = 5;
                            tempTable22.AddCell(celldf2);


                            PdfPCell celldf4 = new PdfPCell(new Phrase(shecess.ToString("0.00"),
                                FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldf4.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldf4.BorderWidthBottom = 0.5f;
                            celldf4.Colspan = 1;
                            celldf4.BorderWidthLeft = 0.5f;
                            celldf4.BorderWidthTop = 0;
                            celldf4.BorderWidthRight = 0.5f;
                            ////celldf4.PaddingBottom = 5;
                            //celldf4.PaddingTop = 5;
                            //celldf4.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldf4);
                        }
                    }

                    #region When Extradata check is false and STcheck is false



                    if (Extradatacheck == true)
                    {
                        if (machinarycost > 0)
                        {
                            if (STMachinary == false)
                            {
                                if (SCMachinary == false)
                                {



                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(machinarycosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0.5f;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(machinarycost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0.5f;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;

                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (materialcost > 0)
                        {
                            if (STMaterial == false)
                            {
                                if (SCMaterial == false)
                                {

                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(materialcosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0.5f;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(materialcost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0.5f;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }


                        if (maintenancecost > 0)
                        {
                            if (STMaintenance == false)
                            {
                                if (SCMaintenance == false)
                                {



                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(maintenancecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    //celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(maintenancecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = .5f;
                                    celldcst2.BorderWidthRight = .5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (extraonecost > 0)
                        {
                            if (STExtraone == false)
                            {
                                if (SCExtraone == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extraonecosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;

                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = .5f;
                                    celldcst1.BorderWidthRight = .5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extraonecost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.Colspan = 1;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = 1.5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }
                        if (extratwocost > 0)
                        {
                            if (STExtratwo == false)
                            {
                                if (SCExtratwo == false)
                                {


                                    PdfPCell celldcst1 = new PdfPCell(new Phrase(extratwocosttitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst1.Colspan = 2;
                                    celldcst1.BorderWidthBottom = 0;
                                    celldcst1.BorderWidthLeft = 0;
                                    celldcst1.BorderWidthTop = 0;
                                    celldcst1.BorderWidthRight = 1.5f;
                                    // celldcst1.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst1);

                                    PdfPCell celldcst2 = new PdfPCell(new Phrase(extratwocost.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                                    celldcst2.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                                    celldcst2.BorderWidthBottom = 0;
                                    celldcst2.BorderWidthLeft = 0;
                                    celldcst2.BorderWidthTop = 0;
                                    celldcst2.BorderWidthRight = 1.5f;
                                    //celldcst2.BorderColor = BaseColor.LIGHT_GRAY;
                                    tempTable22.AddCell(celldcst2);
                                }
                            }
                        }

                        if (discountone > 0)
                        {


                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discountonetitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.Colspan = 2;
                            celldMt1.BorderWidthBottom = 0;
                            celldMt1.BorderWidthLeft = 0;
                            celldMt1.BorderWidthTop = .5f;
                            celldMt1.BorderWidthRight = .5f;
                            // celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discountone.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = 0;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.Colspan = 1;
                            celldMt3.BorderWidthTop = .5f;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldMt3);
                        }
                        if (discounttwo > 0)
                        {



                            PdfPCell celldMt1 = new PdfPCell(new Phrase(discounttwotitle, FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt1.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt1.BorderWidthBottom = 0;
                            celldMt1.BorderWidthLeft = 0;
                            celldMt1.BorderWidthTop = 0;
                            celldMt1.BorderWidthRight = .5f;
                            //celldMt1.BorderColor = BaseColor.LIGHT_GRAY;
                            celldMt1.Colspan = 2;
                            tempTable22.AddCell(celldMt1);

                            PdfPCell celldMt3 = new PdfPCell(new Phrase(discounttwo.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                            celldMt3.HorizontalAlignment = 2; //0=Left, 1=Centre, 2=Right
                            celldMt3.BorderWidthBottom = 0;
                            celldMt3.BorderWidthLeft = 0;
                            celldMt3.Colspan = 1;
                            celldMt3.BorderWidthTop = 0;
                            celldMt3.BorderWidthRight = .5f;
                            // celldMt3.BorderColor = BaseColor.LIGHT_GRAY;
                            tempTable22.AddCell(celldMt3);
                        }
                    }
                    #endregion
                    #endregion

                    PdfPCell Chids = new PdfPCell(tempTable22);
                    Chids.Border = 0;
                    Chids.Colspan = 3;
                    Chids.HorizontalAlignment = 0;
                    address11.AddCell(Chids);

                    document.Add(address11);
                    #region footer
                    PdfPTable addrssf = new PdfPTable(colCount);
                    addrssf.TotalWidth = 560f;
                    addrssf.LockedWidth = true;
                    float[] addr = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    addrssf.SetWidths(addr);


                    PdfPTable cellt = new PdfPTable(3);
                    cellt.TotalWidth = 323f;
                    cellt.LockedWidth = true;
                    float[] widthcell = new float[] { 1.2f, 6.2f, 2f };//1.2f, 6.2f, 2f, 2.3f
                    cellt.SetWidths(widthcell);
                    #region

                    cell = new PdfPCell(new Phrase(" Amount In Words: ", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    cellt.AddCell(cell);

                    //string Amountinwords = NumberToEnglish.Instance.changeNumericToWords(Grandtotal.ToString());
                    #region Amount in words
                    string GTotal = Convert.ToDecimal(Grandtotal.ToString()).ToString("0.00");
                    string[] arr = GTotal.ToString().Split("."[0]);
                    string inwords = "";
                    string rupee = (arr[0]);
                    string paise = "";
                    string Amountinwords = "";
                    if (arr.Length == 2)
                    {
                        if (arr[1].Length > 0 && arr[1] != "00")
                        {
                            paise = (arr[1]);
                        }
                    }

                    if (paise != "0.00" && paise != "0" && paise != "")
                    {
                        int I = Int16.Parse(paise);
                        String p = NumberToEnglish.Instance.NumbersToWords(I, true);
                        paise = p;
                        rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), false);
                        inwords = " Rupees " + rupee + "" + paise + " Paise Only";

                    }
                    else
                    {
                        rupee = NumberToEnglish.Instance.NumbersToWords(Convert.ToInt64(arr[0]), true);
                        inwords = " Rupees " + rupee + " Only";
                    }



                    Amountinwords = inwords;
                    #endregion

                    cell = new PdfPCell(new Phrase("  " + Amountinwords.Trim() + "  ", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    cellt.AddCell(cell);
                    #endregion
                    PdfPCell Chid1 = new PdfPCell(cellt);
                    Chid1.Border = 0;
                    Chid1.Colspan = 3;
                    Chid1.HorizontalAlignment = 0;
                    addrssf.AddCell(Chid1);

                    PdfPTable celltf = new PdfPTable(3);
                    celltf.TotalWidth = 237f;
                    celltf.LockedWidth = true;
                    float[] Dfv = new float[] { 2.2f, 2f, 2.7f }; ;//2.9f, 1.83f
                    celltf.SetWidths(Dfv);

                    #region
                    cell = new PdfPCell(new Phrase("Grand  Total", FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 2;
                    celltf.AddCell(cell);
                    cell = new PdfPCell(new Phrase(Grandtotal.ToString("#,##0.00"), FontFactory.GetFont(FontStyle, 10, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    celltf.AddCell(cell);

                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 2;
                    // cell.MinimumHeight = 30;
                    celltf.AddCell(cell);
                    cell = new PdfPCell(new Phrase("", FontFactory.GetFont(FontStyle, 10, Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 2;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 1;
                    celltf.AddCell(cell);

                    #endregion

                    PdfPCell Chid2 = new PdfPCell(celltf);
                    Chid2.Border = 0;
                    Chid2.Colspan = 3;
                    Chid2.HorizontalAlignment = 0;
                    addrssf.AddCell(Chid2);

                    document.Add(addrssf);

                    PdfPTable Addterms = new PdfPTable(colCount);
                    Addterms.TotalWidth = 560f;
                    Addterms.LockedWidth = true;
                    float[] widthrerms = new float[] { 1.2f, 6.2f, 2f, 2.2f, 2f, 2.7f };
                    Addterms.SetWidths(widthrerms);


                    PdfPTable Childterms = new PdfPTable(3);
                    Childterms.TotalWidth = 323f;
                    Childterms.LockedWidth = true;
                    float[] Celters = new float[] { 1.2f, 6.2f, 2f };
                    Childterms.SetWidths(Celters);




                    cell = new PdfPCell(new Phrase(" Payment Terms \n\n", FontFactory.GetFont(FontStyle, 9, Font.UNDERLINE | Font.NORMAL, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  1.  Payment to be made as per Agreement Terms.\n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  2.  An interest of 24% p.a.shall be levied from the due date onwards.\n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);
                    //cell = new PdfPCell(new Phrase("  3.  Please Pay this bill by Cheque / DD only favour of", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    //cell.HorizontalAlignment = 0;
                    //cell.BorderWidthBottom = 0;
                    //cell.BorderWidthTop = 0;
                    //cell.BorderWidthRight = 0.5f;
                    //cell.BorderWidthLeft = 1.5f;
                    //cell.Colspan = 3;
                    //Childterms.AddCell(cell);
                    //cell = new PdfPCell(new Phrase("       " + companyName+"\n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    //cell.HorizontalAlignment = 0;
                    //cell.BorderWidthBottom = 0;
                    //cell.BorderWidthTop = 0;
                    //cell.BorderWidthRight = 0.5f;
                    //cell.BorderWidthLeft = 1.5f;
                    //cell.Colspan = 3;
                    //Childterms.AddCell(cell);
                    cell = new PdfPCell(new Phrase("  3.  All disputes Subjects to Bangalore Jurisdiction.\n\n", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 0;
                    cell.BorderWidthBottom = 1.5f;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 0.5f;
                    cell.BorderWidthLeft = 1.5f;
                    cell.Colspan = 3;
                    Childterms.AddCell(cell);


                    PdfPCell Chid3 = new PdfPCell(Childterms);
                    Chid3.Border = 0;
                    Chid3.Colspan = 3;
                    Chid3.HorizontalAlignment = 0;
                    Addterms.AddCell(Chid3);



                    PdfPTable chilk = new PdfPTable(3);
                    chilk.TotalWidth = 237f;
                    chilk.LockedWidth = true;
                    float[] Celterss = new float[] { 2.2f, 2f, 2.7f };
                    chilk.SetWidths(Celterss);

                    cell = new PdfPCell(new Phrase("\nFor " + companyName, FontFactory.GetFont(FontStyle, 8, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 0;
                    cell.BorderWidthTop = 0.5f;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 3;
                    chilk.AddCell(cell);

                    cell = new PdfPCell(new Phrase("\n\n\n\nAuthorised Signatory", FontFactory.GetFont(FontStyle, 9, Font.BOLD, BaseColor.BLACK)));
                    cell.HorizontalAlignment = 1;
                    cell.BorderWidthBottom = 1.5f;
                    cell.BorderWidthTop = 0;
                    cell.BorderWidthRight = 1.5f;
                    cell.BorderWidthLeft = 0.5f;
                    cell.Colspan = 3;
                    chilk.AddCell(cell);


                    PdfPCell Chid4 = new PdfPCell(chilk);
                    Chid4.Border = 0;
                    Chid4.Colspan = 3;
                    Chid4.HorizontalAlignment = 0;
                    Addterms.AddCell(Chid4);

                    document.Add(Addterms);
                    #endregion

                    //Childterms.WriteSelectedRows(0, -1, document.LeftMargin - 19, document.BottomMargin + 122, content);
                    //chilk.WriteSelectedRows(0, -1, document.LeftMargin + 261, document.BottomMargin + 122, content);
                    //Addterms.WriteSelectedRows(0, -1, document.RightMargin - 19, document.BottomMargin + 122, content);

                    //cellt.WriteSelectedRows(0, -1, document.LeftMargin - 19, document.BottomMargin + 166, content);
                    //celltf.WriteSelectedRows(0, -1, document.LeftMargin + 301, document.BottomMargin + 166, content);
                    //addrssf.WriteSelectedRows(0, -1, document.RightMargin - 19, document.BottomMargin + 166, content);
                    //tempTable11.WriteSelectedRows(0, -1, document.LeftMargin - 19, document.BottomMargin + 224, content);
                    //tempTable22.WriteSelectedRows(0, -1, document.LeftMargin + 301, document.BottomMargin + 224, content);
                    //address11.WriteSelectedRows(0, -1, document.RightMargin - 19, document.BottomMargin + 244, content);

                    //Rectangle rectangle = new Rectangle(document.PageSize);
                    //rectangle.Left += document.LeftMargin - 7;
                    //rectangle.Right -= document.RightMargin + -25;
                    //rectangle.Top -= document.TopMargin -14;
                    //rectangle.Bottom += document.BottomMargin + 60;
                    //content.SetColorStroke(BaseColor.BLACK);

                    //content.Rectangle(rectangle.Left - 12, rectangle.Bottom - 25, rectangle.Width + 5, rectangle.Height + 5);
                    //content.Stroke();






                    #endregion


                    string filename = DisplayBillNo + "/" + ddlclientid.SelectedValue + "/" + GetMonthName().Substring(0, 3) + "/" + GetMonthOfYear() + "/Invoice.pdf";


                    document.Close();
                    Response.ContentType = "application/pdf";
                    Response.AddHeader("content-disposition", "attachment;filename=\"" + filename + "\"");
                    Response.Buffer = true;
                    Response.Clear();
                    Response.OutputStream.Write(ms.GetBuffer(), 0, ms.GetBuffer().Length);
                    Response.OutputStream.Flush();
                    Response.End();
                }

                catch (Exception ex)
                {
                    //LblResult.Text = ex.Message;
                }
            }
            else
            {
                // LblResult.Text = "There is no bill generated for selected client";
                ScriptManager.RegisterStartupScript(this, GetType(), "showlalert", "alert(' There is no bill generated for selected client ');", true);

            }
        }

        #region New code for old bill Generation on 10/03/2014 by venkat

        protected void txtmonthOnTextChanged(object sender, EventArgs e)
        {
            //lblTotalDuties.Text = string.Empty;
            //lblTotalOts.Text = string.Empty;
            lblResult.Text = string.Empty;
            txtduedate.Text = string.Empty;
            txtbilldate.Text = string.Empty;
            lblbillnolatest.Text = string.Empty;
            ClearExtraDataForBilling();
            if (txtmonth.Text.Trim().Length > 0)
            {

                FillMonthDetails();
                DisplayDataInGrid();
            }
            else
            {

                gvClientBilling.DataSource = null;
                gvClientBilling.DataBind();

            }
        }

        public int GetMonthBasedOnSelectionDateorMonth()
        {

            var testDate = 0;
            string EnteredDate = "";

            #region Validation

            if (txtmonth.Text.Trim().Length > 0)
            {

                try
                {

                    testDate = GlobalData.Instance.CheckEnteredDate(txtmonth.Text);
                    if (testDate > 0)
                    {
                        ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                        return 0;
                    }
                    EnteredDate = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb")).ToString();
                }
                catch (Exception ex)
                {
                    ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('You Are Entered Invalid  DATE.Date Format Should be [DD/MM/YYYY].Ex.01/01/1990');", true);
                    return 0;
                }
            }
            #endregion


            #region  Month Get Based on the Control Selection
            int month = 0;
            if (Chk_Month.Checked == false)
            {
                month = Timings.Instance.GetIdForSelectedMonth(ddlmonth.SelectedIndex);
                //return month;
            }
            if (Chk_Month.Checked == true)
            {
                DateTime date = DateTime.Parse(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                month = Timings.Instance.GetIdForEnteredMOnth(date);
                //return month;
            }
            return month;

            #endregion
        }

        public string GetMonthOfYear()
        {
            string MonthYear = "";

            int month = GetMonthBasedOnSelectionDateorMonth();
            if (month.ToString().Length == 4)
            {

                MonthYear = "20" + month.ToString().Substring(2, 2);

            }
            if (month.ToString().Length == 3)
            {

                MonthYear = "20" + month.ToString().Substring(1, 2);

            }
            return MonthYear;
        }

        protected int GetMonth(string NameOfmonth)
        {
            int month = -1;
            var formatInfoinfo = new DateTimeFormatInfo();
            string[] monthName = formatInfoinfo.MonthNames;
            for (int i = 0; i < monthName.Length; i++)
            {
                if (monthName[i].CompareTo(NameOfmonth) == 0)
                {
                    month = i + 1;
                    break;
                }
            }
            return month;
        }

        public string GetMonthName()
        {
            string monthname = string.Empty;
            int payMonth = 0;
            DateTimeFormatInfo mfi = new DateTimeFormatInfo();

            if (Chk_Month.Checked == false)
            {
                payMonth = GetMonth(ddlmonth.SelectedValue);
                monthname = mfi.GetMonthName(payMonth).ToString();
            }
            if (Chk_Month.Checked == true)
            {

                DateTime date = Convert.ToDateTime(txtmonth.Text, CultureInfo.GetCultureInfo("en-gb"));
                monthname = mfi.GetMonthName(date.Month).ToString();
                //payMonth = GetMonth(monthname);
            }
            return monthname;
        }

        protected void btnSubmit_Click(object sender, EventArgs e)
        {


            var password = string.Empty;
            var SPName = string.Empty;
            password = txtPassword.Text.Trim();
            string sqlPassword = "select password from IouserDetails where password='" + txtPassword.Text + "'";
            DataTable dtpassword = config.ExecuteReaderWithQueryAsync(sqlPassword).Result;
            if (dtpassword.Rows.Count == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Invalid Password');", true);
                return;
            }

            #region Validation

            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();
            txtbilldate.Text = string.Empty;
            txtfromdate.Text = string.Empty;
            txttodate.Text = string.Empty;
            lblbillnolatest.Text = string.Empty;
            txtmonth.Text = string.Empty;
            ddlmonth.SelectedIndex = 0;
            txtduedate.Text = string.Empty;
            ClearExtraDataForBilling();
            ClearData();

            if (ddlclientid.SelectedIndex == 0)
            {
                ScriptManager.RegisterStartupScript(this, GetType(), "show alert", "alert('Please Select The client Id');", true);
                Chk_Month.Checked = false;
                return;
            }

            #endregion

            Chk_Month.Checked = true;

            if (Chk_Month.Checked)
            {
                txtmonth.Visible = true;
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = false;

            }

        }

        protected void btnClose_Click(object sender, EventArgs e)
        {
            modelLogindetails.Hide();
            Chk_Month.Checked = false;
            gvClientBilling.DataSource = null;
            gvClientBilling.DataBind();
            txtbilldate.Text = string.Empty;
            txtfromdate.Text = string.Empty;
            txttodate.Text = string.Empty;
            lblbillnolatest.Text = string.Empty;
            txtmonth.Text = string.Empty;
            ddlmonth.SelectedIndex = 0;
            txtduedate.Text = string.Empty;
            ClearExtraDataForBilling();
            ClearData();
            if (Chk_Month.Checked == false)
            {
                txtmonth.Visible = false;
                txtmonth.Text = "";
                ddlmonth.SelectedIndex = 0;
                ddlmonth.Visible = true;
            }
        }

        #endregion

    }
}